{"version":3,"sources":["services/redux/transactions/trans-types.ts","services/redux/transactions/trans-reducer.ts","services/index.ts","services/redux/google-sheet/sheet-types.ts","services/redux/google-sheet/sheet-reducer.ts","services/redux/bills/bills-types.ts","services/redux/bills/bills-reducer.ts","services/redux/root-reducer.js","services/redux/store.ts","components/mapping/secret-dialog/index.tsx","services/googleapis/google-token.ts","services/googleapis/drive-util.ts","services/ocr/index.ts","services/chatgpt/index.ts","components/cash/index.tsx","workspaces/cash.tsx","services/cat-map/cat-index.ts","services/cat-map/month-index.ts","services/maint-map/flat-index.ts","services/maint-map/month-index.ts","services/googleapis/gsheet-util-impl.ts","services/redux/google-sheet/sheet-actions.ts","services/cat-map/cat-map-types.ts","utils/logical-executor.ts","utils/query-executor.ts","utils/col-query-executor.ts","utils/trans-map-executor.ts","services/cat-map/cat-map.ts","services/maint-map/maint-map.ts","utils/maint-map-executor.ts","utils/trans-category.ts","services/redux/transactions/trans-actions.ts","components/categorizer/categorize-cash.tsx","components/categorizer/categorize-online.tsx","components/categorizer/index.tsx","workspaces/categorizer.tsx","workspaces/new-bills/expense-types.ts","services/ocr/parser-utils.ts","workspaces/new-bills/bill-utils.ts","services/googleapis/gemini/index.ts","workspaces/new-bills/bill-grid.tsx","workspaces/new-bills/expense.tsx","workspaces/new-bills/folder-grid.tsx","services/sheet/index.ts","workspaces/new-bills/index.tsx","components/file-upload/index.tsx","services/xlsjs/index.ts","components/file-preview/index.tsx","components/file-save/index.tsx","components/online-transactions/index.tsx","workspaces/online.tsx","components/key-gen/index.tsx","workspaces/key/index.tsx","app-routes.tsx","app.tsx","index.tsx"],"names":["TransActions","initValues","loading","cashTransData","undefined","onlineTransData","monthlyCatSplit","error","transReducder","state","arguments","length","action","type","LOAD_TRANS","LOAD_CASH_TRANS_SUCCESS","payload","LOAD_ONLINE_TRANS_SUCCESS","LOAD_CASH_TRANS_FAILURE","LOAD_ONLINE_TRANS_FAILURE","UPDATE_MONTHLY_SPLIT","RESET_MONTHLY_SPLIT","UPDATE_MONTHLY_MAINT_SPLIT","monthlyMaintSplit","RESET_MONTHLY_MAINT_SPLIT","RESET_TRANS","setCredentials","secret","out","res","emailB","CryptoJS","AES","decrypt","appConfig","ENC_CLIENT_EMAIL","pkB","ENC_PRIVATE_KEY","chatGPTPK","ENC_CHAT_GPT_KEY","googleAPIKey","ENC_GOOGLE_API_KEY","geminiKey","ENC_GEMINI_KEY","clientEmail","toString","enc","Utf8","privateKey","chatGPTPrivateKey","sessionStorage","setItem","e","flatNumbers","appData","transCategories","key","label","children","map","val","concat","transactionFinYear","moment","format","transSheetMonth","transactions","getItem","SPREADSHEET_ID","doc","GoogleSpreadsheet","getConfig","AppContext","React","createContext","SHEET_ACTION_TYPES","initialValue","initError","sheetConfig","sheetInfo","Map","sheetReducer","INIT","initializing","INIT_SUCCESS","INIT_FAILURE","SET_SHEET_INFO","BillsActions","isLoading","data","config","encBotId","listURL","fetchURL","downloadURL","updateURL","layoutData","events","billsReducer","SUCCESS","FAILURE","SET_CONFIG","ADD_EVENTS","rootReducer","combineReducers","sheet","trans","bills","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thunk","SecretDialog","props","open","setOpen","useState","setSecret","handleOk","useCallback","handleSecret","handleChange","target","value","handleEnter","keyCode","which","_jsxs","Dialog","keepMounted","_jsx","DialogTitle","id","DialogContent","DialogContentText","Input","onChange","onKeyPress","className","errorMsg","DialogActions","Button","onClick","disabled","color","generateTokenAssertion","async","expiresIn","Math","floor","Date","now","clientId","claims","iss","sub","aud","scope","exp","iat","jti","uuid","jwt","sign","algorithm","generateAuthToken","body","grant_type","client_id","assertion","response","axios","post","status","access_token","Error","VERIFIED_FILE_PREFIX","BILLS_FOLDER_ID","fetchFilesFromFolder","folderId","apiKey","query","encodeURI","get","files","console","log","message","renameFile","fileId","name","authToken","patch","headers","Authorization","getDatafromDataURI","blob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","dataURItoBlob","file","File","formData","FormData","append","apikey","getData","ChatGPTService","constructor","openAI","this","chatGPTConfig","Configuration","organization","OpenAIApi","getCompleted","text","createCompletion","model","prompt","max_tokens","temperature","top_p","n","stream","logprobs","stop","Promise","resolve","getInstance","instance","CashTransactions","camera","useRef","image","setImage","fullscreen","setFullscreen","takePhoto","cameraRef","current","toggleFullScreen","parentClassName","imageData","setImageData","useEffect","then","ParsedText","ParsedResults","parsedData","JSON","stringify","IconButton","CloseFullscreenIcon","OpenInFullIcon","src","alt","Cash","CAT_INDEX","BWSSB","Diesel","Bescom","Security","MONTH_INDEX","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","gsheetInstance","GsheetUtilImpl","currentSheet","initialized","init","reject","useServiceAccountAuth","client_email","private_key","loadInfo","catch","getSpreadSheet","getSheetByTitleAsJson","sheetTitle","sheetObj","getSheetByTitle","headerValues","colCount","columnCount","j","getCell","push","rowCount","allValues","head","formattedValue","some","_this$appConfig$doc","sheetsByTitle","sheetId","loadCells","getSheet","sheetsById","appendSheet","row","addRow","appendRows","rows","addRows","getSheetRow","getRows","limit","offset","getRow","getColumn","col","result","len","getColumnWithSheet","getSheetColumn","getSheetCell","column","saveSheetCells","cells","saveCells","addSheet","input","saveSheetWithJSON","json","updateSheet","updateCategorySheet","Object","keys","forEach","month","monthData","categories","mIndex","replace","colIndex","monthIndex","cat","rowIndex","catIndex","saveUpdatedCells","udpateMaintenanceSheet","flats","maintIndex","maintenenceMonthIndex","flat","searchUpdateRecord","sheetName","searchColumns","updateColumnName","updateValue","recordIndex","findIndex","entries","every","_ref","columnName","recordToUpdate","save","isEmptySheet","startingRow","cell","newVal","updateSheetWithJSON","initSheet","initSuccess","initFailure","LogicalOpr","LogicalExecutor","inpQuery","run","execute","opr","or","child","nor","xor","nand","not","and","checkSoundexInText","keyword","word","soundex","checkSoundexInArray","words","QueryExecutor","fieldVal","queryVal","Array","isArray","item","qval","toLowerCase","_fieldVal$match","reg","RegExp","match","_fieldVal$match2","ColQueryExecutor","transaction","qExecutor","TransMapExecutor","catMapJson","catFieldMap","cashTransactions","ctrans","Category","category","find","colQuery","Credit","Description","Debit","MaintMapExecutor","Flat","TransCategory","loadTransactions","loadCashTransactionSuccess","loadOnlineTransactionSuccess","loadCashTransactionFailure","loadOnlineTransactionFailure","updateMonthlySplit","updateMonthlyMaintenanceSplit","filterTransactions","filter","trim","doMonthlyCatSplit","monthlySplit","dispatch","datum","date","_datum$Debit","isDebit","amount","parseFloat","catWithAmount","splitCat","replacedDate","updateMonthlyCat","CategorizeCash","useSelector","useDispatch","gsheetUtil","maintMapJson","fetchTransactions","sheetData","useMemo","_Fragment","CircularProgress","Table","TableHead","TableRow","TableCell","header","TableBody","index","CategorizeOnline","fetchOnlineTransactions","Categorizer","setMessage","setType","transData","initializeGoogleSheet","splitMonthly","splitMonthlyMaintenance","filteredTransData","saveCategorized","saveMaitenenceSplit","activeStep","setActiveStep","steps","isStepOptional","isCompletedStep","handleBack","handleSkip","handleNext","Alert","severity","Stepper","stepProps","labelProps","optional","Typography","variant","completed","Step","StepLabel","JsonView","style","defaultStyles","Categorize","TransType","parseExpenseInfo","expenseTypes","values","description","dates","amounts","test","texts","rankMap","rank","includes","set","sortedTexts","from","sort","a","b","findTopMatchingText","fetchFiles","setFilesList","saveOnlineTransactionWithBill","debit","billURL","searchUpdateOnlineTransWithBills","getDriveFileURL","saveCashTransSheet","title","parse","getDataInSheetFormat","selectedBill","_data$date","_data$description","_data$amount","Total","Bill","setCategory","longDescription","extractBillData","fileName","bill","parsedFormData","getVisionRetry","_response$data","_response$data$Parsed","_parsedData$cashOrC","parsedText","API_KEY","GoogleGenerativeAI","getGenerativeModel","safetySettings","HarmCategory","HARM_CATEGORY_HARASSMENT","threshold","HarmBlockThreshold","BLOCK_MEDIUM_AND_ABOVE","HARM_CATEGORY_HATE_SPEECH","HARM_CATEGORY_SEXUALLY_EXPLICIT","HARM_CATEGORY_DANGEROUS_CONTENT","chat","startChat","generationConfig","topK","topP","maxOutputTokens","sendMessage","parsedString","extractData","transactionType","Online","url","RETRY_COUNT","imageURL","axiosRetry","retries","timeout","getVision","resp","BillGrid","handleClick","Grid","container","spacing","xs","mimeType","startsWith","width","height","cursor","padding","textAlign","ExpenseForm","callback","handleClose","expenseCategories","setData","errorData","setErrorData","event","prev","handleSubmit","formDataClone","onClose","fullWidth","scroll","maxWidth","FormControl","margin","RadioGroup","FormControlLabel","control","Radio","FormHelperText","TextField","placeholder","helperText","InputLabel","Select","MenuItem","FolderGrid","folders","sortedFolders","arr","monthMap","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","JAN","FEB","MAR","toUpperCase","customSortByMonth","folder","TransSheet","initProm","sheetIntialized","sheets","has","getExpenseCategories","expList","filteredExpList","expense","parseMonthlySheet","toDate","Desc","ChqNo","Amount","Balance","Type","getMonthData","monthSheet","pushSheetData","transCompare","fileData","mergeSheetData","sData","sheetTrans","setMonthData","fetchedData","NewBills","showLoader","setShowLoader","fileList","openDialog","setOpenDialog","setSelectedBill","selectedFolder","setSelectedFolder","setFormData","handleFolderClick","fileInfo","finalData","setExpenseCategories","transSheet","expCat","size","FileUpload","setErrorMsg","onUpload","fileObject","onError","errMsg","FilePicker","extensions","XLS_TRANS_KEY_PREFIX","xLSTransKeys","fileParserUtil","parseXLS","reader","FileReader","onload","workBook","XLSX","read","worksheet","Sheets","SheetNames","utils","sheet_to_json","parseTransactions","readAsBinaryString","parseAmount","replaceAll","getWorkingColumnKeyFromArray","cols","dateKey","balanceKey","descKey","chqNoKey","FilePreview","xlsData","months","monthList","monthsArray","selMonth","setSelMonth","useContext","filteredRows","TableContainer","component","Paper","stickyHeader","align","FileSave","msg","setMsg","saveSheet","OnlineTransactionParser","setFileName","bankTransactions","setBankTransactions","reverse","getStepContent","step","skipped","setSkipped","Set","isStepSkipped","newSkipped","delete","prevActiveStep","handleReset","OnlineTransactions","EncryptKeyComponent","setKey","encryptedValue","setEncryptedValue","decryptedValue","setDecryptedValue","copyMessage","setCopyMessage","newKey","eKey","encrypt","ekey","handleCopy","navigator","clipboard","writeText","setTimeout","decryptLabel","CheckCircleRoundedIcon","Container","gutterBottom","Box","marginTop","InputProps","readOnly","Key","KeyGen","AppRoutes","Routes","Route","path","element","BillParser","App","secretSuccess","setSecretSuccess","collapsed","setCollapsed","Provider","BrowserRouter","Sidebar","Menu","icon","HomeIcon","Link","to","CategoryIcon","ReceiptIcon","CurrencyRupeeIcon","HandymanIcon","KeyboardDoubleArrowLeftIcon","KeyboardDoubleArrowRightIcon","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c92800a5.chunk.js","sourcesContent":["import { FlatCategory } from '../../../utils/flat-category';\r\nimport { TransCategory } from '../../../utils/trans-category';\r\n\r\nexport enum TransActions {\r\n    LOAD_TRANS = 'LOAD_TRANS',\r\n    LOAD_CASH_TRANS_SUCCESS = 'LOAD_CASH_TRANS_SUCCESS',\r\n    LOAD_ONLINE_TRANS_SUCCESS = 'LOAD_ONLINE_TRANS_SUCCESS',\r\n    LOAD_CASH_TRANS_FAILURE = 'LOAD_CASH_TRANS_FAILURE',\r\n    LOAD_ONLINE_TRANS_FAILURE = 'LOAD_ONLINE_TRANS_FAILURE',\r\n    UPDATE_MONTHLY_SPLIT = 'UPDATE_MONTHLY_SPLIT',\r\n    RESET_MONTHLY_SPLIT = 'RESET_MONTHLY_SPLIT',\r\n    UPDATE_MONTHLY_MAINT_SPLIT = 'UPDATE_MONTHLY_MAINT_SPLIT',\r\n    RESET_MONTHLY_MAINT_SPLIT = 'RESET_MONTHLY_MAINT_SPLIT',\r\n    RESET_TRANS = 'RESET_TRANS',\r\n}\r\nexport type MonthlyCatSplit = {\r\n    [month: string]: {\r\n        [category: string]: number;\r\n    };\r\n};\r\n\r\nexport type MonthlyMaintSplit = {\r\n    [month: string]: {\r\n        [category: string]: number;\r\n    };\r\n};\r\nexport type TransData = {\r\n    loading: boolean;\r\n    cashTransData?: { [type: string]: any }[];\r\n    onlineTransData?: { [type: string]: any }[];\r\n    monthlyCatSplit?: MonthlyCatSplit;\r\n    monthlyMaintSplit?: MonthlyMaintSplit;\r\n    error: string;\r\n}\r\n\r\nexport type TransactionType = {\r\n    Date: string | null;\r\n    Description: string;\r\n    'Cheque No'?: string | null;\r\n    Debit: number | null;\r\n    Credit: number | null;\r\n    Total: number;\r\n    Category?: TransCategory;\r\n    Flat?: FlatCategory;\r\n    Bill?: string;\r\n};\r\n","import { TransData, TransActions } from './trans-types';\r\n\r\nconst initValues: TransData = {\r\n    loading: false,\r\n    cashTransData: undefined,\r\n    onlineTransData: undefined,\r\n    monthlyCatSplit: undefined,\r\n    error: '',\r\n};\r\n\r\nconst transReducder = (state = initValues, action: { type: TransActions, payload: any}) => {\r\n    switch (action.type) {\r\n    case TransActions.LOAD_TRANS:\r\n        return {\r\n            ...state,\r\n            loading: true,\r\n        };\r\n    case TransActions.LOAD_CASH_TRANS_SUCCESS:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            cashTransData: action.payload as any,\r\n            error: '',\r\n        };\r\n    case TransActions.LOAD_ONLINE_TRANS_SUCCESS:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            onlineTransData: action.payload as any,\r\n            error: '',\r\n        };\r\n    case TransActions.LOAD_CASH_TRANS_FAILURE:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            cashTransData: undefined,\r\n            error: action.payload as any,\r\n        };\r\n    case TransActions.LOAD_ONLINE_TRANS_FAILURE:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            onlineTransData: undefined,\r\n            error: action.payload as any,\r\n        };\r\n    case TransActions.UPDATE_MONTHLY_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyCatSplit: action.payload,\r\n            loading: false,\r\n        };\r\n    case TransActions.RESET_MONTHLY_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyCatSplit: undefined,\r\n        };\r\n    case TransActions.UPDATE_MONTHLY_MAINT_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyMaintSplit: action.payload,\r\n            loading: false,\r\n        };\r\n    case TransActions.RESET_MONTHLY_MAINT_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyMaintSplit: undefined,\r\n        };\r\n    case TransActions.RESET_TRANS:\r\n        return initValues;\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default transReducder;\r\n","/* eslint-disable max-len */\r\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\r\nimport React from 'react';\r\nimport CryptoJS from 'crypto-js';\r\nimport moment from 'moment';\r\nimport { ApplicationConfig, AppData, CatItem } from './service-types';\r\n\r\nexport const setCredentials = (secret: string = '') => {\r\n    const out = {\r\n        res: false,\r\n        error: '',\r\n    };\r\n    if (secret) {\r\n        const emailB = CryptoJS.AES.decrypt(appConfig.ENC_CLIENT_EMAIL, secret);\r\n        const pkB = CryptoJS.AES.decrypt(appConfig.ENC_PRIVATE_KEY, secret);\r\n        const chatGPTPK = CryptoJS.AES.decrypt(appConfig.ENC_CHAT_GPT_KEY, secret);\r\n        const googleAPIKey = CryptoJS.AES.decrypt(appConfig.ENC_GOOGLE_API_KEY, secret);\r\n        const geminiKey = CryptoJS.AES.decrypt(appConfig.ENC_GEMINI_KEY, secret);\r\n        try {\r\n            appConfig.clientEmail = emailB.toString(CryptoJS.enc.Utf8);\r\n            appConfig.privateKey = pkB.toString(CryptoJS.enc.Utf8);\r\n            appConfig.googleAPIKey = googleAPIKey.toString(CryptoJS.enc.Utf8);\r\n            appConfig.secret = secret;\r\n            appConfig.chatGPTPrivateKey = chatGPTPK.toString(CryptoJS.enc.Utf8);\r\n            appConfig.geminiKey = geminiKey.toString(CryptoJS.enc.Utf8);\r\n            sessionStorage.setItem('session-id', secret);\r\n            out.res = true;\r\n        } catch (e) {\r\n            appConfig.secret = '';\r\n            out.res = false;\r\n            out.error = 'Invalid Secret Provided';\r\n        }\r\n    } else {\r\n        appConfig.secret = '';\r\n        out.res = false;\r\n        out.error = 'Empty Secret Set';\r\n    }\r\n    return out;\r\n};\r\n\r\nexport const encrypt = (key: string, secret?: string) => {\r\n    const encrypted = CryptoJS.AES.encrypt(key, secret ?? appConfig.secret).toString();\r\n    return encrypted;\r\n};\r\n\r\nexport const decrypt = (ekey: string, secret?: string) => {\r\n    const decrypted = CryptoJS.AES.decrypt(ekey, secret ?? appConfig.secret);\r\n    return decrypted.toString(CryptoJS.enc.Utf8);\r\n};\r\n\r\nconst flatNumbers = [\r\n    '001', '002', '003', '004', '005', '007', '008', '009', '010', '011', '012',\r\n    '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112',\r\n    '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212',\r\n    '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312',\r\n    '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412',\r\n];\r\n\r\nconst transCategories: CatItem[] = [\r\n    {\r\n        key: 'maintenance',\r\n        label: 'Maintenance',\r\n        children: flatNumbers.map((val) => ({\r\n            key: `maintenance-${val}`,\r\n            label: val,\r\n        })),\r\n    },\r\n    {\r\n        key: 'corpus',\r\n        label: 'Corpus Fund',\r\n        children: flatNumbers.map((val) => ({\r\n            key: `corpus-${val}`,\r\n            label: val,\r\n        })),\r\n    },\r\n    {\r\n        key: 'monthly',\r\n        label: 'Monthly Expenses',\r\n        children: [],\r\n    },\r\n    {\r\n        key: 'others',\r\n        label: 'Others',\r\n        children: [\r\n            {\r\n                key: 'fine',\r\n                label: 'Fine',\r\n            },\r\n            {\r\n                key: 'extra',\r\n                label: 'Other Income',\r\n            },\r\n            {\r\n                key: 'account-transfer',\r\n                label: 'FD Deposit',\r\n            },\r\n            {\r\n                key: 'tenant-deposit',\r\n                label: 'Tenant Deposit',\r\n            },\r\n            {\r\n                key: 'rd-deposit',\r\n                label: 'Deposit to RD account',\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst appData: AppData = {\r\n    transCategories,\r\n    transactionFinYear: moment().format('YY'),\r\n    transSheetMonth: '',\r\n    transactions: [],\r\n};\r\n\r\nexport const setSheetMonth = (sheetTitle: string) => {\r\n    appData.transSheetMonth = sheetTitle;\r\n};\r\n\r\nconst appConfig: ApplicationConfig = {\r\n    secret: sessionStorage.getItem('session-id') || '',\r\n    SPREADSHEET_ID: '16Q4fGH3MHV4yFZn-Ws0tDpz57hXLjOE_wDSXilJCDZ0',\r\n    ENC_CLIENT_EMAIL: 'U2FsdGVkX19lrOkAqkI1YRZkdHSjXZc+dtJNUzOhSlqaydB6Gxi4lm9MpS7+2/W7OtInfOCmh739buu1z1jzT/jJrAeRX2+hKkxc+3qsduw=',\r\n    ENC_PRIVATE_KEY: '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',\r\n    ENC_GOOGLE_API_KEY: 'U2FsdGVkX1+z10t9/VGkdh+xgB9JO7TwDIGpiW5ivAoQrmKV9c77947cJH49fTgzZcc5DSaLNH1jlCpIiLbSuw==',\r\n    ENC_CHAT_GPT_KEY: 'U2FsdGVkX19CE/c8Tng+qxPTykma92uBwnVA8hVNUPhl5desREv8awMfLxjN2ZnKC23rEB6XcYTSzVfgEwgEqQPZuhXq3Ef0cng56m8DqyI=',\r\n    ENC_GEMINI_KEY: 'U2FsdGVkX1+ja6BvyIZ4xRS/wHKtCFsD22qQ0wfw/U30gL6c2FfqhrQyqt25ch1C77vdq1A7rlLZ0RKBXXjmaQ==',\r\n    doc: new GoogleSpreadsheet('16Q4fGH3MHV4yFZn-Ws0tDpz57hXLjOE_wDSXilJCDZ0'),\r\n    appData,\r\n};\r\n\r\nexport const getConfig = () => appConfig;\r\n\r\nif (appConfig.secret) {\r\n    setCredentials(appConfig.secret);\r\n}\r\nconst AppContext = React.createContext(appConfig);\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum TransactionFilters {\r\n    all = 'All Transaction',\r\n    mapped = 'Only Mapped',\r\n    unmapped = 'Only Unmapped',\r\n}\r\n\r\nexport default AppContext;\r\n","import { ApplicationConfig } from '../../service-types';\r\n\r\nenum SHEET_ACTION_TYPES {\r\n    INIT = 'INIT',\r\n    INIT_SUCCESS = 'GET_SHEET_INFO',\r\n    INIT_FAILURE = 'GET_SHEET_INFO_FAILURE',\r\n    SET_SHEET_INFO = 'SET_SHEET_INFO',\r\n}\r\n\r\nexport type SheetInfo = Map<string, { [key: string]: any }[]>;\r\n\r\nexport type GoogleSheet = {\r\n    initializing?: boolean;\r\n    initError: string;\r\n    sheetConfig: ApplicationConfig;\r\n    sheetInfo: SheetInfo;\r\n};\r\n\r\nexport default SHEET_ACTION_TYPES;\r\n","import { getConfig } from '../..';\r\nimport SHEET_ACTION_TYPES, { GoogleSheet } from './sheet-types';\r\n\r\nconst initialValue: GoogleSheet = {\r\n    initError: '',\r\n    sheetConfig: getConfig(),\r\n    sheetInfo: new Map(),\r\n};\r\nconst sheetReducer = (state: GoogleSheet = initialValue, action: { type: SHEET_ACTION_TYPES, payload: any}) => {\r\n    switch (action.type) {\r\n    case SHEET_ACTION_TYPES.INIT:\r\n        return {\r\n            ...state,\r\n            initializing: true,\r\n        };\r\n    case SHEET_ACTION_TYPES.INIT_SUCCESS:\r\n        return {\r\n            ...state,\r\n            initializing: false,\r\n            appConfig: action.payload,\r\n        };\r\n    case SHEET_ACTION_TYPES.INIT_FAILURE:\r\n        return {\r\n            ...state,\r\n            initializing: false,\r\n            initError: action.payload,\r\n        };\r\n    case SHEET_ACTION_TYPES.SET_SHEET_INFO:\r\n        return {\r\n            ...state,\r\n            sheetInfo: action.payload,\r\n        };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default sheetReducer;\r\n","import { LayoutType } from '../../../lib/layout/layout-types';\r\n\r\nexport enum BillsActions {\r\n    INIT = 'INIT',\r\n    SUCCESS = 'SUCCESS',\r\n    FAILURE = 'FAILURE',\r\n    SET_CONFIG = 'SET_CONFIG',\r\n    ADD_EVENTS = 'ADD_EVENTS',\r\n}\r\n\r\nexport type BillsConfig = {\r\n    encBotId: string;\r\n    listURL: string;\r\n    fetchURL: string;\r\n    downloadURL: string;\r\n    updateURL: string;\r\n};\r\n\r\nexport type BillEventType = 'wizard:next' | 'wizard:back' | 'field:blur';\r\n\r\nexport type BillEvent = {\r\n    id: string;\r\n    type: BillEventType;\r\n    layout: LayoutType;\r\n    state?: 'pending' | 'processing' | 'processed',\r\n    payload?: any;\r\n}\r\nexport type BillsData = {\r\n    isLoading: boolean;\r\n    data: any;\r\n    config: BillsConfig;\r\n    layoutData?: LayoutType;\r\n    error?: any;\r\n    events: BillEvent[];\r\n};\r\n","/* eslint-disable max-len */\r\nimport { BillsData, BillsActions } from './bills-types';\r\n\r\nconst initValues: BillsData = {\r\n    isLoading: false,\r\n    data: {},\r\n    config: {\r\n        encBotId: 'U2FsdGVkX1/0gDV/ibea6VfAgozs8tNyWPB0zt3iRLDsNORNjxOhmloQXZl7ywLjxeQl4Bmxe3iZ7RLdUxi+BA==',\r\n        listURL: 'https://state-tourniquet.000webhostapp.com/suraksha/telegram/get.php',\r\n        fetchURL: 'https://api.telegram.org/bot{{botId}}/getFile?file_id={{fileId}}',\r\n        downloadURL: 'https://api.telegram.org/file/bot{{botId}}/photos/{{filePath}}',\r\n        updateURL: 'https://state-tourniquet.000webhostapp.com/suraksha/telegram/processed.php?id={{recordId}}',\r\n    },\r\n    layoutData: undefined,\r\n    events: [],\r\n};\r\n\r\nconst billsReducer = (state = initValues, action: { type: BillsActions, payload: any}): BillsData => {\r\n    switch (action.type) {\r\n    case BillsActions.INIT:\r\n        return {\r\n            ...state,\r\n            isLoading: true,\r\n            layoutData: action.payload,\r\n        };\r\n    case BillsActions.SUCCESS:\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            data: action.payload,\r\n            error: undefined,\r\n        };\r\n    case BillsActions.FAILURE:\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            data: undefined,\r\n            error: action.payload,\r\n        };\r\n    case BillsActions.SET_CONFIG:\r\n        return {\r\n            ...state,\r\n            config: action.payload,\r\n        };\r\n    case BillsActions.ADD_EVENTS:\r\n        return {\r\n            ...state,\r\n            events: [...state.events, action.payload],\r\n        };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default billsReducer;\r\n","import { combineReducers } from 'redux';\r\nimport transReducder from './transactions/trans-reducer';\r\nimport sheetReducer from './google-sheet/sheet-reducer';\r\nimport billsReducer from './bills/bills-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    sheet: sheetReducer,\r\n    trans: transReducder,\r\n    bills: billsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport Thunk from 'redux-thunk';\r\nimport rootReducer from './root-reducer';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(Thunk)));\r\n\r\nexport default store;\r\n","import React, { useCallback } from 'react';\r\nimport {\r\n    Dialog, DialogTitle, DialogContent, DialogContentText, Input, DialogActions, Button,\r\n} from '@mui/material';\r\n\r\nexport type SecretDialogProps = {\r\n    errorMsg?: string;\r\n    handleSecret: (secret: string) => void;\r\n}\r\nexport default function SecretDialog(props: SecretDialogProps) {\r\n    const [open, setOpen] = React.useState(true);\r\n    const [secret, setSecret] = React.useState('');\r\n    const handleOk = useCallback(() => {\r\n        // setOpen(false);\r\n        props.handleSecret(secret);\r\n    }, [props, secret]);\r\n    const handleChange = useCallback((e: any) => {\r\n        setSecret(e.target.value);\r\n    }, []);\r\n    const handleEnter = useCallback((e: any) => {\r\n        const ENTER_KEYCODE = 13;\r\n        const keyCode = e.keyCode ? e.keyCode : e.which;\r\n        if (keyCode === ENTER_KEYCODE) {\r\n            props.handleSecret(secret);\r\n        }\r\n    }, [props, secret]);\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            keepMounted\r\n            aria-labelledby=\"Secret Key\"\r\n            aria-describedby=\"Enter your secret key\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">Enter the secret key!!!</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    Check with other committee members, if secret key is not known.\r\n                </DialogContentText>\r\n                <Input type=\"password\" value={secret} onChange={handleChange} onKeyPress={handleEnter} />\r\n                <div className=\"error\">{props.errorMsg}</div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleOk} disabled={!secret} color=\"primary\">\r\n                    OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nimport jwt from 'jsonwebtoken';\r\nimport { uuid } from 'uuidv4';\r\nimport { getConfig } from '..';\r\n\r\nexport const generateTokenAssertion = async (expiresIn = Math.floor(Date.now() / 1000 + 3600)) => {\r\n    const email = '';\r\n    const { clientEmail: clientId, privateKey } = getConfig();\r\n    const claims = {\r\n        iss: clientId,\r\n        sub: email,\r\n        aud: 'https://www.googleapis.com/oauth2/v4/token',\r\n        scope: 'https://www.googleapis.com/auth/drive',\r\n        exp: expiresIn,\r\n        iat: Math.floor(Date.now() / 1000),\r\n        jti: uuid(),\r\n    };\r\n\r\n    const token = jwt.sign(claims, privateKey || '', {\r\n        algorithm: 'RS256',\r\n    });\r\n\r\n    return token;\r\n};\r\nexport const generateAuthToken = async () => {\r\n    const { clientEmail: clientId } = getConfig();\r\n    const tokenAssertion = await generateTokenAssertion();\r\n    const url = 'https://www.googleapis.com/oauth2/v4/token';\r\n    const body = {\r\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n        client_id: clientId,\r\n        assertion: tokenAssertion,\r\n    };\r\n\r\n    const response = await axios.post(url, body);\r\n\r\n    if (response.status === 200) {\r\n        return response.data.access_token;\r\n    }\r\n    throw new Error(response.data);\r\n};\r\n\r\nexport default { generateToken: generateAuthToken, generateTokenAssertion };\r\n","import axios from 'axios';\r\nimport { getConfig } from '..';\r\nimport { generateAuthToken } from './google-token';\r\n\r\nexport const VERIFIED_FILE_PREFIX = 'VERIFIED_';\r\n\r\nconst BILLS_FOLDER_ID = '1zVRwXWZjfAS3Hk1rXq-XtqurPcQ-yAW-'; // bills directory\r\n\r\nexport async function fetchFilesFromFolder(folderId: string): Promise<any[]> {\r\n    const { googleAPIKey: apiKey } = getConfig();\r\n    const folderIdFinal = folderId || BILLS_FOLDER_ID;\r\n    // eslint-disable-next-line max-len\r\n    const query = encodeURI(`'${folderIdFinal}' in parents and (mimeType = 'image/jpeg' or mimeType = 'image/png' or mimeType = 'application/pdf' or mimeType = 'application/vnd.google-apps.folder')`);\r\n    try {\r\n        const response = await axios.get(\r\n            `https://www.googleapis.com/drive/v3/files?q=${query}&key=${apiKey}`,\r\n        );\r\n\r\n        const { files } = response.data;\r\n        console.log('Fetched files:', files);\r\n        return files;\r\n    } catch (error: any) {\r\n        console.error('Error fetching files:', error?.message || error);\r\n    }\r\n    return [];\r\n}\r\n\r\nexport async function copyFileAsDoc(fileId: string): Promise<any> {\r\n    const { googleAPIKey: apiKey } = getConfig();\r\n    try {\r\n        const response = await axios.post(\r\n            `https://www.googleapis.com/drive/v3/files/${fileId}/copy?key=${apiKey}`,\r\n            {\r\n                convert: true,\r\n                ocr: true,\r\n            },\r\n        );\r\n        console.log('Copied File:', response);\r\n        return response;\r\n    } catch (error: any) {\r\n        console.error('Error fetching files:', error?.message || error);\r\n    }\r\n    return {};\r\n}\r\n\r\nexport const moveFile = async (fileId: string, toDirectoryId: string) => {\r\n    try {\r\n        const authToken = await generateAuthToken();\r\n        const response = await axios.patch(\r\n            `https://www.googleapis.com/drive/v3/files/${fileId}`,\r\n            {\r\n                parents: toDirectoryId,\r\n            },\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            },\r\n        );\r\n\r\n        console.log('File moved successfully:', response.data);\r\n        if (response.status === 200) {\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error occurred while moving the file:', error);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const renameFile = async (fileId: string, name: string) => {\r\n    try {\r\n        const authToken = await generateAuthToken();\r\n        const response = await axios.patch(\r\n            `https://www.googleapis.com/drive/v3/files/${fileId}`,\r\n            {\r\n                name: `${VERIFIED_FILE_PREFIX}${name}`,\r\n            },\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            },\r\n        );\r\n\r\n        console.log('File moved successfully:', response.data);\r\n        if (response.status === 200) {\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error occurred while moving the file:', error);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default { fetchFilesFromFolder, moveFile };\r\n","/* eslint-disable max-len */\r\nimport axios from 'axios';\r\nimport axiosRetry from 'axios-retry';\r\nimport { copyFileAsDoc } from '../googleapis/drive-util';\r\n\r\nconst getData = (file: File) => {\r\n    const formData = new FormData();\r\n    formData.append('base64Image', file);\r\n    formData.append('isTable', 'true');\r\n    formData.append('OCREngine', '2');\r\n    axios\r\n        .post('https://api.ocr.space/parse/image', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                apikey: 'K84187439488957',\r\n            },\r\n        })\r\n        .then((response) => {\r\n            console.log(response.data);\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n};\r\nexport const getDriveVision = (fileId: string) => {\r\n    copyFileAsDoc(fileId);\r\n};\r\n\r\nexport const getVision = (imageURL: string) => {\r\n    const formData = new FormData();\r\n    formData.append('url', imageURL);\r\n    formData.append('language', 'eng');\r\n    // formData.append('isOverlayRequired', 'true');\r\n    // formData.append('fileType', 'JPG');\r\n    formData.append('isTable', 'true');\r\n    formData.append('OCREngine', '2');\r\n    formData.append('filetype', 'PDF');\r\n    axiosRetry(axios, { retries: 3 });\r\n    return axios\r\n        .post('https://api.ocr.space/parse/image', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                apikey: 'K84187439488957',\r\n            },\r\n            timeout: 7500,\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n};\r\nfunction dataURItoBlob(dataURI: string) {\r\n    // convert base64/URLEncoded data component to raw binary data held in a string\r\n    let byteString;\r\n    if (dataURI.split(',')[0].indexOf('base64') >= 0) {\r\n        byteString = atob(dataURI.split(',')[1]);\r\n    } else {\r\n        byteString = unescape(dataURI.split(',')[1]);\r\n    }\r\n    // separate out the mime component\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n\r\n    // write the bytes of the string to a typed array\r\n    const ia = new Uint8Array(byteString.length);\r\n    for (let i = 0; i < byteString.length; i += 1) {\r\n        ia[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    return new Blob([ia], { type: mimeString });\r\n}\r\nexport const getDatafromDataURI = async (dataURI: string) => {\r\n    const blob = dataURItoBlob(dataURI);\r\n    const file = new File([blob], 'canvasImage.jpg', { type: 'image/jpeg' });\r\n    const formData = new FormData();\r\n    formData.append('base64Image', file);\r\n    const response = await axios\r\n        .post('https://api.ocr.space/parse/image', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                apikey: 'K84187439488957',\r\n            },\r\n        });\r\n    return response;\r\n};\r\n\r\nexport default getData;\r\n","import { Configuration, OpenAIApi } from 'openai';\r\nimport { getConfig } from '..';\r\nimport { ApplicationConfig } from '../service-types';\r\n\r\nexport class ChatGPTService {\r\n    public chatGPTPrivateKey: string = '';\r\n    public openAI: OpenAIApi | undefined;\r\n    private appConfig: ApplicationConfig;\r\n\r\n    public constructor() {\r\n        this.appConfig = getConfig();\r\n        if (this.appConfig.chatGPTPrivateKey) {\r\n            this.chatGPTPrivateKey = this.appConfig.chatGPTPrivateKey;\r\n            const chatGPTConfig = new Configuration({\r\n                organization: 'org-wfOq673LgvxydlfXwY3Fmcvm',\r\n                apiKey: this.chatGPTPrivateKey,\r\n            });\r\n            this.openAI = new OpenAIApi(chatGPTConfig);\r\n        }\r\n    }\r\n\r\n    public async getCompleted(text: string) {\r\n        if (this.openAI) {\r\n            return this.openAI.createCompletion({\r\n                model: 'text-davinci-003',\r\n                prompt: 'Say this is a test',\r\n                max_tokens: 7,\r\n                temperature: 0,\r\n                top_p: 1,\r\n                n: 1,\r\n                stream: false,\r\n                logprobs: null,\r\n                stop: '\\n',\r\n            },\r\n            );\r\n        }\r\n        return Promise.resolve('');\r\n    }\r\n\r\n    static instance: ChatGPTService;\r\n\r\n    static getInstance() {\r\n        if (!ChatGPTService.instance) {\r\n            ChatGPTService.instance = new ChatGPTService();\r\n        }\r\n        return ChatGPTService.instance;\r\n    }\r\n}\r\n\r\nexport default ChatGPTService;\r\n","import { IconButton } from '@mui/material';\r\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\r\nimport CloseFullscreenIcon from '@mui/icons-material/CloseFullscreen';\r\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\r\nimport './cash-trans.css';\r\nimport { getDatafromDataURI } from '../../services/ocr';\r\nimport ChatGPTService from '../../services/chatgpt';\r\n\r\nfunction dataURItoBlob(dataURI: string) {\r\n    const binary = atob(dataURI.split(',')[1]);\r\n    const array = [];\r\n    for (let i = 0; i < binary.length; i += 1) {\r\n        array.push(binary.charCodeAt(i));\r\n    }\r\n    return new Blob([new Uint8Array(array)], { type: 'image/jpeg' });\r\n}\r\nfunction CashTransactions() {\r\n    const camera = useRef();\r\n    const [image, setImage] = useState<string>();\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const errorMessages = {};\r\n    const takePhoto = useCallback(() => {\r\n        const cameraRef: { takePhoto?: Function } = camera.current || {};\r\n        if (!image && cameraRef && cameraRef.takePhoto) {\r\n            setImage(cameraRef.takePhoto());\r\n            setFullscreen(false);\r\n        } else {\r\n            setImage(undefined);\r\n        }\r\n    }, [camera, image]);\r\n    const toggleFullScreen = useCallback(() => {\r\n        setFullscreen((status) => !status);\r\n    }, []);\r\n    const parentClassName = fullscreen ? 'cash-trans block-page' : 'cash-trans';\r\n    const [imageData, setImageData] = useState();\r\n    useEffect(() => {\r\n        if (image) {\r\n            getDatafromDataURI(image).then(async (response: any) => {\r\n                const { ParsedText } = response.data.ParsedResults[0] || {};\r\n                if (ParsedText) {\r\n                    const parsedData = await ChatGPTService.getInstance().getCompleted(ParsedText);\r\n                    setImageData(parsedData as any);\r\n                }\r\n            });\r\n        }\r\n    }, [image]);\r\n    return (\r\n        <div className={parentClassName}>\r\n            <div>Handle Cash Transactions</div>\r\n            <pre>{JSON.stringify(imageData, undefined, 4)}</pre>\r\n            {!image && (\r\n                <IconButton\r\n                    className=\"close-camera\"\r\n                    aria-label=\"Take Photo\"\r\n                    onClick={toggleFullScreen}\r\n                >\r\n                    {fullscreen ? <CloseFullscreenIcon /> : <OpenInFullIcon />}\r\n                </IconButton>\r\n            )}\r\n            {/* {!image && <Camera ref={camera} facingMode=\"environment\" errorMessages={errorMessages} />} */}\r\n            <IconButton\r\n                className=\"camera-click\"\r\n                aria-label=\"Take Photo\"\r\n                onClick={takePhoto}\r\n            >\r\n                <img src=\"/images/circular-camera.png\" alt=\"Take Pic\" />\r\n            </IconButton>\r\n            {/* {image && <img className=\"captured-image\" src={image} alt=\"Uploaded Bill\" />} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CashTransactions;\r\n","import React from 'react';\r\nimport CashTransactions from '../components/cash';\r\n\r\nconst Cash: React.FC = () => (\r\n    <CashTransactions />\r\n);\r\n\r\nexport default Cash;\r\n","const CAT_INDEX: { [month: string]: number } = {\r\n    'Audit Fees': 1,\r\n    BWSSB: 2,\r\n    Diesel: 3,\r\n    Bescom: 4,\r\n    'House Keeping Salary': 5,\r\n    Security: 6,\r\n    'Garden Maintenance': 7,\r\n    'Garbage Collection Vendor / BBMP': 8,\r\n    'Borewell And Motor Maintenance': 9,\r\n    'Annual Bonus': 10,\r\n    'Lift Maintenance': 11,\r\n    'HK Items Purchased': 12,\r\n    'Health Club Maintenance': 13,\r\n    'Electrical / Plumbing Repairs': 14,\r\n    'Apartment repairs related': 15,\r\n    'Apartment Safety': 16,\r\n    'CCTV / Intercomm': 17,\r\n    'Misc expenses': 18,\r\n    'Apartment developments': 19,\r\n    'Apartment Work By Security and Others': 20,\r\n    'Septic Tank Repairs / Cleaning': 21,\r\n    'Water Tanks Cleaning': 22,\r\n    'Generator Maintenance and Repair': 23,\r\n    'Savings Bank SMS Charges/Cheque book': 24,\r\n    'Festival/Holiday Celebration': 25,\r\n    'Drinking Water for Employees': 26,\r\n    'BAF Subscription Charges': 27,\r\n    'Maintenance Collection': 30,\r\n    'Income Tax Refund': 31,\r\n    'Other Income': 32,\r\n    'Interest on account': 33,\r\n    'Fine / Extra Payment Received': 34,\r\n    'Corpus Fund': 35,\r\n    'Tenant Deposit from the Owners': 36,\r\n    'FD Deposit': 37,\r\n    'Deposit to RD account': 38,\r\n};\r\n\r\nexport default CAT_INDEX;\r\n","const MONTH_INDEX: { [month: string]: number } = {\r\n    Apr: 2,\r\n    May: 3,\r\n    Jun: 4,\r\n    Jul: 5,\r\n    Aug: 6,\r\n    Sep: 7,\r\n    Oct: 8,\r\n    Nov: 9,\r\n    Dec: 10,\r\n    Jan: 11,\r\n    Feb: 12,\r\n    Mar: 13,\r\n};\r\n\r\nexport default MONTH_INDEX;\r\n","export default {\r\n    '001': 1,\r\n    '002': 2,\r\n    '003': 3,\r\n    '004': 4,\r\n    '005': 5,\r\n    '007': 6,\r\n    '008': 7,\r\n    '009': 8,\r\n    '010': 9,\r\n    '011': 10,\r\n    '012': 11,\r\n    101: 12,\r\n    102: 13,\r\n    103: 14,\r\n    104: 15,\r\n    105: 16,\r\n    106: 17,\r\n    107: 18,\r\n    108: 19,\r\n    109: 20,\r\n    110: 21,\r\n    111: 22,\r\n    112: 23,\r\n    201: 24,\r\n    202: 25,\r\n    203: 26,\r\n    204: 27,\r\n    205: 28,\r\n    206: 29,\r\n    207: 30,\r\n    208: 31,\r\n    209: 32,\r\n    210: 33,\r\n    211: 34,\r\n    212: 35,\r\n    301: 36,\r\n    302: 37,\r\n    303: 38,\r\n    304: 39,\r\n    305: 40,\r\n    306: 41,\r\n    307: 42,\r\n    308: 43,\r\n    309: 44,\r\n    310: 45,\r\n    311: 46,\r\n    312: 47,\r\n    401: 48,\r\n    402: 49,\r\n    403: 50,\r\n    404: 51,\r\n    405: 52,\r\n    406: 53,\r\n    407: 54,\r\n    408: 55,\r\n    409: 56,\r\n    410: 57,\r\n    411: 58,\r\n    412: 59,\r\n} as { [month: string]: number };\r\n","const MONTH_INDEX: { [month: string]: number } = {\r\n    Apr: 2,\r\n    May: 3,\r\n    Jun: 4,\r\n    Jul: 5,\r\n    Aug: 6,\r\n    Sep: 7,\r\n    Oct: 8,\r\n    Nov: 9,\r\n    Dec: 10,\r\n    Jan: 11,\r\n    Feb: 12,\r\n    Mar: 13,\r\n};\r\n\r\nexport default MONTH_INDEX;\r\n","import {\r\n    GoogleSpreadsheet,\r\n    GoogleSpreadsheetCell,\r\n    GoogleSpreadsheetRow,\r\n    GoogleSpreadsheetWorksheet,\r\n    WorksheetBasicProperties,\r\n} from 'google-spreadsheet';\r\nimport { getConfig } from '..';\r\nimport catIndex from '../cat-map/cat-index';\r\nimport monthIndex from '../cat-map/month-index';\r\nimport maintIndex from '../maint-map/flat-index';\r\nimport maintenenceMonthIndex from '../maint-map/month-index';\r\nimport { ApplicationConfig } from '../service-types';\r\n\r\n// Config variables\r\nexport interface GSheetUtil {\r\n    currentSheet?: string;\r\n    init: () => Promise<GoogleSpreadsheet>;\r\n    getSpreadSheet: () => GoogleSpreadsheet | undefined;\r\n    getSheetByTitle: (sheetTitle: string) => Promise<GoogleSpreadsheetWorksheet>;\r\n    getSheetByTitleAsJson: (sheetTitle: string) => Promise<{ [key: string]: any }[]>;\r\n    getSheet: (sheetId: string) => Promise<GoogleSpreadsheetWorksheet>;\r\n    appendSheet: (sheetId: string, row: { [key: string]: string | number }) => Promise<GoogleSpreadsheetRow>;\r\n    append: (row: { [key: string]: string | number }) => Promise<GoogleSpreadsheetRow>;\r\n    appendRows: (rows: { [key: string]: string | number }[]) => Promise<void>;\r\n    getSheetRow: (sheetId: string, row: number) => Promise<GoogleSpreadsheetRow[]>;\r\n    getRow: (row: number) => Promise<GoogleSpreadsheetRow[]>;\r\n    getColumn: (col: number) => GoogleSpreadsheetCell[];\r\n    getColumnWithSheet: (sheet: GoogleSpreadsheetWorksheet, col: number) => GoogleSpreadsheetCell[];\r\n    getSheetColumn: (sheetId: string, col: number) => GoogleSpreadsheetCell[];\r\n    getSheetCell: (sheetId: string, row: number, column: number) => GoogleSpreadsheetCell;\r\n    getCell: (row: number, column: number) => GoogleSpreadsheetCell;\r\n    saveSheetCells: (sheetId: string, cells: GoogleSpreadsheetCell[]) => Promise<void>;\r\n    saveSheetWithJSON: (json: { [key: string]: any }[]) => Promise<void>;\r\n    updateCategorySheet: (json: { [month: string]: { [cat: string]: any }}) => Promise<void>;\r\n    udpateMaintenanceSheet: (json: { [month: string]: { [flat: string]: any }}) => Promise<void>;\r\n    saveCells: (cells: GoogleSpreadsheetCell[]) => Promise<void>;\r\n    addSheet: (input: WorksheetBasicProperties) => Promise<GoogleSpreadsheetWorksheet>;\r\n    updateSheetWithJSON: (json: { [key: string]: any }[], sheetTitle?: string) => Promise<void>;\r\n    isEmptySheet: (sheet: GoogleSpreadsheetWorksheet) => boolean;\r\n    searchUpdateRecord: (\r\n        sheetName: string,\r\n        searchColumns: Record<string, any>,\r\n        updateColumnName: string,\r\n        updateValue: any) => Promise<void>;\r\n}\r\n\r\nlet gsheetInstance: GSheetUtil;\r\nclass GsheetUtilImpl implements GSheetUtil {\r\n    public currentSheet: string = '';\r\n    public initialized = false;\r\n    private appConfig: ApplicationConfig;\r\n\r\n    public constructor() {\r\n        this.appConfig = getConfig();\r\n    }\r\n\r\n    public init() {\r\n        if (this.initialized) {\r\n            return Promise.resolve(this.appConfig.doc);\r\n        }\r\n        return new Promise<GoogleSpreadsheet>((resolve, reject) => {\r\n            const { doc } = this.appConfig;\r\n            doc.useServiceAccountAuth({\r\n                client_email: this.appConfig.clientEmail || '',\r\n                private_key: this.appConfig.privateKey || '',\r\n            }).then(() => {\r\n                doc.loadInfo().then(() => {\r\n                    this.initialized = true;\r\n                    resolve(doc);\r\n                }).catch((e: any) => {\r\n                    console.log(e);\r\n                });\r\n            }).catch((e: any) => {\r\n                console.log(e);\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getSpreadSheet () {\r\n        return this.appConfig.doc;\r\n    }\r\n\r\n    public async getSheetByTitleAsJson(sheetTitle: string): Promise<{ [key: string]: any; }[]> {\r\n        const sheetInfo: any[] = [];\r\n        const sheetObj = await this.getSheetByTitle(sheetTitle);\r\n        let headers: string[] = sheetObj.headerValues;\r\n        let colCount = sheetObj.columnCount;\r\n        if (!headers || headers.length === 0) {\r\n            headers = [];\r\n            for (let j = 0; j < colCount; j += 1) {\r\n                const { value } = sheetObj.getCell(0, j);\r\n                if (value) {\r\n                    headers.push(sheetObj.getCell(0, j).value.toString());\r\n                }\r\n            }\r\n        }\r\n        colCount = headers.length;\r\n        const { rowCount } = sheetObj;\r\n        for (let i = 1; i < rowCount; i += 1) {\r\n            const sheet: any = {};\r\n            const allValues: any[] = [];\r\n            for (let j = 0; j < colCount; j += 1) {\r\n                const head = headers[j];\r\n                const val = sheetObj.getCell(i, j).formattedValue;\r\n                sheet[head] = val;\r\n                allValues.push(val);\r\n            }\r\n            if (allValues.some((val) => val !== null)) {\r\n                sheetInfo.push(sheet);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return sheetInfo;\r\n    }\r\n\r\n    public async getSheetByTitle(sheetTitle: string) {\r\n        const sheet = this.appConfig.doc?.sheetsByTitle[sheetTitle];\r\n        if (sheet) {\r\n            this.currentSheet = sheet.sheetId;\r\n            await sheet.loadCells();\r\n        }\r\n        return sheet;\r\n    }\r\n\r\n    public async getSheet(sheetId: string) {\r\n        this.currentSheet = sheetId;\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        await sheet.loadCells();\r\n        return sheet;\r\n    }\r\n\r\n    public appendSheet(sheetId: string, row: { [key: string]: string | number; }) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.addRow(row);\r\n    }\r\n\r\n    public append(row: { [key: string]: string | number; }) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.addRow(row);\r\n    }\r\n\r\n    public async appendRows(rows: { [key: string]: string | number; }[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        await sheet.addRows(rows);\r\n    }\r\n\r\n    public getSheetRow(sheetId: string, row: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.getRows({\r\n            limit: 1,\r\n            offset: row,\r\n        });\r\n    }\r\n\r\n    public getRow(row: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.getRows({\r\n            limit: 1,\r\n            offset: row,\r\n        });\r\n    }\r\n\r\n    public getColumn(col: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        const result = [];\r\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\r\n        for (let i = 0; i < len - 1; i += 1) {\r\n            result.push(sheet.getCell(i, col));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getColumnWithSheet(sheet: GoogleSpreadsheetWorksheet, col: number) {\r\n        const result = [];\r\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\r\n        for (let i = 0; i < len - 1; i += 1) {\r\n            result.push(sheet.getCell(i, col));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getSheetColumn(sheetId: string, col: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        const result = [];\r\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\r\n        for (let i = 0; i < len - 1; i += 1) {\r\n            result.push(sheet.getCell(i, col));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getSheetCell(sheetId: string, row: number, column: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.getCell(row, column);\r\n    }\r\n\r\n    public getCell(row: number, column: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.getCell(row, column);\r\n    }\r\n\r\n    public saveSheetCells(sheetId: string, cells: GoogleSpreadsheetCell[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.saveCells(cells);\r\n    }\r\n\r\n    public saveCells(cells: GoogleSpreadsheetCell[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.saveCells(cells);\r\n    }\r\n\r\n    public addSheet (input: WorksheetBasicProperties) {\r\n        return this.appConfig.doc.addSheet(input);\r\n    }\r\n\r\n    public async saveSheetWithJSON (json: { [key: string]: any; }[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        await this.updateSheet(sheet, json);\r\n    }\r\n\r\n    public async updateCategorySheet(json: { [month: string]: { [cat: string]: any; }; }): Promise<void> {\r\n        const sheet = await this.getSheetByTitle('Summary');\r\n        await sheet.loadCells();\r\n        const months = Object.keys(json);\r\n        months.forEach((month) => {\r\n            const monthData = json[month];\r\n            const categories = Object.keys(monthData);\r\n            const mIndex = month.replace(/-\\d+$/, '');\r\n            const colIndex: number = monthIndex[mIndex];\r\n            categories.forEach((cat) => {\r\n                const rowIndex = catIndex[cat];\r\n                if (typeof rowIndex !== 'undefined' && typeof colIndex !== 'undefined') {\r\n                    const cell = sheet.getCell(rowIndex, colIndex);\r\n                    cell.value = monthData[cat];\r\n                }\r\n            });\r\n        });\r\n        return sheet.saveUpdatedCells();\r\n    }\r\n\r\n    public async udpateMaintenanceSheet(json: { [month: string]: { [flat: string]: any; }; }): Promise<void> {\r\n        const sheet = await this.getSheetByTitle('Maintanence');\r\n        await sheet.loadCells();\r\n        const months = Object.keys(json);\r\n        months.forEach((month) => {\r\n            const monthData = json[month];\r\n            const flats = Object.keys(maintIndex);\r\n            const mIndex = month.replace(/-\\d+$/, '');\r\n            const colIndex: number = maintenenceMonthIndex[mIndex];\r\n            flats.forEach((flat) => {\r\n                const rowIndex = maintIndex[flat];\r\n                if (typeof rowIndex !== 'undefined' && typeof colIndex !== 'undefined') {\r\n                    const cell = sheet.getCell(rowIndex, colIndex);\r\n                    cell.value = monthData[flat];\r\n                }\r\n            });\r\n        });\r\n        return sheet.saveUpdatedCells();\r\n    }\r\n\r\n    public async searchUpdateRecord(\r\n        sheetName: string,\r\n        searchColumns: Record<string, any>,\r\n        updateColumnName: string,\r\n        updateValue: any,\r\n    ) {\r\n        const sheet = await this.getSheetByTitle(sheetName);\r\n\r\n        // Get all rows from the sheet\r\n        const rows = await sheet.getRows();\r\n\r\n        // Search for the record\r\n        const recordIndex = rows.findIndex(\r\n            (row: { [x: string]: any; }) =>\r\n                Object.entries(searchColumns).every(([columnName, value]) => row[columnName] === value));\r\n\r\n        if (recordIndex !== -1) {\r\n            // If a record is found, update its input column if it's empty\r\n            const recordToUpdate = rows[recordIndex];\r\n            if (!recordToUpdate[updateColumnName]) {\r\n                recordToUpdate[updateColumnName] = updateValue;\r\n                await recordToUpdate.save();\r\n                console.log('Record updated successfully.');\r\n            } else {\r\n                console.log('Record found but input column is not empty.');\r\n            }\r\n        } else {\r\n            console.log('Record not found.');\r\n            throw new Error('RECORD_NOT_FOUND');\r\n        }\r\n    }\r\n\r\n    public isEmptySheet(sheet: GoogleSpreadsheetWorksheet): boolean {\r\n        return !sheet || sheet.rowCount === 0;\r\n    }\r\n\r\n    private async updateSheet(\r\n        sheet: GoogleSpreadsheetWorksheet,\r\n        json: { [key: string]: any; }[],\r\n        startingRow: number = 0,\r\n    ) {\r\n        if (json && json.length) {\r\n            const headers = Object.keys(json[0]);\r\n            const colCount = headers.length;\r\n            const rowCount = startingRow + json.length;\r\n            for (let i = startingRow; i < rowCount; i += 1) {\r\n                const row = json[i];\r\n                for (let j = 0; j < colCount; j += 1) {\r\n                    const cell = sheet.getCell(i + 1, j);\r\n                    const newVal = row[headers[j]];\r\n                    if (cell.formattedValue !== newVal) {\r\n                        cell.value = newVal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        await sheet.saveUpdatedCells();\r\n    }\r\n\r\n    public async updateSheetWithJSON(json: { [key: string]: any; }[], sheetTitle?: string): Promise<void> {\r\n        if (sheetTitle) {\r\n            await this.getSheetByTitle(sheetTitle);\r\n        }\r\n        await this.appendRows(json);\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!gsheetInstance) {\r\n            gsheetInstance = new GsheetUtilImpl();\r\n            gsheetInstance.init();\r\n        }\r\n        return gsheetInstance;\r\n    }\r\n}\r\n\r\nexport default GsheetUtilImpl.getInstance();\r\n","import { getConfig, setCredentials } from '../..';\r\nimport { ApplicationConfig } from '../../service-types';\r\nimport SHEET_ACTION_TYPES, { SheetInfo } from './sheet-types';\r\n\r\nexport const initSheet = () => ({\r\n    type: SHEET_ACTION_TYPES.INIT,\r\n});\r\n\r\nexport const initSuccess = (payload: ApplicationConfig) => ({\r\n    type: SHEET_ACTION_TYPES.INIT_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const initFailure = (payload: string) => ({\r\n    type: SHEET_ACTION_TYPES.INIT_FAILURE,\r\n    payload,\r\n});\r\n\r\nexport const setSheetInfo = (payload: SheetInfo) => ({\r\n    type: SHEET_ACTION_TYPES.SET_SHEET_INFO,\r\n    payload,\r\n});\r\n\r\nexport function initializeGoogleSheet(secret: string) {\r\n    return (dispatch: any) => {\r\n        dispatch(initSheet());\r\n        const out = setCredentials(secret);\r\n        if (out.res) {\r\n            dispatch(initSuccess({ ...getConfig() }));\r\n        } else {\r\n            dispatch(initFailure(out.error));\r\n        }\r\n    };\r\n}\r\n","export type Operation = 'in' | 'having' | 'regex' | 'range' | '==' | '>' | '>=' | '<' | '<=' | '!=';\r\nexport type TransType = 'debit' | 'credit';\r\nexport type Query = {\r\n    opr: Operation;\r\n    value: string[] | string | number | number[] | boolean;\r\n    type?: TransType;\r\n};\r\nexport type ColQuery = {\r\n    [colName: string]: Query[] | LogicalMap;\r\n};\r\nexport type CatFieldMap = {\r\n    [category: string]: LogicalMap | ColQuery[];\r\n};\r\nexport enum LogicalOpr {\r\n    'and' = 'and',\r\n    'or' = 'or',\r\n    'xor' = 'xor',\r\n    'not' = 'not',\r\n    'nand' = 'nand',\r\n    'nor' = 'nor',\r\n}\r\nexport type LogicalMap = {\r\n    [opr in LogicalOpr | string]: Array<Query | ColQuery>;\r\n};\r\n","import {\r\n    ColQuery, LogicalMap, LogicalOpr, Query,\r\n} from '../services/cat-map/cat-map-types';\r\n\r\nclass LogicalExecutor {\r\n    public query: LogicalMap;\r\n\r\n    public constructor(inpQuery: LogicalMap) {\r\n        this.query = inpQuery;\r\n    }\r\n\r\n    run(execute: (query: Query | ColQuery) => boolean) {\r\n        return Object.keys(this.query).every((opr: LogicalOpr | string) => {\r\n            const children: Array<Query | ColQuery> = this.query[opr];\r\n            switch (opr) {\r\n            case LogicalOpr.or:\r\n                return children.some((child) => execute(child));\r\n            case LogicalOpr.nor:\r\n                return !children.some((child) => execute(child));\r\n            case LogicalOpr.xor: {\r\n                const res = children.map((child) => execute(child));\r\n                return res.some((child) => child === true) && res.some((child) => child === false);\r\n            }\r\n            case LogicalOpr.nand:\r\n            case LogicalOpr.not:\r\n                return !(children.every((child: any) => execute(child)));\r\n            case LogicalOpr.and:\r\n            default:\r\n                return children.every((child: any) => execute(child));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default LogicalExecutor;\r\n","import { soundex } from 'soundex-code';\r\nimport { Query } from '../services/cat-map/cat-map-types';\r\n\r\nclass QueryExecutor {\r\n    public query: Query;\r\n\r\n    public constructor(inpQuery: Query) {\r\n        this.query = inpQuery;\r\n    }\r\n\r\n    public run(fieldVal: any): boolean {\r\n        let res = false;\r\n        const { opr, value: queryVal } = this.query;\r\n        if (fieldVal && queryVal) {\r\n            switch (opr) {\r\n            case '==': {\r\n                res = fieldVal.toString() === queryVal.toString() ||\r\n                        checkSoundexInText(queryVal.toString(), fieldVal.toString());\r\n                break;\r\n            }\r\n            case '!=': {\r\n                res = fieldVal.toString() !== queryVal.toString();\r\n                break;\r\n            }\r\n            case '>': {\r\n                res = fieldVal > queryVal;\r\n                break;\r\n            }\r\n            case '>=': {\r\n                res = fieldVal >= queryVal;\r\n                break;\r\n            }\r\n            case '<': {\r\n                res = fieldVal < queryVal;\r\n                break;\r\n            }\r\n            case '<=': {\r\n                res = fieldVal <= queryVal;\r\n                break;\r\n            }\r\n            case 'having': {\r\n                if (typeof fieldVal === 'string') {\r\n                    if (Array.isArray(queryVal)) {\r\n                        res = queryVal.some((item) => {\r\n                            const qval = item.toString();\r\n                            const text = fieldVal.toLowerCase();\r\n                            const keyword = qval.toLowerCase();\r\n                            return text.indexOf(keyword) > -1 || checkSoundexInText(keyword, text);\r\n                        });\r\n                    } else {\r\n                        const qval = queryVal.toString();\r\n                        const text = fieldVal.toLowerCase();\r\n                        const keyword = qval.toLowerCase();\r\n                        res = text.indexOf(keyword) > -1 || checkSoundexInText(keyword, text);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'regex': {\r\n                if (Array.isArray(queryVal)) {\r\n                    res = queryVal.some((item) => {\r\n                        const qval = item.toString();\r\n                        const reg = new RegExp(qval, 'i');\r\n                        return fieldVal.match(reg)?.length > 0;\r\n                    });\r\n                } else {\r\n                    const qval = queryVal.toString();\r\n                    const reg = new RegExp(qval, 'i');\r\n                    res = fieldVal.match(reg)?.length > 0;\r\n                }\r\n                break;\r\n            }\r\n            case 'in': {\r\n                if (Array.isArray(queryVal)) {\r\n                    if (typeof queryVal[0] === 'string') {\r\n                        res = queryVal.indexOf(fieldVal.toString() as never) > -1 ||\r\n                                checkSoundexInArray(fieldVal.toString(), queryVal as string[]);\r\n                    } else {\r\n                        res = queryVal.indexOf(fieldVal as never) > -1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'range': {\r\n                if (Array.isArray(queryVal)) {\r\n                    res = typeof queryVal[0] === 'undefined' || fieldVal >= queryVal[0];\r\n                    res = res && (typeof queryVal[1] === 'undefined' || fieldVal <= queryVal[1]);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                // Nothing to do\r\n            }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nconst checkSoundexInText = (keyword: string, text: string) => {\r\n    const words = text.split(/\\s+/);\r\n    return words.some((word) => soundex(word.toString()) === soundex(keyword));\r\n};\r\n\r\nconst checkSoundexInArray = (keyword: string, words: string[]) =>\r\n    words.some((word) => soundex(word.toString()) === soundex(keyword));\r\n\r\nexport default QueryExecutor;\r\n","import { ColQuery, Query, TransType } from '../services/cat-map/cat-map-types';\r\nimport LogicalExecutor from './logical-executor';\r\nimport QueryExecutor from './query-executor';\r\n\r\nexport default class ColQueryExecutor {\r\n    public query: ColQuery;\r\n\r\n    public constructor(inpQuery: ColQuery) {\r\n        this.query = inpQuery;\r\n    }\r\n\r\n    run(transaction: { [index: string]: any }) {\r\n        return Object.keys(this.query).every((columnName) => {\r\n            const children = this.query[columnName];\r\n            let out = false;\r\n            if (Array.isArray(children)) {\r\n                out = children.every((query) => {\r\n                    const qExecutor = new QueryExecutor(query);\r\n                    const fieldVal: any = transaction[columnName];\r\n                    return qExecutor.run(fieldVal);\r\n                });\r\n            } else {\r\n                const logicalExec = new LogicalExecutor(children);\r\n                out = logicalExec.run((query) => {\r\n                    const qExecutor = new QueryExecutor(query as Query);\r\n                    const fieldVal: any = transaction[columnName];\r\n                    return qExecutor.run(fieldVal);\r\n                });\r\n            }\r\n            return out;\r\n        });\r\n    }\r\n}\r\n","import { CatFieldMap, ColQuery, LogicalMap } from '../services/cat-map/cat-map-types';\r\nimport { TransactionType } from '../services/redux/transactions/trans-types';\r\nimport ColQueryExecutor from './col-query-executor';\r\nimport { TransCategory } from './trans-category';\r\nimport LogicalExecutor from './logical-executor';\r\n\r\nexport default class TransMapExecutor {\r\n    catFieldMap: CatFieldMap;\r\n\r\n    public constructor(catMapJson: CatFieldMap) {\r\n        this.catFieldMap = catMapJson;\r\n    }\r\n\r\n    public run(cashTransactions: TransactionType[]) {\r\n        const categories: string[] = Object.keys(this.catFieldMap);\r\n        cashTransactions.forEach((ctrans) => {\r\n            if (!ctrans.Category) {\r\n                const category: TransCategory | undefined = categories.find(\r\n                    (cat: string) => {\r\n                        const children: LogicalMap | ColQuery[] = this.catFieldMap[cat];\r\n                        let out;\r\n                        if (Array.isArray(children)) {\r\n                            out = children.every((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        } else {\r\n                            const logicalExec = new LogicalExecutor(children);\r\n                            out = logicalExec.run((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery as ColQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        }\r\n                        return out;\r\n                    },\r\n                ) as TransCategory;\r\n                ctrans.Category = category;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { CatFieldMap } from './cat-map-types';\r\n\r\nexport default {\r\n    'Maintenance Collection': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: [\r\n                '2,600.00', '2600',\r\n                '2,700.00', '2700',\r\n                '2,800.00', '2800',\r\n                '5,400.00', '5400',\r\n                '5,500.00', '5500',\r\n                '5,600.00', '5600',\r\n                '8,100.00', '8100',\r\n                '5,200.00', '5200',\r\n                '8,400.00', '8400',\r\n                '10,800.00', '10800',\r\n                '11,200.00', '11200',\r\n                '14,000.00', '14000',\r\n                '13,500.00', '13500',\r\n            ],\r\n        }],\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['maintenance', 'neft', 'upi', 'imps'],\r\n        }],\r\n    }],\r\n    'Audit Fees': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['N YASWANTH', 'YASWANTH', 'audit', 'audit fees'],\r\n        }],\r\n    }],\r\n    'Corpus Fund': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: [\r\n                '7500', '7,500.00',\r\n                '15,000.00', '15000',\r\n                '22,500.00', '22500',\r\n                '30,000.00', '30000',\r\n                '37,500.00', '37500',\r\n                '45,000.00', '45000',\r\n            ],\r\n        }],\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['corpus', 'neft', 'upi', 'imps'],\r\n        }],\r\n    }],\r\n    'Income Tax Refund': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: ['ACH', 'AY20', 'ACH Credit', 'AAKAS1985M'],\r\n        }],\r\n    }],\r\n    Bescom: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['BESCOM', 'Electricity', 'EBANK:BBPS'],\r\n        }],\r\n    }],\r\n    BWSSB: [{\r\n        Debit: [{\r\n            opr: 'range',\r\n            value: [14000, 16500],\r\n        }],\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['BANGALORE WATER SUPPLY', 'BWSSB', 'BANGALORE ONE', 'EBANK:BBPS'],\r\n        }],\r\n    }],\r\n    'CCTV / Intercomm': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SHANKAR TELECOM LINKS', 'Intercom'],\r\n        }],\r\n    }],\r\n    Security: [{\r\n        Debit: [{\r\n            opr: 'in',\r\n            value: [35000, 35000.00, 41000, 41000.00],\r\n        }],\r\n    }],\r\n    'House Keeping Salary': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'keeping',\r\n                'housekeeping',\r\n                'house keeping',\r\n                'Housekeeping.+Salary',\r\n                'House keeping.+Salary',\r\n                'house-keeping.+salary',\r\n                'housekeeping.+ladies',\r\n                'hk.+salary',\r\n                'hyrunni',\r\n                'sunanda',\r\n            ],\r\n        }],\r\n    }],\r\n    'Garden Maintenance': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['garden', 'gardner', 'Gardner.+Salary', 'garden.+work', 'Manure'],\r\n        }],\r\n    }],\r\n    'Garbage Collection Vendor / BBMP': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SYED ALI BASHA', 'RR CLEANING', 'RR CLEAN'],\r\n        }],\r\n    }],\r\n    'Borewell And Motor Maintenance': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['borewell', 'motor', 'coil', 'winding'],\r\n        }],\r\n    }],\r\n    'Lift Maintenance': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['JOHNSON.+LIFTS', 'Lift'],\r\n        }],\r\n    }],\r\n    'HK Items Purchased': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'Housekeeping.+Items',\r\n                'Housekeeping.+Material',\r\n                'hk.+item',\r\n                'HK.+Material',\r\n                'bleaching',\r\n                'garbage drum',\r\n                'powder',\r\n                'mop',\r\n                'dust',\r\n                'dustbin',\r\n                'soap',\r\n                'detergent',\r\n                'broom',\r\n                'switch',\r\n                'tubelight',\r\n                'switch',\r\n                'light',\r\n                'bulb',\r\n                'Phenoyl',\r\n                'powder',\r\n                'phenoyl',\r\n                'sanitizer',\r\n                'cleaner',\r\n                'dettol',\r\n                'bottle',\r\n                'neem oil',\r\n                'tap',\r\n                'kerosene',\r\n            ],\r\n        }],\r\n    }],\r\n    'Electrical / Plumbing Repairs': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['electric repair', 'electric work', 'electric', 'Chamundi', 'plumbing'],\r\n        }],\r\n    }],\r\n    'Septic Tank Repairs / Cleaning': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['septik', 'septic', 'septic tank', 'sewage', 'sewage tank', 'sewage work', 'sewage pipe'],\r\n        }],\r\n    }],\r\n    'Water Tanks Cleaning': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['water.+tank', 'cauvery', 'kaveri'],\r\n        }],\r\n    }],\r\n    'Generator Maintenance and Repair': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['venus.+energy', 'kirloskar', 'generator'],\r\n        }],\r\n    }],\r\n    'Savings Bank SMS Charges/Cheque book': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['SMS .+Alert', 'cheque.+book', 'charges', 'chq.+book'],\r\n        }],\r\n    }],\r\n    'Health Club Maintenance': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['gym', 'FITNESS', 'sports'],\r\n        }],\r\n    }],\r\n    'Festival/Holiday Celebration': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'diwali.+work',\r\n                'diwali',\r\n                'festival',\r\n                'celebration',\r\n                'pooja',\r\n                'pongal',\r\n                'independence',\r\n                'republic',\r\n                'sweets',\r\n                'flag',\r\n            ],\r\n        }],\r\n    }],\r\n    'Drinking Water for Employees': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['drinking', 'drinking water', 'mineral water', 'water purchase'],\r\n        }],\r\n    }],\r\n    Diesel: [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['Diesel'],\r\n        }],\r\n    }],\r\n    'BAF Subscription Charges': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['BAF', 'BAF Subscription'],\r\n        }],\r\n    }],\r\n    'Annual Bonus': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['bonus'],\r\n        }],\r\n    }],\r\n    'Interest on account': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['89630100005613'],\r\n        }],\r\n    }],\r\n    'FD Deposit': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['TO TRANSFER', 'Repayment Credit'],\r\n        }],\r\n    }],\r\n    'Tenant Deposit from the Owners': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: ['10,000.00', '10000'],\r\n        }],\r\n    }],\r\n    'Apartment Work By Security and Others': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'Apartment.+Work',\r\n                'Cleaning.+Rain Water',\r\n            ],\r\n        }],\r\n    }],\r\n    'Apartment Safety': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: [\r\n                'sanitization',\r\n                'sanitizing',\r\n                'mask',\r\n                'sheild',\r\n                'shield',\r\n                'spray',\r\n                'cutting tree',\r\n                'fire',\r\n                'extinguisher',\r\n                'rat poison',\r\n            ],\r\n        }],\r\n    }],\r\n    'Apartment developments': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: [\r\n                'stationery',\r\n                'pen',\r\n                'paper',\r\n                'folder',\r\n                'files',\r\n                'notebook',\r\n                'note book',\r\n                'note-book',\r\n                'entry book',\r\n                'reciept book',\r\n                'bought',\r\n                'purchased',\r\n                'purchase of',\r\n                'cash voucher',\r\n            ],\r\n        }],\r\n    }],\r\n    'Apartment repairs related': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['cement work', 'cement', 'service', 'repair', 'spanner', 'fixing', 'fixed'],\r\n        }],\r\n    }],\r\n    'Misc expenses': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['tea', 'coffee'],\r\n        }],\r\n    }],\r\n    'Fine / Extra Payment Received': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['maintenance', 'neft', 'upi', 'imps'],\r\n        }],\r\n        Credit: [{\r\n            opr: 'regex',\r\n            value: ['\\\\d'],\r\n        }],\r\n    }],\r\n    'Other Income': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['income', 'other'],\r\n        }],\r\n        Credit: [{\r\n            opr: '>',\r\n            value: 0,\r\n        }],\r\n    }],\r\n    'Cash Withdrawal / in hand': {\r\n        or: [\r\n            {\r\n                Description: [{\r\n                    opr: 'regex',\r\n                    value: ['cash', 'withdrawal', 'bank', 'basavaraj', 'carry.+forwarded', 'self'],\r\n                }],\r\n            },\r\n            {\r\n                'Cheque No': [{\r\n                    opr: 'regex',\r\n                    value: ['\\\\d+'],\r\n                }],\r\n            },\r\n        ],\r\n    },\r\n    'Deposit to RD account': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['3715125', 'SI:89630300010611'],\r\n        }],\r\n    }],\r\n} as CatFieldMap;\r\n","export default {\r\n    '001': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['khadir', 'MOHAMEDABDULKHA'],\r\n        }],\r\n    }],\r\n    '002': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['shainv', 'potti', 'MAHESH', 'NAGARAJ MUTHUSAMY', 'NAGARAJ'],\r\n        }],\r\n    }],\r\n    '003': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['gulshan', 'padma', '6364883334', 'subhrojyoti', '6289470044'],\r\n        }],\r\n    }],\r\n    '004': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ANAND', 'ESHWARDAS'],\r\n        }],\r\n    }],\r\n    '005': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['KOPRESH'],\r\n        }],\r\n    }],\r\n    '007': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['007'],\r\n        }],\r\n    }],\r\n    '008': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NITHINS', '/008', 'Repaka'],\r\n        }],\r\n    }],\r\n    '009': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['rutvijkanzaria', 'PRATIK'],\r\n        }],\r\n    }],\r\n    '010': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ANANTH'],\r\n        }],\r\n    }],\r\n    '011': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AKARSH'],\r\n        }],\r\n    }],\r\n    '012': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['K B GANESH', 'GANESH', 'VIVEKNAYAK', 'VIVEK NAYAK'],\r\n        }],\r\n    }],\r\n    101: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIJAYAKUMAR T', 'VIJAYAKUMAR'],\r\n        }],\r\n    }],\r\n    102: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ARNAB', 'CHAKRABORTY', 'ARNABCHAKRABORT'],\r\n        }],\r\n    }],\r\n    103: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['KRISHNA KUMAR', 'KRISHNAKUMAR'],\r\n        }],\r\n    }],\r\n    104: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AMIT KUMAR', 'KARMAKAR', 'AMITKUMAR'],\r\n        }],\r\n    }],\r\n    105: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIKASVERMA', 'VIKAS VERMA', 'MB105', '105MAINTENA', '8892757591'],\r\n        }],\r\n    }],\r\n    106: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['mr.uttammohanty', 'uttam'],\r\n        }],\r\n    }],\r\n    107: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['POLAKALA', 'NARAYANA PRASAD'],\r\n        }],\r\n    }],\r\n    108: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['EMMANUEL RAJA A', 'EMMANUEL'],\r\n        }],\r\n    }],\r\n    109: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['K S A RAJA RAM KUMAR', 'RAJARAMKUMAR'],\r\n        }],\r\n    }],\r\n    110: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SONYKUMARI', 'SONY KUMARI', 'PAVAN DEVARU', 'PAVANDEVARU', 'MOBLTA'],\r\n        }],\r\n    }],\r\n    111: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SENTHILKUMAR', 'SENTHIL'],\r\n        }],\r\n    }],\r\n    112: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ARINDAM'],\r\n        }],\r\n    }],\r\n    201: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ESWAR KRISHNAN', 'ESWAR', 'KARTHIKEYAN', 'flat201'],\r\n        }],\r\n    }],\r\n    202: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SRIHARSHA', 'SRI HARSHA'],\r\n        }],\r\n    }],\r\n    203: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NILOTPALDAS'],\r\n        }],\r\n    }],\r\n    204: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AMLANJYOTI', 'AMLAN'],\r\n        }],\r\n    }],\r\n    205: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIKRAMADITYA'],\r\n        }],\r\n    }],\r\n    206: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PINAKI'],\r\n        }],\r\n    }],\r\n    207: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRIYA MISHRA', 'PRIYAMISHRA', 'SRINIVAS', 'prashant.dombale'],\r\n        }],\r\n    }],\r\n    208: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['JESUDOSS'],\r\n        }],\r\n    }],\r\n    209: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AJUJAMESASHOK', 'AJU JAMES ASHOK', 'AJUJAMES', 'T R RAJARAM', 'TRRAJARAM', 'CHALAPATHI'],\r\n        }],\r\n    }],\r\n    210: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['TARANBIR', 'IMPSMBRSur'],\r\n        }],\r\n    }],\r\n    211: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['9972528008', 'pranjan'],\r\n        }],\r\n    }],\r\n    212: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SURAJIT'],\r\n        }],\r\n    }],\r\n    301: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRABUDH'],\r\n        }],\r\n    }],\r\n    302: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['BALAJI'],\r\n        }],\r\n    }],\r\n    303: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SURENDRA'],\r\n        }],\r\n    }],\r\n    304: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['MEHDI'],\r\n        }],\r\n    }],\r\n    305: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIVIN'],\r\n        }],\r\n    }],\r\n    306: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ASHIM', 'DEBAJYOTI'],\r\n        }],\r\n    }],\r\n    307: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SAMPREETH'],\r\n        }],\r\n    }],\r\n    308: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRAHLAD'],\r\n        }],\r\n    }],\r\n    309: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['7406849918', 'prasad.kiran', 'kbv018@okhdfcbank'],\r\n        }],\r\n    }],\r\n    310: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PREMA'],\r\n        }],\r\n    }],\r\n    311: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['GURUPRASADA', 'CHOKKADI'],\r\n        }],\r\n    }],\r\n    312: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SHAKTHI', 'VINAYAK'],\r\n        }],\r\n    }],\r\n    401: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['HARISHA'],\r\n        }],\r\n    }],\r\n    402: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['JITHA', 'JITHAJAMES', 'JITHA JAMES'],\r\n        }],\r\n    }],\r\n    403: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['8147758124', 'shaheer'],\r\n        }],\r\n    }],\r\n    404: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NOBROKER', '/404Main', 'MOHAMMED SAIF'],\r\n        }],\r\n    }],\r\n    405: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SANTOSHKUMAR', '/405main', 'SANTHOSH KUMAR', 'MALLA'],\r\n        }],\r\n    }],\r\n    406: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRAVEENVIJAY', 'PRAVEEN VIJAY'],\r\n        }],\r\n    }],\r\n    407: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['GALLA', 'VARADARAJU'],\r\n        }],\r\n    }],\r\n    408: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['UDAY KIRAN', 'UDAY', 'YAGNAMURTHY'],\r\n        }],\r\n    }],\r\n    409: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRABU', 'SUNDARRAJU', 'Jeevanantham'],\r\n        }],\r\n    }],\r\n    410: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['rohinimh19', 'ROHINI', 'MALLIKARJUN'],\r\n        }],\r\n    }],\r\n    411: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NATESAN', 'ADITYA KOLLURI', 'ADITYAKOLLURI', 'santumahapatra', 'santu mahapatra'],\r\n        }],\r\n    }],\r\n    412: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['CHIRANJAN'],\r\n        }],\r\n    }],\r\n};\r\n","import { CatFieldMap, ColQuery, LogicalMap } from '../services/cat-map/cat-map-types';\r\nimport { TransactionType } from '../services/redux/transactions/trans-types';\r\nimport ColQueryExecutor from './col-query-executor';\r\nimport { FlatCategory } from './flat-category';\r\nimport LogicalExecutor from './logical-executor';\r\n\r\nexport default class MaintMapExecutor {\r\n    catFieldMap: CatFieldMap;\r\n\r\n    public constructor(catMapJson: CatFieldMap) {\r\n        this.catFieldMap = catMapJson;\r\n    }\r\n\r\n    public run(cashTransactions: TransactionType[]) {\r\n        const categories: string[] = Object.keys(this.catFieldMap);\r\n        cashTransactions.forEach((ctrans) => {\r\n            if (!ctrans.Flat) {\r\n                const flat: FlatCategory | undefined = categories.find(\r\n                    (cat: string) => {\r\n                        const children: LogicalMap | ColQuery[] = this.catFieldMap[cat];\r\n                        let out;\r\n                        if (Array.isArray(children)) {\r\n                            out = children.every((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        } else {\r\n                            const logicalExec = new LogicalExecutor(children);\r\n                            out = logicalExec.run((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery as ColQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        }\r\n                        return out;\r\n                    },\r\n                ) as FlatCategory;\r\n                ctrans.Flat = flat;\r\n            }\r\n        });\r\n    }\r\n}\r\n","export enum TransCategory {\r\n    'Audit Fees' = 'Audit Fees',\r\n    'BWSSB' = 'BWSSB',\r\n    'Diesel' = 'Diesel',\r\n    'Bescom' = 'Bescom',\r\n    'House Keeping Salary' = 'House Keeping Salary',\r\n    'Security' = 'Security',\r\n    'Gardener' = 'Gardener',\r\n    'Garbage Collection Vendor / BBMP' = 'Garbage Collection Vendor / BBMP',\r\n    'Borewell And Motor Maintenance' = 'Borewell And Motor Maintenance',\r\n    'Annual Bonus' = 'Annual Bonus',\r\n    'Lift Maintenance' = 'Lift Maintenance',\r\n    'HK Items Purchased' = 'HK Items Purchased',\r\n    'Health Club Maintenance' = 'Health Club Maintenance',\r\n    'Electrical / Plumbing Repairs' = 'Electrical / Plumbing Repairs',\r\n    'Apartment repairs related' = 'Apartment repairs related',\r\n    'Apartment Painting' = 'Apartment Painting',\r\n    'CCTV / Intercomm' = 'CCTV / Intercomm',\r\n    'Misc expenses' = 'Misc expenses',\r\n    'Apartment developments' = 'Apartment developments',\r\n    'Apartment Work By Security and Others' = 'Apartment Work By Security and Others',\r\n    'Septic Tank Repairs / Cleaning' = 'Septic Tank Repairs / Cleaning',\r\n    'Water Tanks Cleaning' = 'Water Tanks Cleaning',\r\n    'Generator Maintenance and Repair' = 'Generator Maintenance and Repair',\r\n    'Savings Bank SMS Charges/Cheque book' = 'Savings Bank SMS Charges/Cheque book',\r\n    'Festival/Holiday Celebration' = 'Festival/Holiday Celebration',\r\n    'Drinking Water for Employees' = 'Drinking Water for Employees',\r\n    'BAF Subscription Charges' = 'BAF Subscription Charges',\r\n    'Maintenance Collection' = 'Maintenance Collection',\r\n    'Income Tax Refund' = 'Income Tax Refund',\r\n    'Other Income' = 'Other Income',\r\n    'Interest on account' = 'Interest on account',\r\n    'Fine / Extra Payment Received' = 'Fine / Extra Payment Received',\r\n    'Corpus Fund' = 'Corpus Fund',\r\n    'Tenant Deposit from the Owners' = 'Tenant Deposit from the Owners',\r\n    'FD Deposit' = 'FD Deposit',\r\n}\r\nexport default { TransCategory };\r\n","import moment from 'moment';\r\nimport TransMapExecutor from '../../../utils/trans-map-executor';\r\nimport gsheetUtil from '../../googleapis/gsheet-util-impl';\r\nimport catMapJson from '../../cat-map/cat-map';\r\nimport maintMapJson from '../../maint-map/maint-map';\r\nimport { TransactionType, TransActions, MonthlyCatSplit, MonthlyMaintSplit } from './trans-types';\r\nimport MaintMapExecutor from '../../../utils/maint-map-executor';\r\nimport { TransCategory } from '../../../utils/trans-category';\r\n\r\nexport const loadTransactions = () => ({\r\n    type: TransActions.LOAD_TRANS,\r\n});\r\n\r\nexport const loadCashTransactionSuccess = (payload: any) => ({\r\n    type: TransActions.LOAD_CASH_TRANS_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const loadOnlineTransactionSuccess = (payload: any) => ({\r\n    type: TransActions.LOAD_ONLINE_TRANS_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const loadCashTransactionFailure = (payload: any) => ({\r\n    type: TransActions.LOAD_CASH_TRANS_FAILURE,\r\n    payload,\r\n});\r\n\r\nexport const loadOnlineTransactionFailure = (payload: any) => ({\r\n    type: TransActions.LOAD_ONLINE_TRANS_FAILURE,\r\n    payload,\r\n});\r\n\r\nexport const updateMonthlySplit = (payload: any) => ({\r\n    type: TransActions.UPDATE_MONTHLY_SPLIT,\r\n    payload,\r\n});\r\n\r\nexport const resetMonthlyCatSplit = () => ({\r\n    type: TransActions.RESET_MONTHLY_SPLIT,\r\n});\r\n\r\nexport const updateMonthlyMaintenanceSplit = (payload: any) => ({\r\n    type: TransActions.UPDATE_MONTHLY_MAINT_SPLIT,\r\n    payload,\r\n});\r\n\r\nexport const resetMonthlyMaintenanceCatSplit = () => ({\r\n    type: TransActions.RESET_MONTHLY_MAINT_SPLIT,\r\n});\r\n\r\nexport const resetTransaction = () => ({\r\n    type: TransActions.RESET_TRANS,\r\n});\r\n\r\nexport function filterTransactions(transactions: TransactionType[], filter: TransCategory[]) {\r\n    return transactions.filter((trans) => {\r\n        if (trans.Category) {\r\n            const categories = trans.Category.split(',');\r\n            return categories.some((category) => {\r\n                const [cat] = category.split('(');\r\n                return filter.indexOf(cat.trim() as any) > -1;\r\n            });\r\n        }\r\n        return false;\r\n    });\r\n}\r\n\r\nexport function fetchTransactions(sheetName = 'Cash Transactions') {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        gsheetUtil.init().then(() => {\r\n            gsheetUtil.getSheetByTitleAsJson(sheetName).then((value) => {\r\n                const transMapExec = new TransMapExecutor(catMapJson as any);\r\n                transMapExec.run(value as TransactionType[]);\r\n                const maintMapExecutor = new MaintMapExecutor(maintMapJson as any);\r\n                maintMapExecutor.run(filterTransactions(\r\n                    value as TransactionType[],\r\n                    [\r\n                        TransCategory['Maintenance Collection'],\r\n                        TransCategory['Corpus Fund'],\r\n                    ]));\r\n                dispatch(loadCashTransactionSuccess(value as any));\r\n                gsheetUtil.saveSheetWithJSON(value);\r\n            }).catch((e: any) => {\r\n                dispatch(loadCashTransactionFailure(e.message));\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\nexport function fetchOnlineTransactions(sheetName = 'Online Transactions') {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        gsheetUtil.init().then(() => {\r\n            gsheetUtil.getSheetByTitleAsJson(sheetName).then((value) => {\r\n                const transMapExec = new TransMapExecutor(catMapJson as any);\r\n                transMapExec.run(value as TransactionType[]);\r\n                const maintMapExecutor = new MaintMapExecutor(maintMapJson as any);\r\n                maintMapExecutor.run(filterTransactions(\r\n                    value as TransactionType[],\r\n                    [\r\n                        TransCategory['Maintenance Collection'],\r\n                        TransCategory['Corpus Fund'],\r\n                    ]));\r\n                dispatch(loadOnlineTransactionSuccess(value as any));\r\n                gsheetUtil.saveSheetWithJSON(value);\r\n            }).catch((e: any) => {\r\n                dispatch(loadOnlineTransactionFailure(e.message));\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\nexport function doMonthlyCatSplit(data: TransactionType[], monthlySplit: MonthlyCatSplit) {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        data.forEach((datum: TransactionType) => {\r\n            const category = datum.Category;\r\n            const date = datum.Date;\r\n            if (category && date) {\r\n                const categories = category.split(',');\r\n                const isDebit = datum.Debit && datum.Debit?.toString() !== '0';\r\n                let amount = isDebit ?\r\n                    parseFloat(datum.Debit!.toString().replace(/,/g, '')) :\r\n                    parseFloat(datum.Credit!.toString().replace(/,/g, ''));\r\n                categories.forEach((catWithAmount: string) => {\r\n                    let cat = catWithAmount;\r\n                    if (catWithAmount.indexOf('(') > -1) {\r\n                        const splitCat = catWithAmount.split('(');\r\n                        [cat] = splitCat;\r\n                        amount = parseFloat(splitCat[1].replace(/(\\(|\\))/g, '').replace(/,/g, ''));\r\n                    }\r\n                    updateMonthlyCat(monthlySplit, datum, date, cat.trim(), !!isDebit, amount);\r\n                });\r\n            }\r\n        });\r\n        dispatch(updateMonthlySplit({ ...monthlySplit }));\r\n    };\r\n}\r\n\r\nfunction updateMonthlyCat(\r\n    monthlySplit: MonthlyCatSplit,\r\n    datum: TransactionType,\r\n    date: string,\r\n    cat: string,\r\n    isDebit: boolean,\r\n    amount: number,\r\n) {\r\n    const replacedDate = date.replace(/\\//g, '-');\r\n    const month = moment(replacedDate, 'DD-MM-YYYY').format('MMM-YY');\r\n    if (!monthlySplit) {\r\n        monthlySplit = {};\r\n    }\r\n    if (!monthlySplit[month]) {\r\n        monthlySplit[month] = {};\r\n    }\r\n    if (isDebit) {\r\n        amount = -amount;\r\n    }\r\n    if (amount && typeof amount === 'number') {\r\n        if (!monthlySplit[month][cat]) {\r\n            monthlySplit[month][cat] = amount;\r\n        } else {\r\n            monthlySplit[month][cat] += amount;\r\n        }\r\n    } else {\r\n        console.log('cat', cat, month, datum);\r\n    }\r\n}\r\n\r\nexport function doMonthlyMaintSplit(data: TransactionType[], monthlySplit: MonthlyMaintSplit) {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        data.forEach((datum: TransactionType) => {\r\n            const flat = datum.Flat;\r\n            const date = datum.Date;\r\n            const category = datum.Category;\r\n            if (flat && date && category) {\r\n                const month = moment(date, 'DD/MM/YYYY').format('MMM-YY');\r\n                if (!monthlySplit) {\r\n                    monthlySplit = {};\r\n                }\r\n                if (!monthlySplit[month]) {\r\n                    monthlySplit[month] = {};\r\n                }\r\n                let amount = parseFloat(datum.Credit!.toString().replace(/,/g, ''));\r\n                if (category.indexOf('(') > -1) {\r\n                    const splitCat = category.match(/Maintenance Collection\\s+\\((\\d+(\\.\\d+)?)\\)/);\r\n                    if (splitCat) {\r\n                        amount = parseFloat(splitCat[1]);\r\n                    }\r\n                }\r\n                if (amount && typeof amount === 'number') {\r\n                    if (!monthlySplit[month][flat]) {\r\n                        monthlySplit[month][flat] = amount;\r\n                    } else {\r\n                        monthlySplit[month][flat] += amount;\r\n                    }\r\n                } else {\r\n                    console.log('Flat', flat, month, datum);\r\n                }\r\n            }\r\n        });\r\n        dispatch(updateMonthlyMaintenanceSplit({ ...monthlySplit }));\r\n    };\r\n}\r\n","import moment from 'moment';\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Table from '@mui/material/Table';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport { fetchTransactions } from '../../services/redux/transactions/trans-actions';\r\nimport { TransData } from '../../services/redux/transactions/trans-types';\r\n\r\nfunction CategorizeCash() {\r\n    const sheetInfo: TransData = useSelector((state: any) => state.trans);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTransactions() as any);\r\n    }, [dispatch]);\r\n    const sheetData = sheetInfo.cashTransData;\r\n    const headers = useMemo(() => {\r\n        let out: string[] = [];\r\n        if (sheetData && sheetData.length > 1) {\r\n            out = Object.keys(sheetData[0]);\r\n        }\r\n        return out;\r\n    }, [sheetData]);\r\n    return (\r\n        <>\r\n            <div className=\"cash-trans\">\r\n                {sheetInfo.loading && <CircularProgress />}\r\n                {!sheetInfo.loading && (\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Sl. No.</TableCell>\r\n                                {headers.map((header: string) => (\r\n                                    <TableCell key={header}>{header}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {!!sheetData && sheetData.map((row: { [key: string]: any }, index) => (\r\n                                <TableRow key={JSON.stringify(row)}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    {headers.map((header: string) => (\r\n                                        <TableCell key={`${header}-${row[header]}`}>\r\n                                            {header !== 'Date' ? row[header] :\r\n                                                moment(row[header], 'DD/MM/YYYY').format('DD/MM/YYYY')}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CategorizeCash;\r\n","import moment from 'moment';\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport {\r\n    CircularProgress, Table, TableHead, TableRow, TableCell, TableBody,\r\n} from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchOnlineTransactions } from '../../services/redux/transactions/trans-actions';\r\nimport { TransData } from '../../services/redux/transactions/trans-types';\r\n\r\nfunction CategorizeOnline() {\r\n    const sheetInfo: TransData = useSelector((state: any) => state.trans);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchOnlineTransactions('Online Transactions') as any);\r\n    }, [dispatch]);\r\n    const sheetData = sheetInfo.onlineTransData;\r\n    const headers = useMemo(() => {\r\n        let out: string[] = [];\r\n        if (sheetData && sheetData.length > 1) {\r\n            out = Object.keys(sheetData[0]);\r\n        }\r\n        return out;\r\n    }, [sheetData]);\r\n    return (\r\n        <>\r\n            <div className=\"online-trans\">\r\n                {sheetInfo.loading && <CircularProgress />}\r\n                {!sheetInfo.loading && (\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Sl. No.</TableCell>\r\n                                {headers.map((header: string) => (\r\n                                    <TableCell key={header}>{header}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {!!sheetData && sheetData.map((row: { [key: string]: any }, index) => (\r\n                                <TableRow key={JSON.stringify(row)}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    {headers.map((header: string) => (\r\n                                        <TableCell key={`${header}-${row[header]}`}>\r\n                                            {header !== 'Date' ? row[header] :\r\n                                                moment(row[header], 'DD-MM-YYYY').format('DD/MM/YYYY')}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CategorizeOnline;\r\n","import { JsonView, defaultStyles } from 'react-json-view-lite';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport {\r\n    Alert, Stepper, Typography, Step, StepLabel, Button,\r\n} from '@mui/material';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\r\nimport { initializeGoogleSheet } from '../../services/redux/google-sheet/sheet-actions';\r\nimport { GoogleSheet } from '../../services/redux/google-sheet/sheet-types';\r\nimport {\r\n    doMonthlyCatSplit,\r\n    doMonthlyMaintSplit,\r\n    filterTransactions,\r\n} from '../../services/redux/transactions/trans-actions';\r\nimport { TransactionType, TransData } from '../../services/redux/transactions/trans-types';\r\nimport CategorizeCash from './categorize-cash';\r\nimport CategorizeOnline from './categorize-online';\r\nimport { TransCategory } from '../../utils/trans-category';\r\nimport './categorizer.css';\r\n\r\nfunction Categorizer() {\r\n    const [message, setMessage] = useState<string>();\r\n    const [type, setType] = useState<'online' | 'cash' | 'monthly' | undefined>('cash');\r\n    const [secret, setSecret] = useState('');\r\n    const dispatch = useDispatch();\r\n    const sheetData: GoogleSheet = useSelector((state: any) => state.sheet);\r\n    const { initError } = sheetData;\r\n    const transData: TransData = useSelector((state: any) => state.trans);\r\n    const { monthlyCatSplit, cashTransData, onlineTransData, monthlyMaintSplit } = transData;\r\n    useEffect(() => {\r\n        if (secret) {\r\n            dispatch(initializeGoogleSheet(secret) as any);\r\n        }\r\n    }, [dispatch, secret]);\r\n    const splitMonthly = useCallback(() => {\r\n        if (cashTransData && onlineTransData) {\r\n            dispatch(doMonthlyCatSplit([...cashTransData, ...onlineTransData] as any, {}) as any);\r\n            setType(undefined);\r\n        }\r\n    }, [cashTransData, dispatch, onlineTransData]);\r\n    const splitMonthlyMaintenance = useCallback(() => {\r\n        if (cashTransData && onlineTransData) {\r\n            const filteredTransData: TransactionType[] = filterTransactions(\r\n                [...cashTransData as TransactionType[], ...onlineTransData as TransactionType[]],\r\n                [\r\n                    TransCategory['Maintenance Collection'],\r\n                ],\r\n            );\r\n            dispatch(doMonthlyMaintSplit(filteredTransData as any, {}) as any);\r\n            setType(undefined);\r\n        }\r\n    }, [cashTransData, dispatch, onlineTransData]);\r\n    const saveCategorized = useCallback(() => {\r\n        gsheetUtil.updateCategorySheet(monthlyCatSplit as any).then(() => {\r\n            console.log('Saved');\r\n            setMessage('Summary Updated');\r\n        });\r\n    }, [monthlyCatSplit]);\r\n    const saveMaitenenceSplit = useCallback(() => {\r\n        gsheetUtil.udpateMaintenanceSheet(monthlyMaintSplit as any).then(() => {\r\n            console.log('Saved');\r\n            setMessage('Maintenence Split Updated');\r\n        });\r\n    }, [monthlyMaintSplit]);\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const steps = useMemo(() => (\r\n        ['Cash Transactions', 'Online Transactions', 'Map Transactions', 'Categorize Maintenance']), []);\r\n    const isStepOptional = useCallback((index: number) => false, []);\r\n    const isCompletedStep = useCallback((index: number) => false, []);\r\n    const handleBack = useCallback(() => {\r\n        switch (activeStep) {\r\n        case 3: {\r\n            setType(undefined);\r\n            setActiveStep(2);\r\n            break;\r\n        }\r\n        case 2: {\r\n            setType('online');\r\n            setActiveStep(1);\r\n            break;\r\n        }\r\n        case 1: {\r\n            setType('cash');\r\n            setActiveStep(0);\r\n            break;\r\n        }\r\n        default:\r\n            // Nothing to be done\r\n        }\r\n    }, [activeStep]);\r\n    const handleSkip = useCallback(() => {}, []);\r\n    const handleNext = useCallback(() => {\r\n        switch (activeStep) {\r\n        case 0: {\r\n            setType('online');\r\n            setActiveStep(1);\r\n            break;\r\n        }\r\n        case 1: {\r\n            setType(undefined);\r\n            setActiveStep(2);\r\n            splitMonthly();\r\n            break;\r\n        }\r\n        case 2: {\r\n            setType(undefined);\r\n            setActiveStep(3);\r\n            splitMonthlyMaintenance();\r\n            break;\r\n        }\r\n        default:\r\n            // Nothing to be done\r\n        }\r\n    }, [activeStep, splitMonthlyMaintenance, splitMonthly]);\r\n    return (\r\n        <div>\r\n            {!!message && <Alert severity=\"info\">{message}</Alert> }\r\n            {!!initError && <Alert severity=\"error\">{initError}</Alert>}\r\n            <div className=\"stepper-header\">\r\n                <Stepper className=\"steps\" activeStep={activeStep}>\r\n                    {steps.map((label, index) => {\r\n                        const stepProps: { completed?: boolean } = {};\r\n                        const labelProps: { optional?: React.ReactNode } = {};\r\n                        if (isStepOptional(index)) {\r\n                            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n                        }\r\n                        if (isCompletedStep(index)) {\r\n                            stepProps.completed = false;\r\n                        }\r\n                        return (\r\n                            <Step key={label} {...stepProps}>\r\n                                <StepLabel {...labelProps}>{label}</StepLabel>\r\n                            </Step>\r\n                        );\r\n                    })}\r\n                </Stepper>\r\n                <div className=\"nav\">\r\n                    <Button\r\n                        disabled={activeStep === 0}\r\n                        onClick={handleBack}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                    {isStepOptional(activeStep) && (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleSkip}\r\n                        >\r\n                            Skip\r\n                        </Button>\r\n                    )}\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleNext}\r\n                    >\r\n                        {(activeStep === steps.length - 1 && 'Save') || 'Next'}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"control\">\r\n                {activeStep === 2 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        disabled={!monthlyCatSplit}\r\n                        onClick={saveCategorized}\r\n                    >\r\n                        Save Categorized\r\n                    </Button>\r\n                )}&nbsp;&nbsp;&nbsp;\r\n                {activeStep === 3 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        disabled={!monthlyMaintSplit}\r\n                        onClick={saveMaitenenceSplit}\r\n                    >\r\n                        Save Split\r\n                    </Button>\r\n                )}\r\n            </div>\r\n            {!initError && !!sheetData.sheetConfig.secret && (\r\n                <>\r\n                    {activeStep === 0 && <CategorizeCash />}\r\n                    {activeStep === 1 && <CategorizeOnline />}\r\n                    {activeStep === 2 && !!monthlyCatSplit && <JsonView style={defaultStyles} data={monthlyCatSplit} />}\r\n                    {activeStep === 3 && !!monthlyMaintSplit &&\r\n                        <JsonView style={defaultStyles} data={monthlyMaintSplit} />\r\n                    }\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Categorizer;\r\n","import React from 'react';\r\nimport Categorizer from '../components/categorizer';\r\n\r\nconst Categorize: React.FC = () => (\r\n    <Categorizer />\r\n);\r\n\r\nexport default Categorize;\r\n","import { CatItem } from '../../services/service-types';\r\n\r\nexport type ExpenseFormProps = ExpenseState & {\r\n    callback: (state: ExpenseState) => void;\r\n    handleClose: () => void;\r\n    image: string;\r\n    mimeType: string;\r\n    expenseCategories: CatItem[];\r\n};\r\n\r\nexport enum TransType {\r\n    Online = 'Online',\r\n    Cash = 'Cash',\r\n}\r\n\r\nexport type ExpenseState = {\r\n    date?: string,\r\n    amount?: number,\r\n    description?: string,\r\n    category?: string,\r\n    transactionType?: TransType;\r\n};\r\n\r\nexport type GoogleDriveFile = {\r\n    id: string;\r\n    name: string;\r\n    mimeType: string;\r\n    kind: string;\r\n};\r\n","import { TransCategory } from '../../utils/trans-category';\r\n\r\nexport function parseExpenseInfo(text: string, expenseTypes: string[] = []) {\r\n    if (!expenseTypes || expenseTypes.length === 0) {\r\n        expenseTypes = Object.values(TransCategory);\r\n    }\r\n    // Initialize the outputs\r\n    let description = '';\r\n    const dates: any[] = [];\r\n    const amounts: any[] = [];\r\n    // Split the text based on space, newline, or underscore delimiter\r\n    const words = text.split(/[\\s_]/m).filter((word) => word && word !== '/');\r\n\r\n    // Iterate through the words to find the relevant information\r\n    words.forEach((word) => {\r\n        // Parse date\r\n        if (/^\\d{1,2}-\\d{1,2}-\\d{2,4}$/.test(word)) {\r\n            dates.push(word);\r\n        }\r\n        // Parse amount\r\n        if (/^\\d+(\\.\\d{1,2})?-?$/.test(word)) {\r\n            amounts.push(word);\r\n        }\r\n    });\r\n    // Parse description\r\n    if (!description) {\r\n        description = text.replace(dates[0], '');\r\n        description = description.replace(amounts[0], '').replace(/_/g, '');\r\n        description = findTopMatchingText(expenseTypes, [description]) || description;\r\n    }\r\n    return {\r\n        date: dates[0],\r\n        amount: parseFloat(amounts[0]) || 0,\r\n        description,\r\n    };\r\n}\r\n\r\nexport function findTopMatchingText(texts: string[], words: string[]) {\r\n    const rankMap = new Map<string, number>();\r\n\r\n    // Iterate through each text and count the number of word matches\r\n    texts.forEach((text) => {\r\n        let rank = 0;\r\n        const key = text.toLowerCase();\r\n        words.forEach((word) => {\r\n            if (key.includes(word.toLowerCase())) {\r\n                rank += 1;\r\n            }\r\n        });\r\n\r\n        rankMap.set(text, rank);\r\n    });\r\n\r\n    const valueArray = Array.from(rankMap);\r\n    // Sort the texts based on the rank in descending order\r\n    const sortedTexts = [...valueArray].sort((a, b) => b[1] - a[1]);\r\n\r\n    // Return the top matching text\r\n    if (sortedTexts.length > 0 && sortedTexts[0][1] !== 0) {\r\n        return sortedTexts[0][0];\r\n    }\r\n\r\n    return ''; // Return empty string if no matches are found\r\n}\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { fetchFilesFromFolder } from '../../services/googleapis/drive-util';\r\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\r\nimport { ExpenseState, GoogleDriveFile, TransType } from './expense-types';\r\nimport TransMapExecutor from '../../utils/trans-map-executor';\r\nimport { TransCategory } from '../../utils/trans-category';\r\nimport catMapJson from '../../services/cat-map/cat-map';\r\nimport { parseExpenseInfo } from '../../services/ocr/parser-utils';\r\nimport { getVision } from '../../services/ocr';\r\nimport extractData, { ProcessedData } from '../../services/googleapis/gemini';\r\nimport { TransactionType } from '../../services/redux/transactions/trans-types';\r\n\r\nexport function fetchFiles(\r\n    setFilesList: React.Dispatch<React.SetStateAction<GoogleDriveFile[]>>,\r\n    folderId: string = '',\r\n) {\r\n    fetchFilesFromFolder(folderId).then((files) => {\r\n        setFilesList(files);\r\n    });\r\n}\r\n\r\nexport const saveOnlineTransSheet = async (data: any, sheetTitle = 'Online Transactions') => {\r\n    const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\r\n    if (!sheet) {\r\n        await gsheetUtil.addSheet({\r\n            headerValues: [\r\n                'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category', 'Flat', 'Bill',\r\n            ],\r\n            title: sheetTitle,\r\n        });\r\n    }\r\n    const sheetData = (JSON.parse(JSON.stringify(data)) as any[]).map((row) => {\r\n        row.Date = moment(row.Date).format('DD-MM-YYYY');\r\n        return row;\r\n    });\r\n    await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\r\n    return true;\r\n};\r\n\r\nexport const saveOnlineTransactionWithBill = async (data: ExpenseState, fileId: string) => {\r\n    await searchUpdateOnlineTransWithBills(data.date, data.amount, data.category || '', getDriveFileURL(fileId));\r\n};\r\n\r\nexport async function searchUpdateOnlineTransWithBills(\r\n    date: any,\r\n    debit: any,\r\n    category: string,\r\n    billURL: string,\r\n) {\r\n    let searchColumns: Record<string, any> = {\r\n        Date: date,\r\n        Debit: debit,\r\n        Category: category,\r\n    };\r\n    try {\r\n        await gsheetUtil.searchUpdateRecord('Online Transactions', searchColumns, 'Bill', billURL);\r\n    } catch (e) {\r\n        searchColumns = {\r\n            Debit: debit,\r\n            Category: category,\r\n        };\r\n        await gsheetUtil.searchUpdateRecord('Online Transactions', searchColumns, 'Bill', billURL);\r\n    }\r\n}\r\n\r\nexport const saveCashTransSheet = async (data: any, sheetTitle = 'Cash Transactions') => {\r\n    const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\r\n    if (!sheet) {\r\n        await gsheetUtil.addSheet({\r\n            headerValues: [\r\n                'Date',\r\n                'Description',\r\n                'Item Description/Purpose',\r\n                'Qty',\r\n                'Price',\r\n                'Debit',\r\n                'Credit',\r\n                'Total',\r\n                'Category',\r\n                'Flat',\r\n                'Bill',\r\n            ],\r\n            title: sheetTitle,\r\n        });\r\n    }\r\n    const sheetData = JSON.parse(JSON.stringify(data));\r\n    await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\r\n    return true;\r\n};\r\n\r\nexport const getDriveFileURL = (fileId: string) => `https://drive.google.com/file/d/${fileId}/preview`;\r\n\r\nexport const getDataInSheetFormat = (data: ExpenseState, selectedBill?: string) => {\r\n    const out: TransactionType = {\r\n        Date: data.date ?? '',\r\n        Description: data.description ?? '',\r\n        Debit: data.amount ?? 0,\r\n        Credit: 0,\r\n        Category: data.category as TransCategory,\r\n        Total: 0,\r\n    };\r\n    if (selectedBill) {\r\n        out.Bill = getDriveFileURL(selectedBill);\r\n    }\r\n    return out;\r\n};\r\n\r\nexport const setCategory = (data: ExpenseState, longDescription?: string) => {\r\n    const value: TransactionType = getDataInSheetFormat(data);\r\n    if (!value.Description && longDescription) {\r\n        value.Description = longDescription;\r\n    }\r\n    const transMapExec = new TransMapExecutor(catMapJson as any);\r\n    transMapExec.run([value] as TransactionType[]);\r\n    data.category = value.Category;\r\n    if (!data.description && data.category) {\r\n        data.description = data.category;\r\n    }\r\n};\r\n\r\nexport function extractBillData(\r\n    fileName: string | undefined,\r\n    bill: GoogleDriveFile,\r\n): Promise<ExpenseState> {\r\n    let data: ExpenseState = {};\r\n    const promise = new Promise<ExpenseState>((resolve) => {\r\n        if (fileName && fileName.indexOf('_') > -1) {\r\n            data = parseExpenseInfo(fileName);\r\n        }\r\n        if (!data.amount || !data.date || !data.description) {\r\n            getVisionRetry(`https://drive.google.com/uc?id=${bill.id}`).then(async (response: any) => {\r\n                if (response?.data?.ParsedResults) {\r\n                    const parsedText = response.data.ParsedResults[0]?.ParsedText || '';\r\n                    const parsedData: ProcessedData = await extractData(parsedText);\r\n                    const parsedFormData: ExpenseState = {\r\n                        ...parsedData,\r\n                        transactionType: parsedData['cash or cheque']?.toLowerCase() === 'cheque'\r\n                            ? TransType.Online : TransType.Cash,\r\n                    };\r\n                    setCategory(parsedFormData, parsedText!.toLowerCase());\r\n                    resolve(parsedFormData);\r\n                } else {\r\n                    const parsedFormData = ({\r\n                        ...data,\r\n                    });\r\n                    setCategory(parsedFormData);\r\n                    resolve(parsedFormData);\r\n                }\r\n            });\r\n        } else {\r\n            const parsedFormData = ({\r\n                ...data,\r\n            });\r\n            setCategory(parsedFormData);\r\n            resolve(parsedFormData);\r\n        }\r\n    });\r\n    return promise;\r\n}\r\n\r\nconst getVisionRetry = (url: string, RETRY_COUNT = 3) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n        getVision(url).then(async (response: any) => {\r\n            RETRY_COUNT -= 1;\r\n            if (response || RETRY_COUNT === 0) {\r\n                resolve(response);\r\n            } else if (!response) {\r\n                const resp = await getVisionRetry(url, RETRY_COUNT);\r\n                resolve(resp);\r\n            }\r\n        });\r\n    });\r\n    return promise;\r\n};\r\n\r\nexport default { fetchFiles, saveCashTransSheet, saveOnlineTransSheet };\r\n","import {\r\n    GoogleGenerativeAI,\r\n    HarmCategory,\r\n    HarmBlockThreshold,\r\n} from '@google/generative-ai';\r\nimport { getConfig } from '../../index';\r\n\r\nexport type ProcessedData = {\r\n    amount: number;\r\n    date: string;\r\n    description: string;\r\n    'cash or cheque': 'cheque' | 'cash' | null;\r\n}\r\nexport default async function extractData(text: string) : Promise<ProcessedData> {\r\n    const MODEL_NAME = 'gemini-1.0-pro';\r\n    const API_KEY = getConfig().geminiKey || '';\r\n    const genAI = new GoogleGenerativeAI(API_KEY);\r\n    const model = genAI.getGenerativeModel({ model: MODEL_NAME });\r\n\r\n    const generationConfig = {\r\n        temperature: 0.9,\r\n        topK: 0,\r\n        topP: 1,\r\n        maxOutputTokens: 2048,\r\n    };\r\n\r\n    const safetySettings = [\r\n        {\r\n            category: HarmCategory.HARM_CATEGORY_HARASSMENT,\r\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n        {\r\n            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\r\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n        {\r\n            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\r\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n        {\r\n            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\r\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n        },\r\n    ];\r\n\r\n    const chat = model.startChat({\r\n        generationConfig,\r\n        safetySettings,\r\n    });\r\n    try {\r\n        // eslint-disable-next-line max-len\r\n        const result = await chat.sendMessage(`What is the date (dd-mm-YYYY), amount (in number format), description (in short) and 'cash or cheque', extracted from the following text in JSON format?\\n${text}`);\r\n        const { response } = result;\r\n        const parsedString = response.text().replace(/```/g, '').replace(/JSON/gi, '');\r\n        const parsedData = JSON.parse(parsedString);\r\n        return Array.isArray(parsedData) ? parsedData[0] : parsedData;\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    return { amount: 0, date: '', description: '', 'cash or cheque': null };\r\n}\r\n","import React from 'react';\r\nimport { Grid } from '@mui/material';\r\nimport { GoogleDriveFile } from './expense-types';\r\nimport { getDriveFileURL } from './bill-utils';\r\nimport './expense.css';\r\n\r\ntype BillGridType = {\r\n    bills: GoogleDriveFile[];\r\n    handleClick: (image: GoogleDriveFile) => void;\r\n};\r\n\r\nconst BillGrid = ({ bills, handleClick }: BillGridType) => (\r\n    <div>\r\n        <Grid container spacing={2}>\r\n            {bills.map((bill, index) => (\r\n                <Grid\r\n                    item\r\n                    key={`Image ${index + 1}`}\r\n                    xs={2}\r\n                    className=\"bill-grid-item\"\r\n                    onClick={() => handleClick(bill)}\r\n                >\r\n                    {bill.mimeType.startsWith('image/') && (\r\n                        <img\r\n                            src={getDriveFileURL(bill.id)}\r\n                            alt={`Bill ${index + 1}`}\r\n                            style={{ width: 300, height: 300, cursor: 'pointer', padding: '5px' }}\r\n                        />\r\n                    )}\r\n                    {bill.mimeType === 'application/pdf' && (\r\n                        <embed\r\n                            src={getDriveFileURL(bill.id)}\r\n                            title={`Bill ${index + 1}`}\r\n                            style={{ width: 300, height: 300, cursor: 'pointer', padding: '5px' }}\r\n                            type=\"application/pdf\"\r\n                        />\r\n                    )}\r\n                    <h3 style={{ textAlign: 'center' }}>{bill.name}</h3>\r\n                </Grid>\r\n            ))}\r\n            {bills.length === 0 && (<h4 className=\"no-bills-msg\">No bills to display</h4>)}\r\n        </Grid>\r\n    </div>\r\n);\r\n\r\nexport default BillGrid;\r\n","/* eslint-disable react/react-in-jsx-scope */\r\nimport React, { useCallback, useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    FormControl,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    Radio,\r\n    FormHelperText,\r\n    TextField,\r\n    InputLabel,\r\n    Select,\r\n    DialogActions,\r\n    Button,\r\n    MenuItem,\r\n} from '@mui/material';\r\nimport { ExpenseFormProps, ExpenseState } from './expense-types';\r\nimport './expense.css';\r\nimport { getDriveFileURL } from './bill-utils';\r\n\r\nconst ExpenseForm = ({\r\n    callback, date, amount, description, category, image, handleClose, expenseCategories, mimeType, transactionType,\r\n}: ExpenseFormProps) => {\r\n    const [formData, setData] = useState<ExpenseState>({\r\n        date: moment(date ?? '01-04-2023', 'DD-MM-YYYY').format('YYYY-MM-DD'),\r\n        amount: amount ?? 0,\r\n        description: description ?? 'text',\r\n        category: category ?? '',\r\n        transactionType,\r\n    });\r\n\r\n    const [errorData, setErrorData] = useState({\r\n        date: '',\r\n        amount: '',\r\n        description: '',\r\n        category: '',\r\n        transactionType: '',\r\n    });\r\n\r\n    const handleChange = useCallback((event: any) => {\r\n        const { name, value } = event.target;\r\n        setData((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    }, []);\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        let error = false;\r\n        if (!formData.transactionType) {\r\n            errorData.transactionType = 'Select a transaction type';\r\n            error = true;\r\n        }\r\n        if (!formData.amount) {\r\n            errorData.amount = 'Enter a valid amount';\r\n            error = true;\r\n        }\r\n        if (!formData.date || formData.date.toLowerCase() === 'invalid date') {\r\n            errorData.date = 'Enter a valid date';\r\n            error = true;\r\n        }\r\n        if (!formData.description) {\r\n            errorData.description = 'Enter a valid description';\r\n            error = true;\r\n        }\r\n        if (!formData.category) {\r\n            errorData.category = 'Select a category';\r\n            error = true;\r\n        }\r\n        if (error) {\r\n            setErrorData({ ...errorData });\r\n        } else {\r\n            const formDataClone = JSON.parse(JSON.stringify(formData));\r\n            formDataClone.date = moment(formDataClone.date, 'YYYY-MM-DD').format('DD-MM-YYYY');\r\n            callback(formDataClone);\r\n        }\r\n    }, [callback, errorData, formData]);\r\n\r\n    return (\r\n        <div className=\"expense-dialog\">\r\n            <Dialog open onClose={handleClose} className=\"bill-grid-dialog\" fullWidth scroll=\"paper\" maxWidth=\"xl\">\r\n                <DialogTitle>Form</DialogTitle>\r\n                <DialogContent>\r\n                    {mimeType.startsWith('image/') && (\r\n                        <img\r\n                            className=\"expense-bill-img\"\r\n                            src={getDriveFileURL(image)}\r\n                            alt=\"Expense Bill\"\r\n                        />\r\n                    )}\r\n                    {mimeType === 'application/pdf' && (\r\n                        <embed\r\n                            className=\"expense-bill-img\"\r\n                            src={getDriveFileURL(image)}\r\n                            title=\"Expense Bill\"\r\n                        />\r\n                    )}\r\n                    <form>\r\n                        <FormControl variant=\"outlined\" fullWidth margin=\"normal\" error={!!errorData.transactionType}>\r\n                            <RadioGroup\r\n                                aria-label=\"Transaction Type\"\r\n                                name=\"transactionType\"\r\n                                value={formData.transactionType}\r\n                                onChange={handleChange}\r\n                                row\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Cash\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Cash\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Online\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Online\"\r\n                                />\r\n                            </RadioGroup>\r\n                            {!!errorData.transactionType &&\r\n                            <FormHelperText>{errorData.transactionType}</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        <TextField\r\n                            type=\"date\"\r\n                            name=\"date\"\r\n                            label=\"Date\"\r\n                            value={formData.date}\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            placeholder=\"DD-MM-YYYY\"\r\n                            error={!!errorData.date}\r\n                            helperText={errorData.date}\r\n                        />\r\n                        <TextField\r\n                            type=\"number\"\r\n                            name=\"amount\"\r\n                            label=\"Amount\"\r\n                            value={formData.amount}\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            error={!!errorData.amount}\r\n                            helperText={errorData.amount}\r\n                        />\r\n                        <TextField\r\n                            type=\"text\"\r\n                            name=\"description\"\r\n                            label=\"Description\"\r\n                            value={formData.description}\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            error={!!errorData.description}\r\n                            helperText={errorData.description}\r\n                        />\r\n                        <FormControl variant=\"outlined\" fullWidth margin=\"normal\" error={!!errorData.category}>\r\n                            <InputLabel>Category</InputLabel>\r\n                            <Select\r\n                                name=\"category\"\r\n                                value={formData.category}\r\n                                onChange={handleChange}\r\n                                label=\"Category\"\r\n                            >\r\n                                {expenseCategories.map((cat) => (\r\n                                    <MenuItem key={cat.key} value={cat.key}>{cat.label}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                            {!!errorData.category && <FormHelperText>{errorData.category}</FormHelperText>}\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => handleClose()} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from 'react';\r\nimport { Grid } from '@mui/material';\r\nimport { GoogleDriveFile } from './expense-types';\r\n\r\ntype FolderGridProp = { folders: GoogleDriveFile[]; handleClick:(folderId: string) => void };\r\nconst FolderGrid = ({ folders, handleClick }: FolderGridProp) => {\r\n    const sortedFolders = folders.length ? customSortByMonth(folders) : [];\r\n    return (\r\n        <div>\r\n            <Grid container spacing={2}>\r\n                {sortedFolders.map((folder, index) => (\r\n                    <Grid item key={`Image ${index + 1}`} xs={2} onClick={() => handleClick(folder.id)}>\r\n                        <img\r\n                            src=\"/images/folder.jpg\"\r\n                            id={`folder-${folder.name}`}\r\n                            alt={`Folder ${index + 1}`}\r\n                            style={{ width: 200, height: 200, cursor: 'pointer', padding: '5px' }}\r\n                        />\r\n                        <h3 style={{ textAlign: 'center' }}>{folder.name}</h3>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction customSortByMonth(arr: GoogleDriveFile[]) {\r\n    const monthMap: any = {\r\n        APR: 1,\r\n        MAY: 2,\r\n        JUN: 3,\r\n        JUL: 4,\r\n        AUG: 5,\r\n        SEP: 6,\r\n        OCT: 7,\r\n        NOV: 8,\r\n        DEC: 9,\r\n        JAN: 10,\r\n        FEB: 11,\r\n        MAR: 12,\r\n    };\r\n\r\n    // Custom sort function\r\n    arr.sort((a: GoogleDriveFile, b: GoogleDriveFile) => {\r\n        const monthA = monthMap[a.name.toUpperCase()];\r\n        const monthB = monthMap[b.name.toUpperCase()];\r\n        return monthA - monthB;\r\n    });\r\n\r\n    return arr;\r\n}\r\n\r\nexport default FolderGrid;\r\n","import { GoogleSpreadsheet, GoogleSpreadsheetWorksheet } from 'google-spreadsheet';\r\nimport moment from 'moment';\r\nimport { getConfig } from '..';\r\nimport gsheetUtil from '../googleapis/gsheet-util-impl';\r\nimport { CatItem, MonthlySheetDataType, Transaction } from '../service-types';\r\n\r\nexport interface Sheet {\r\n    getExpenseCategories(): Promise<CatItem[]>;\r\n    getMonthData(monthSheet: string): Promise<Transaction[]>;\r\n    setMonthData(monthSheet: string): Promise<boolean>;\r\n}\r\nconst EXP_STOP_ROW_VAL = 'Total Expense';\r\nconst CAT_COLUMN = 0;\r\nconst SUMMARY_SHEET = 'Summary';\r\nconst MONTHS_SHORT_TXT = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\nexport class TransSheet implements Sheet {\r\n    private initProm: Promise<GoogleSpreadsheet>;\r\n    private sheetIntialized = false;\r\n    private sheets: Map<string, GoogleSpreadsheetWorksheet> = new Map<string, GoogleSpreadsheetWorksheet>();\r\n\r\n    constructor() {\r\n        this.initProm = gsheetUtil.init();\r\n        this.initProm.then(() => {\r\n            this.sheetIntialized = true;\r\n        });\r\n    }\r\n\r\n    private async getSheet(sheetTitle: string) {\r\n        if (!this.sheetIntialized) {\r\n            await this.initProm;\r\n        }\r\n        return new Promise<GoogleSpreadsheetWorksheet>((resolve, reject) => {\r\n            if (this.sheets.has(sheetTitle)) {\r\n                resolve(this.sheets.get(sheetTitle) as GoogleSpreadsheetWorksheet);\r\n            } else {\r\n                gsheetUtil.getSheetByTitle(sheetTitle).then((sheet) => {\r\n                    if (sheet) {\r\n                        this.sheets.set(sheetTitle, sheet);\r\n                        resolve(sheet);\r\n                    } else {\r\n                        reject();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public async getExpenseCategories() {\r\n        return new Promise<CatItem[]>((resolve, reject) => {\r\n            let result: CatItem[] = [];\r\n            this.getSheet(SUMMARY_SHEET).then((sheet) => {\r\n                const sheetCol = gsheetUtil.getColumnWithSheet(sheet, CAT_COLUMN);\r\n                const expList = sheetCol.map((col) => col.value);\r\n                const filteredExpList = [];\r\n                for (let i = 1; i < expList.length - 1; i += 1) {\r\n                    if (expList[i] !== EXP_STOP_ROW_VAL) {\r\n                        filteredExpList.push(expList[i]);\r\n                        result = filteredExpList.map((expense: any) => ({\r\n                            key: expense,\r\n                            label: expense,\r\n                        }));\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                resolve(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    private async parseMonthlySheet(sheet: GoogleSpreadsheetWorksheet) {\r\n        const rows = await sheet.getRows();\r\n        const out: Transaction[] = rows.map((row) => ({\r\n            Date: moment(row.Date, 'DD/MM/YYYY').toDate(),\r\n            Description: row.Desc,\r\n            'Cheque No': row.ChqNo,\r\n            Debit: parseFloat(row.Amount) < 0 ? parseFloat(row.Amount) : 0,\r\n            Credit: parseFloat(row.Amount) >= 0 ? parseFloat(row.Amount) : 0,\r\n            Total: parseFloat(row.Balance),\r\n            type: row.Type,\r\n        }));\r\n        return out;\r\n    }\r\n\r\n    public getMonthData(monthSheet: string) {\r\n        return new Promise<Transaction[]>((resolve, reject) => {\r\n            this.getSheet(monthSheet).then(async (sheet) => {\r\n                const result = await this.parseMonthlySheet(sheet);\r\n                resolve(result);\r\n            }).catch(() => {\r\n                gsheetUtil.addSheet({\r\n                    headerValues: [\r\n                        'Date', 'Desc', 'ChqNo', 'Amount', 'Type', 'Balance',\r\n                    ],\r\n                    title: monthSheet,\r\n                }).then((sheet) => {\r\n                    this.sheets.set(monthSheet, sheet);\r\n                    resolve([]);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private pushSheetData(trans: Transaction, rows: MonthlySheetDataType[]) {\r\n        rows.push({\r\n            Date: moment(trans.Date).format('DD-MM-YYYY'),\r\n            Desc: trans.Description,\r\n            Balance: trans.Total,\r\n            Amount: trans.Credit - trans.Debit,\r\n            ChqNo: trans['Cheque No'],\r\n            Type: trans.type,\r\n        });\r\n    }\r\n\r\n    private transCompare(sheetData: Transaction, fileData: Transaction) {\r\n        return (\r\n            moment(sheetData.Date).format('DD/MM/YYY') === moment(fileData.Date).format('DD/MM/YYY') &&\r\n            sheetData.Description === fileData.Description &&\r\n            sheetData.Debit === fileData.Debit &&\r\n            sheetData.Credit === fileData.Credit &&\r\n            sheetData.type === fileData.type\r\n        );\r\n    }\r\n\r\n    private async mergeSheetData(sheet: GoogleSpreadsheetWorksheet, sheetData: Transaction[]) {\r\n        const { transactions } = getConfig().appData;\r\n        const rows: MonthlySheetDataType[] = [];\r\n        if (sheetData.length > 0) {\r\n            transactions.forEach((trans) => {\r\n                const fIndex = sheetData.findIndex((sData) => this.transCompare(sData, trans));\r\n                if (fIndex === -1) {\r\n                    this.pushSheetData(trans, rows);\r\n                }\r\n            });\r\n            sheetData.forEach((sheetTrans) => {\r\n                const fIndex = transactions.findIndex((fileData) => this.transCompare(fileData, sheetTrans));\r\n                if (fIndex === -1) {\r\n                    transactions.push(sheetTrans);\r\n                }\r\n            });\r\n        } else {\r\n            transactions.forEach((trans) => this.pushSheetData(trans, rows));\r\n        }\r\n        if (rows.length) {\r\n            await sheet.addRows(rows);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public async setMonthData(monthSheet: string) {\r\n        const fetchedData = await this.getMonthData(monthSheet);\r\n        const sheet = await this.getSheet(monthSheet);\r\n        await this.mergeSheetData(sheet, fetchedData);\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default new TransSheet();\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Button, CircularProgress } from '@mui/material';\r\nimport { VERIFIED_FILE_PREFIX, renameFile } from '../../services/googleapis/drive-util';\r\nimport BillGrid from './bill-grid';\r\nimport ExpenseForm from './expense';\r\nimport { ExpenseState, GoogleDriveFile, TransType } from './expense-types';\r\nimport {\r\n    extractBillData, fetchFiles, getDataInSheetFormat, saveCashTransSheet, saveOnlineTransactionWithBill,\r\n} from './bill-utils';\r\nimport FolderGrid from './folder-grid';\r\nimport { TransSheet } from '../../services/sheet';\r\nimport { CatItem } from '../../services/service-types';\r\nimport './new-bills.css';\r\n\r\nexport default function NewBills() {\r\n    const [showLoader, setShowLoader] = useState(false);\r\n    const [fileList, setFilesList] = useState<GoogleDriveFile[]>([]);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [selectedBill, setSelectedBill] = useState<GoogleDriveFile>();\r\n    const [selectedFolder, setSelectedFolder] = useState('');\r\n    const [formData, setFormData] = useState<ExpenseState>({\r\n        date: '',\r\n        amount: 0,\r\n        description: '',\r\n        category: '',\r\n    });\r\n    const handleFolderClick = useCallback((folderId: string) => {\r\n        setSelectedFolder(folderId);\r\n    }, []);\r\n    const handleClick = useCallback(async (image: GoogleDriveFile) => {\r\n        setSelectedBill(image);\r\n        setShowLoader(true);\r\n        const fileInfo = fileList.find((file) => file.id === image.id);\r\n        const fileName = fileInfo?.name;\r\n        const parsedFormData = await extractBillData(fileName, image);\r\n        setShowLoader(false);\r\n        setFormData(parsedFormData);\r\n        setOpenDialog(true);\r\n    }, [fileList]);\r\n\r\n    const handleClose = useCallback((data?: ExpenseState) => {\r\n        if (selectedBill && data?.date) {\r\n            const fileInfo = fileList.find((file) => file.id === selectedBill.id);\r\n            if (selectedBill && fileInfo) {\r\n                renameFile(selectedBill.id, fileInfo.name).then(() => {\r\n                    fetchFiles(setFilesList, selectedFolder);\r\n                    if (data.transactionType === TransType.Cash) {\r\n                        const finalData = [getDataInSheetFormat(data, selectedBill.id)];\r\n                        saveCashTransSheet(finalData);\r\n                    } else {\r\n                        saveOnlineTransactionWithBill(data, selectedBill.id);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        setSelectedBill(undefined);\r\n        setOpenDialog(false);\r\n    }, [fileList, selectedBill, selectedFolder]);\r\n\r\n    useEffect(() => {\r\n        fetchFiles(setFilesList, selectedFolder);\r\n    }, [selectedFolder]);\r\n\r\n    const [expenseCategories, setExpenseCategories] = useState<CatItem[]>([]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            const transSheet = new TransSheet();\r\n            const expCat = await transSheet.getExpenseCategories();\r\n            setExpenseCategories(expCat);\r\n        })();\r\n    }, []);\r\n    const bills = useMemo(() => fileList.filter(\r\n        (file) => (\r\n            (file.mimeType.startsWith('image/') ||\r\n            file.mimeType === 'application/pdf') &&\r\n            !file.name.startsWith(VERIFIED_FILE_PREFIX)\r\n        ),\r\n    ), [fileList]);\r\n\r\n    const folders = useMemo(() => fileList.filter(\r\n        (file) => file.mimeType === 'application/vnd.google-apps.folder'), [fileList]);\r\n\r\n    return (\r\n        <div className=\"bill-workspace\">\r\n            <h3>Unprocessed Bills</h3>\r\n            {!!selectedFolder && (\r\n                <Button\r\n                    className=\"go-to-months-btn\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => setSelectedFolder('')}\r\n                >\r\n                    Go Back\r\n                </Button>\r\n            )}\r\n            {!selectedFolder && <FolderGrid folders={folders} handleClick={handleFolderClick} />}\r\n            {!!selectedFolder && <BillGrid bills={bills} handleClick={handleClick} />}\r\n            {!!selectedBill && openDialog && (\r\n                <ExpenseForm\r\n                    {...formData}\r\n                    image={selectedBill.id}\r\n                    mimeType={selectedBill.mimeType}\r\n                    callback={handleClose}\r\n                    handleClose={handleClose}\r\n                    expenseCategories={expenseCategories}\r\n                />\r\n            )}\r\n            {showLoader && (\r\n                <div className=\"overlay\">\r\n                    <CircularProgress />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n// TODOS:\r\n// Testing our logic\r\n// Date Field Fix\r\n// Online Transactions Update\r\n","import React, { useCallback, useState } from 'react';\r\nimport { FilePicker } from 'react-file-picker';\r\nimport './index.css';\r\nimport { Alert } from '@mui/material';\r\n\r\nexport type FileUploadProps = {\r\n    onUpload: (file: File) => void;\r\n}\r\nexport const FileUpload = (props: FileUploadProps) => {\r\n    const [errorMsg, setErrorMsg] = useState<string>();\r\n    const onUpload = useCallback((fileObject: File) => {\r\n        props.onUpload(fileObject);\r\n    }, [props]);\r\n    const onError = useCallback((errMsg: React.SetStateAction<string | undefined>) => {\r\n        setErrorMsg(errMsg);\r\n    }, []);\r\n    return (\r\n        <>\r\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n            <p>Upload a transaction file (.xls) to process.</p>\r\n            <div className=\"file-upload-wrapper\">\r\n                <FilePicker\r\n                    extensions={['xls', 'xlsx']}\r\n                    onChange={onUpload}\r\n                    onError={onError}\r\n                >\r\n                    <button type=\"button\">Upload</button>\r\n                </FilePicker>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n","import XLSX from 'xlsx';\r\nimport moment from 'moment';\r\nimport { Transaction } from '../service-types';\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport const XLS_TRANS_KEY_PREFIX = '__EMPTY_';\r\nexport const xLSTransKeys = {\r\n    DATE_KEY: '2',\r\n    DESC_KEY: '5',\r\n    CHQ_NO_KEY: '9',\r\n    WITHDRAWAL_KEY: '12',\r\n    DEPOSIT_KEY: '17',\r\n    BALANCE_KEY: ['21', '19', '20', '22'],\r\n};\r\n\r\nexport const fileParserUtil = {\r\n    parseXLS: (file: File) => new Promise<Transaction[]>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e: any) => {\r\n            const workBook = XLSX.read(e.target.result, {\r\n                type: 'binary',\r\n            });\r\n            const worksheet = workBook.Sheets[workBook.SheetNames[0]];\r\n            const data = XLSX.utils.sheet_to_json(worksheet);\r\n            const trans = fileParserUtil.parseTransactions(data as { [key: string]: string; }[]);\r\n            resolve(trans);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }),\r\n\r\n    parseAmount: (input: any) => {\r\n        let out: any;\r\n        if (typeof input === 'string') {\r\n            out = parseFloat(input.replace('Cr', '').replaceAll(',', ''));\r\n        } else {\r\n            out = input;\r\n        }\r\n        return out;\r\n    },\r\n\r\n    getWorkingColumnKeyFromArray:\r\n        (cols: string[], input: any) => cols.find((col) => !!input[`${XLS_TRANS_KEY_PREFIX}${col}`]),\r\n\r\n    parseTransactions: (input: { [key: string]: string; }[]) => {\r\n        let trans: Transaction[] = [];\r\n        if (input.length) {\r\n            const dateKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DATE_KEY}`;\r\n            const data = input.filter((row) =>\r\n                row[dateKey] && row[dateKey].length === 10 && row[dateKey].includes('/') &&\r\n                moment(row[dateKey], 'dd/MM/YYYY').toDate().toString() !== 'Invalid Date');\r\n            let balanceKey = fileParserUtil.getWorkingColumnKeyFromArray(xLSTransKeys.BALANCE_KEY, data[0]) || '';\r\n            const descKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DESC_KEY}`;\r\n            const chqNoKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.CHQ_NO_KEY}`;\r\n            balanceKey = `${XLS_TRANS_KEY_PREFIX}${balanceKey}`;\r\n            trans = data.map((row) => {\r\n                const out: Transaction = {\r\n                    Date: moment(row[dateKey], 'DD/MM/YYYY').toDate(),\r\n                    Description: row[descKey],\r\n                    'Cheque No': row[chqNoKey] || '',\r\n                    Debit: 0,\r\n                    Credit: 0,\r\n                    Total: fileParserUtil.parseAmount(row[balanceKey]),\r\n                    type: 'ONLINE',\r\n                };\r\n                if (row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.WITHDRAWAL_KEY}`]) {\r\n                    out.Debit = fileParserUtil.parseAmount(\r\n                        row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.WITHDRAWAL_KEY}`]);\r\n                }\r\n                if (row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DEPOSIT_KEY}`]) {\r\n                    out.Credit = fileParserUtil.parseAmount(\r\n                        row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DEPOSIT_KEY}`]);\r\n                }\r\n                return out;\r\n            });\r\n        }\r\n        return trans;\r\n    },\r\n};\r\nexport default fileParserUtil;\r\n","import React, { useCallback, useState, useContext, useMemo } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody,\r\n} from '@mui/material';\r\nimport AppContext from '../../services';\r\nimport { Transaction } from '../../services/service-types';\r\nimport './index.css';\r\n\r\nexport type FilePreviewProps = {\r\n    name: string;\r\n    xlsData: Transaction[];\r\n}\r\nexport const FilePreview = (props: FilePreviewProps) => {\r\n    const { xlsData: rows, name } = props;\r\n    const months: { [key: string]: string; } = useMemo(() => {\r\n        const monthList: { [key: string]: string; } = {};\r\n        rows.forEach((row) => {\r\n            const month = moment(row.Date).format('MMM-YY');\r\n            monthList[month] = month;\r\n        });\r\n        return monthList;\r\n    }, [rows]);\r\n    const monthsArray = Object.values(months);\r\n    const [selMonth, setSelMonth] = useState(monthsArray.length === 1 ? monthsArray[0] : '');\r\n    const { appData } = useContext(AppContext);\r\n    appData.transSheetMonth = selMonth;\r\n    const handleMonthChange = useCallback((e: any) => {\r\n        if (e.target.value) {\r\n            appData.transSheetMonth = e.target.value;\r\n            setSelMonth(e.target.value);\r\n        }\r\n    }, [appData]);\r\n    let filteredRows = rows;\r\n    if (selMonth) {\r\n        filteredRows = rows.filter((row) => moment(row.Date).format('MMM-YY') === selMonth);\r\n        appData.transactions = filteredRows;\r\n    }\r\n    const saveSheet = useCallback(() => {\r\n        // gsheetUtil.addSheet({\r\n        //     headerValues: [\r\n        //         'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category',\r\n        //     ],\r\n        //     title: 'Online Transactions',\r\n        // }).then((sheet) => {\r\n        //     resolve([]);\r\n        // });\r\n    }, []);\r\n    return (\r\n        <>\r\n            <div className=\"preview-header\">\r\n                <div>\r\n                    File: <h4>{name}</h4>\r\n                </div>\r\n                {/* <div className=\"tools\">\r\n                    <Button variant=\"outlined\" onClick={saveSheet}>Save Sheet</Button>\r\n                </div> */}\r\n                {/* <div className=\"month-filter\">\r\n                    Month: &nbsp;\r\n                    <Select\r\n                        value={selMonth}\r\n                        onChange={handleMonthChange}\r\n                        displayEmpty\r\n                        inputProps={{ 'aria-label': 'Month Filter' }}\r\n                    >\r\n                        <MenuItem value=\"\"><em>Select a Month:</em></MenuItem>\r\n                        {monthsArray.map((month) => (\r\n                            <MenuItem value={month}>{month}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </div> */}\r\n            </div>\r\n            <TableContainer className=\"xls-file-preview\" component={Paper}>\r\n                <Table size=\"small\" stickyHeader aria-label=\"Parsed Bank Transactions\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>#</TableCell>\r\n                            <TableCell>Date</TableCell>\r\n                            <TableCell>Description</TableCell>\r\n                            <TableCell align=\"right\">Cheque No.</TableCell>\r\n                            <TableCell align=\"right\">Debit</TableCell>\r\n                            <TableCell align=\"right\">Credit</TableCell>\r\n                            <TableCell align=\"right\">Total</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {filteredRows.map((row, index) => (\r\n                            <TableRow key={row.Description}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {index + 1}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {moment(row.Date).format('DD-MM-YYYY')}\r\n                                </TableCell>\r\n                                <TableCell>{row.Description}</TableCell>\r\n                                <TableCell align=\"right\">{row['Cheque No']}</TableCell>\r\n                                <TableCell align=\"right\">{row.Debit}</TableCell>\r\n                                <TableCell align=\"right\">{row.Credit}</TableCell>\r\n                                <TableCell align=\"right\">{row.Total}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\nexport default FilePreview;\r\n","import moment from 'moment';\r\nimport React, { useCallback, useState, useEffect } from 'react';\r\nimport { Button } from '@mui/material';\r\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\r\n\r\nfunction FileSave(props: { data: { [key: string]: any }[] }) {\r\n    const { data } = props;\r\n    const [msg, setMsg] = useState('');\r\n    useEffect(() => {\r\n        gsheetUtil.init();\r\n    }, []);\r\n\r\n    const saveSheet = useCallback(async () => {\r\n        const sheetTitle = 'Online Transactions';\r\n        const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\r\n        if (!sheet) {\r\n            await gsheetUtil.addSheet({\r\n                headerValues: [\r\n                    'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category', 'Flat',\r\n                ],\r\n                title: sheetTitle,\r\n            });\r\n        }\r\n        const sheetData = (JSON.parse(JSON.stringify(data)) as any[]).map((row) => {\r\n            row.Date = moment(row.Date).format('DD-MM-YYYY');\r\n            return row;\r\n        });\r\n        await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\r\n        setMsg('Sheet Updated');\r\n    }, [data]);\r\n    return (\r\n        <>\r\n            <p>{msg}</p>\r\n            <div className=\"tools\">\r\n                <Button variant=\"outlined\" onClick={saveSheet}>Save Sheet</Button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FileSave;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    Alert, Stepper, Typography, Step, StepLabel, Button,\r\n} from '@mui/material';\r\nimport FileUpload from '../file-upload';\r\nimport fileParserUtil from '../../services/xlsjs';\r\nimport FilePreview from '../file-preview';\r\nimport FileSave from '../file-save';\r\nimport { Transaction } from '../../services/service-types';\r\nimport { GoogleSheet } from '../../services/redux/google-sheet/sheet-types';\r\nimport './index.css';\r\nimport dataUtils from './data-utils';\r\n\r\nfunction getSteps() {\r\n    return ['File Upload', 'File Preview', 'Save'];\r\n}\r\n\r\nexport const OnlineTransactionParser = () => {\r\n    const { sheetConfig } : GoogleSheet = useSelector((state: any) => state.sheet);\r\n    const [errorMsg, setErrorMsg] = useState<string>('');\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [fileName, setFileName] = useState('');\r\n    const [bankTransactions, setBankTransactions] = useState<Transaction[]>([]);\r\n    const parseXLS = useCallback((file: File) => {\r\n        setFileName(file.name);\r\n        fileParserUtil.parseXLS(file).then((resp: Transaction[]) => {\r\n            sheetConfig.appData.transactions = resp;\r\n            resp.reverse();\r\n            setBankTransactions(resp);\r\n            setErrorMsg('');\r\n            setActiveStep(1);\r\n        });\r\n    }, [sheetConfig.appData]);\r\n    const getStepContent = useCallback((step: number) => {\r\n        switch (step) {\r\n        case 0:\r\n            return (<FileUpload onUpload={parseXLS} />);\r\n        case 1:\r\n            return (<FilePreview name={fileName} xlsData={bankTransactions} />);\r\n        case 2:\r\n            return (<FileSave data={bankTransactions as any} />);\r\n        default:\r\n            return 'Unknown step';\r\n        }\r\n    }, [bankTransactions, parseXLS, fileName]);\r\n    const [skipped, setSkipped] = useState(new Set<number>());\r\n    const steps = getSteps();\r\n\r\n    const isStepOptional = (step: number) => false;\r\n\r\n    const isStepSkipped = useCallback((step: number) => skipped.has(step), [skipped]);\r\n\r\n    const handleNext = useCallback(async () => {\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n        switch (activeStep) {\r\n        case 0: {\r\n            if (fileName) {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                setErrorMsg('');\r\n            } else {\r\n                setErrorMsg('Select a file.');\r\n            }\r\n            break;\r\n        }\r\n        case 1:\r\n        default:\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            setErrorMsg('');\r\n        }\r\n        setSkipped(newSkipped);\r\n    }, [activeStep, fileName, isStepSkipped, skipped]);\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleSkip = () => {\r\n        if (!isStepOptional(activeStep)) {\r\n            // You probably want to guard against something like this,\r\n            // it should never occur unless someone's actively trying to break something.\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped((prevSkipped) => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        });\r\n    };\r\n    const handleReset = useCallback(() => {\r\n        setActiveStep(0);\r\n    }, []);\r\n    return (\r\n        <div className=\"wizard\">\r\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n            <div>\r\n                <Stepper activeStep={activeStep}>\r\n                    {steps.map((label, index) => {\r\n                        const stepProps: { completed?: boolean } = {};\r\n                        const labelProps: { optional?: React.ReactNode } = {};\r\n                        if (isStepOptional(index)) {\r\n                            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n                        }\r\n                        if (isStepSkipped(index)) {\r\n                            stepProps.completed = false;\r\n                        }\r\n                        return (\r\n                            <Step key={label} {...stepProps}>\r\n                                <StepLabel {...labelProps}>{label}</StepLabel>\r\n                            </Step>\r\n                        );\r\n                    })}\r\n                </Stepper>\r\n                <div>\r\n                    {activeStep === steps.length && (\r\n                        <div>\r\n                            <Typography>\r\n                                All steps completed - you&apos;re finished\r\n                            </Typography>\r\n                            <Button onClick={handleReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                    {activeStep !== steps.length && (\r\n                        <div>\r\n                            <Typography>\r\n                                {getStepContent(activeStep)}\r\n                            </Typography>\r\n                            <div>\r\n                                <Button\r\n                                    disabled={activeStep === 0}\r\n                                    onClick={handleBack}\r\n                                >\r\n                                    Back\r\n                                </Button>\r\n                                {isStepOptional(activeStep) && (\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleSkip}\r\n                                    >\r\n                                        Skip\r\n                                    </Button>\r\n                                )}\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleNext}\r\n                                >\r\n                                    {(activeStep === steps.length - 1 && 'Save') || 'Next'}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OnlineTransactionParser;\r\n","import React from 'react';\r\nimport OnlineTransactionParser from '../components/online-transactions';\r\n\r\nconst OnlineTransactions: React.FC = () => (\r\n    <OnlineTransactionParser />\r\n);\r\n\r\nexport default OnlineTransactions;\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\nimport { TextField, Typography, Container, Box } from '@mui/material';\r\nimport CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';\r\nimport { decrypt, encrypt } from '../../services';\r\nimport './key.css';\r\n\r\nconst EncryptKeyComponent = () => {\r\n    const [key, setKey] = useState('');\r\n    const [encryptedValue, setEncryptedValue] = useState('');\r\n    const [decryptedValue, setDecryptedValue] = useState('');\r\n    const [copyMessage, setCopyMessage] = useState('');\r\n\r\n    const handleChange = useCallback((e: any) => {\r\n        const newKey = e.target.value;\r\n        setKey(newKey);\r\n        const eKey = encrypt(newKey);\r\n        setEncryptedValue(eKey);\r\n        setDecryptedValue(decrypt(eKey));\r\n    }, []);\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(encryptedValue);\r\n        setCopyMessage('Encrypted value copied to clipboard!');\r\n        setTimeout(() => {\r\n            setCopyMessage('');\r\n        }, 3000);\r\n    }, [encryptedValue]);\r\n\r\n    const decryptLabel = useMemo(() => {\r\n        let out = <>Decrypted Value</>;\r\n        if (key === decryptedValue) {\r\n            out = <>Decrypted Value <CheckCircleRoundedIcon className=\"encrypt-check\" /> </>;\r\n        }\r\n        return out;\r\n    }, [decryptedValue, key]);\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Key Encryption\r\n            </Typography>\r\n            <TextField\r\n                label=\"Enter Key\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={key}\r\n                onChange={handleChange}\r\n            />\r\n            {encryptedValue && (\r\n                <Box marginTop=\"20px\">\r\n                    <TextField\r\n                        label=\"Encrypted Value\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        value={encryptedValue}\r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}\r\n                        onClick={handleCopy}\r\n                    />\r\n                    {copyMessage && (\r\n                        <Typography variant=\"body2\" color=\"primary\">\r\n                            {copyMessage}\r\n                        </Typography>\r\n                    )}\r\n                </Box>\r\n            )}\r\n            {decryptedValue && (\r\n                <Box marginTop=\"20px\">\r\n                    <TextField\r\n                        label={decryptLabel}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"normal\"\r\n                        value={decryptedValue}\r\n                        InputProps={{\r\n                            readOnly: true,\r\n                        }}\r\n                    />\r\n                </Box>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EncryptKeyComponent;\r\n","import React from 'react';\r\nimport KeyGen from '../../components/key-gen';\r\n\r\nfunction Key() {\r\n    return (\r\n        <KeyGen />\r\n    );\r\n}\r\n\r\nexport default Key;\r\n","import React from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport CashTransactions from './workspaces/cash';\r\nimport Categorizer from './workspaces/categorizer';\r\nimport BillParser from './workspaces/new-bills';\r\nimport OnlineTransactionParser from './workspaces/online';\r\nimport KeyGen from './workspaces/key';\r\n\r\nfunction AppRoutes() {\r\n    return (\r\n        <Routes>\r\n            <Route>\r\n                <Route path=\"/\" element={<OnlineTransactionParser />} />\r\n                <Route path=\"/cat\" element={<Categorizer />} />\r\n                <Route path=\"/bills\" element={<BillParser />} />\r\n                <Route path=\"/cash\" element={<CashTransactions />} />\r\n                <Route path=\"/gen-key\" element={<KeyGen />} />\r\n            </Route>\r\n        </Routes>\r\n    );\r\n}\r\n\r\nexport default AppRoutes;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Link } from 'react-router-dom';\r\nimport Alert from '@mui/material/Alert';\r\nimport { Provider } from 'react-redux';\r\nimport KeyboardDoubleArrowLeftIcon from '@mui/icons-material/KeyboardDoubleArrowLeft';\r\nimport KeyboardDoubleArrowRightIcon from '@mui/icons-material/KeyboardDoubleArrowRight';\r\nimport CategoryIcon from '@mui/icons-material/Category';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport CurrencyRupeeIcon from '@mui/icons-material/CurrencyRupee';\r\nimport HandymanIcon from '@mui/icons-material/Handyman';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport { Sidebar, Menu, MenuItem } from 'react-pro-sidebar';\r\nimport store from './services/redux/store';\r\nimport SecretDialog from './components/mapping/secret-dialog';\r\nimport { getConfig, setCredentials } from './services';\r\nimport AppRoutes from './app-routes';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n    const [errorMsg, setErrorMsg] = useState<string>('');\r\n    const [secret, setSecret] = useState('');\r\n    const [secretSuccess, setSecretSuccess] = useState<boolean>(!!getConfig().secret);\r\n    useEffect(() => {\r\n        if (secret) {\r\n            const out = setCredentials(secret);\r\n            if (!out.res) {\r\n                setErrorMsg('Wrong secret. Enter it again.');\r\n                setSecret('');\r\n            } else {\r\n                setErrorMsg('');\r\n                setSecretSuccess(true);\r\n            }\r\n        }\r\n    }, [secret]);\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <header className=\"app-header\">\r\n                    <img src=\"/images/ssfa.png\" alt=\"Suraksha Sunflower Apartment\" width=\"80px\" height=\"60px\" />\r\n                    <span>Suraksha Sunflower </span>\r\n                </header>\r\n                <div className=\"app\">\r\n                    <Sidebar collapsed={collapsed}>\r\n                        <Menu>\r\n                            <MenuItem icon={<HomeIcon />} title=\"Parse Online Transactions\">\r\n                                <Link to=\"/\">Parse Online Transactions</Link>\r\n                            </MenuItem>\r\n                            <MenuItem icon={<CategoryIcon />} title=\"Categorize Transactions\">\r\n                                <Link to=\"/cat\">Categorize Transactions</Link>\r\n                            </MenuItem>\r\n                            <MenuItem icon={<ReceiptIcon />} title=\"Upload Bills\">\r\n                                <Link to=\"/bills\">Upload Bills</Link>\r\n                            </MenuItem>\r\n                            <MenuItem icon={<CurrencyRupeeIcon />} title=\"Cash Transactions\">\r\n                                <Link to=\"/cash\">Cash Transactions</Link>\r\n                            </MenuItem>\r\n                            <MenuItem icon={<HandymanIcon />} title=\"Generate Encrypted Keys\">\r\n                                <Link to=\"/gen-key\">Encrypt Keys</Link>\r\n                            </MenuItem>\r\n                            {/* <SubMenu title=\"Components\">\r\n                            <MenuItem>Component 1</MenuItem>\r\n                            <MenuItem>Component 2</MenuItem>\r\n                        </SubMenu> */}\r\n                        </Menu>\r\n                        <div className=\"sb-footer\">\r\n                            {!collapsed &&\r\n                            <KeyboardDoubleArrowLeftIcon onClick={() => setCollapsed(true)} />}\r\n                            {collapsed &&\r\n                            <KeyboardDoubleArrowRightIcon onClick={() => setCollapsed(false)} />}\r\n                        </div>\r\n                    </Sidebar>\r\n                    <div className=\"workspace\">\r\n                        {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n                        {!secretSuccess && (\r\n                            <SecretDialog errorMsg={errorMsg} handleSecret={setSecret} />\r\n                        )}\r\n                        {secretSuccess && <AppRoutes />}\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './app';\r\nimport './index.css';\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container!);\r\nroot.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n);\r\n\r\nexport default {};\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}