{"version":3,"sources":["services/redux/transactions/trans-types.ts","services/redux/transactions/trans-reducer.ts","services/index.ts","services/redux/google-sheet/sheet-types.ts","services/redux/bills/bills-types.ts","services/redux/google-sheet/sheet-reducer.ts","services/redux/bills/bills-reducer.ts","services/googleapis/gsheet-util-impl.ts","services/redux/root-reducer.js","services/redux/store.ts","components/file-upload/index.tsx","services/xlsjs/index.ts","components/file-preview/index.tsx","services/cat-map/cat-index.ts","services/cat-map/month-index.ts","services/maint-map/flat-index.ts","services/maint-map/month-index.ts","components/file-save/index.tsx","components/online-transactions/index.tsx","services/cat-map/cat-map-types.ts","workspaces/online.tsx","services/redux/google-sheet/sheet-actions.ts","utils/trans-category.ts","utils/logical-executor.ts","utils/query-executor.ts","utils/col-query-executor.ts","utils/trans-map-executor.ts","services/cat-map/cat-map.ts","services/maint-map/maint-map.ts","utils/maint-map-executor.ts","services/redux/transactions/trans-actions.ts","components/categorizer/categorize-cash.tsx","components/categorizer/categorize-online.tsx","components/categorizer/index.tsx","workspaces/categorizer.tsx","services/googleapis/google-token.ts","services/googleapis/drive-util.ts","services/ocr/expense-list.ts","services/ocr/parser-utils.ts","services/ocr/index.ts","workspaces/new-bills/bill-utils.ts","workspaces/new-bills/expense-types.ts","workspaces/new-bills/bill-grid.tsx","workspaces/new-bills/expense.tsx","workspaces/new-bills/folder-grid.tsx","services/sheet/index.ts","workspaces/new-bills/index.tsx","services/chatgpt/index.ts","components/cash/index.tsx","workspaces/cash.tsx","components/mapping/secret-dialog/index.tsx","app.tsx","index.tsx"],"names":["TransActions","initValues","loading","cashTransData","undefined","onlineTransData","monthlyCatSplit","error","transReducder","state","action","type","LOAD_TRANS","LOAD_CASH_TRANS_SUCCESS","payload","LOAD_ONLINE_TRANS_SUCCESS","LOAD_CASH_TRANS_FAILURE","LOAD_ONLINE_TRANS_FAILURE","UPDATE_MONTHLY_SPLIT","RESET_MONTHLY_SPLIT","UPDATE_MONTHLY_MAINT_SPLIT","monthlyMaintSplit","RESET_MONTHLY_MAINT_SPLIT","RESET_TRANS","setCredentials","secret","out","res","emailB","CryptoJS","AES","decrypt","appConfig","ENC_CLIENT_EMAIL","pkB","ENC_PRIVATE_KEY","chatGPTPK","ENC_CHAT_GPT_KEY","googleAPIKey","ENC_GOOGLE_API_KEY","clientEmail","toString","enc","Utf8","privateKey","chatGPTPrivateKey","sessionStorage","setItem","e","flatNumbers","appData","transCategories","key","label","children","map","val","transactionFinYear","moment","format","transSheetMonth","transactions","getItem","SPREADSHEET_ID","doc","GoogleSpreadsheet","getConfig","TransactionFilters","AppContext","React","createContext","SHEET_ACTION_TYPES","BillsActions","initialValue","initError","sheetConfig","sheetInfo","Map","sheetReducer","INIT","initializing","INIT_SUCCESS","INIT_FAILURE","SET_SHEET_INFO","gsheetInstance","isLoading","data","config","encBotId","listURL","fetchURL","downloadURL","updateURL","layoutData","events","billsReducer","SUCCESS","FAILURE","SET_CONFIG","ADD_EVENTS","rootReducer","combineReducers","sheet","trans","bills","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thunk","FileUpload","props","useState","errorMsg","setErrorMsg","onUpload","useCallback","fileObject","onError","errMsg","Alert","severity","className","extensions","onChange","XLS_TRANS_KEY_PREFIX","xLSTransKeys","fileParserUtil","parseXLS","file","Promise","resolve","reader","FileReader","onload","workBook","XLSX","read","target","result","worksheet","Sheets","SheetNames","utils","sheet_to_json","parseTransactions","readAsBinaryString","parseAmount","input","parseFloat","replace","replaceAll","getWorkingColumnKeyFromArray","cols","find","col","length","dateKey","filter","row","includes","toDate","balanceKey","descKey","chqNoKey","Date","Description","Debit","Credit","Total","useStyles","makeStyles","table","minWidth","FilePreview","rows","xlsData","name","months","useMemo","monthList","forEach","month","monthsArray","Object","values","selMonth","setSelMonth","classes","useContext","value","filteredRows","TableContainer","component","Paper","Table","size","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","index","scope","CAT_INDEX","BWSSB","Diesel","Bescom","Security","MONTH_INDEX","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","GsheetUtilImpl","currentSheet","initialized","this","reject","useServiceAccountAuth","client_email","private_key","then","loadInfo","catch","console","log","sheetTitle","getSheetByTitle","sheetObj","headers","headerValues","colCount","columnCount","j","getCell","push","rowCount","i","allValues","head","formattedValue","some","sheetsByTitle","sheetId","loadCells","sheetsById","addRow","addRows","getRows","limit","offset","len","column","cells","saveCells","addSheet","json","updateSheet","keys","monthData","categories","mIndex","colIndex","monthIndex","cat","rowIndex","catIndex","saveUpdatedCells","flats","maintIndex","maintenenceMonthIndex","flat","sheetName","searchColumns","updateColumnName","updateValue","recordIndex","findIndex","entries","every","columnName","recordToUpdate","save","Error","startingRow","cell","newVal","appendRows","init","getInstance","FileSave","msg","setMsg","useEffect","gsheetUtil","saveSheet","title","sheetData","JSON","parse","stringify","updateSheetWithJSON","Button","variant","onClick","theme","createStyles","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","LogicalOpr","OnlineTransactionParser","useSelector","activeStep","setActiveStep","fileName","setFileName","bankTransactions","setBankTransactions","resp","reverse","getStepContent","step","Set","skipped","setSkipped","steps","isStepSkipped","has","handleNext","newSkipped","delete","prevActiveStep","handleReset","Stepper","stepProps","labelProps","completed","Step","StepLabel","Typography","disabled","color","OnlineTransactions","initializeGoogleSheet","dispatch","initFailure","TransCategory","LogicalExecutor","inpQuery","query","execute","opr","or","child","nor","xor","nand","not","and","QueryExecutor","fieldVal","queryVal","Array","isArray","item","qval","toLowerCase","indexOf","reg","RegExp","match","ColQueryExecutor","transaction","qExecutor","run","TransMapExecutor","catMapJson","catFieldMap","cashTransactions","ctrans","Category","category","colQuery","MaintMapExecutor","Flat","loadTransactions","loadCashTransactionSuccess","loadOnlineTransactionSuccess","loadCashTransactionFailure","loadOnlineTransactionFailure","filterTransactions","doMonthlyCatSplit","monthlySplit","datum","date","replacedDate","isDebit","amount","doMonthlyMaintSplit","CategorizeCash","useDispatch","getSheetByTitleAsJson","maintMapJson","saveSheetWithJSON","message","fetchTransactions","CircularProgress","header","CategorizeOnline","fetchOnlineTransactions","Categorizer","setMessage","setType","transData","splitMonthly","splitMonthlyMaintenance","filteredTransData","saveCategorized","updateCategorySheet","saveMaitenenceSplit","udpateMaintenanceSheet","isStepOptional","isCompletedStep","handleBack","handleSkip","optional","src","Categorize","generateTokenAssertion","expiresIn","Math","floor","now","email","clientId","claims","iss","sub","aud","exp","iat","jti","uuid","token","jwt","sign","algorithm","generateAuthToken","tokenAssertion","body","grant_type","client_id","assertion","axios","post","response","status","access_token","VERIFIED_FILE_PREFIX","BILLS_FOLDER_ID","fetchFilesFromFolder","folderId","apiKey","encodeURI","get","files","renameFile","fileId","authToken","patch","Authorization","parseExpenseInfo","text","expenseTypes","expenseList","description","words","split","word","test","findTopMatchingText","texts","rankMap","rank","set","valueArray","from","sortedTexts","sort","a","b","dataURItoBlob","dataURI","byteString","atob","unescape","mimeString","ia","Uint8Array","charCodeAt","Blob","getDatafromDataURI","blob","File","formData","FormData","append","apikey","fetchFiles","setFilesList","saveOnlineTransactionWithBill","searchUpdateOnlineTransWithBills","getDriveFileURL","debit","billURL","searchUpdateRecord","saveCashTransSheet","getDataInSheetFormat","selectedBill","Bill","setCategory","extractBillData","bill","promise","parsedFormData","imageURL","getVision","id","parsedData","ParsedResults","ParsedText","TransactionType","BillGrid","handleClick","Grid","container","xs","mimeType","startsWith","alt","style","height","cursor","padding","textAlign","ExpenseForm","callback","image","handleClose","expenseCategories","transactionType","setData","errorData","setErrorData","handleChange","event","prev","handleSubmit","formDataClone","Dialog","open","onClose","fullWidth","scroll","DialogTitle","DialogContent","FormControl","margin","RadioGroup","FormControlLabel","control","Radio","FormHelperText","TextField","placeholder","helperText","InputLabel","Select","MenuItem","DialogActions","FolderGrid","folders","folder","TransSheet","initProm","sheetIntialized","sheets","getSheet","expList","getColumnWithSheet","filteredExpList","expense","Desc","ChqNo","Amount","Balance","Type","monthSheet","parseMonthlySheet","fileData","sData","transCompare","pushSheetData","sheetTrans","getMonthData","fetchedData","mergeSheetData","NewBills","showLoader","setShowLoader","fileList","openDialog","setOpenDialog","setSelectedBill","selectedFolder","setSelectedFolder","setFormData","handleFolderClick","fileInfo","Cash","finalData","setExpenseCategories","transSheet","getExpenseCategories","expCat","ChatGPTService","openAI","chatGPTConfig","Configuration","organization","OpenAIApi","createCompletion","model","prompt","max_tokens","temperature","top_p","n","stream","logprobs","stop","instance","CashTransactions","camera","useRef","setImage","fullscreen","setFullscreen","takePhoto","cameraRef","current","toggleFullScreen","parentClassName","imageData","setImageData","getCompleted","IconButton","ref","facingMode","errorMessages","SecretDialog","setSecret","handleOk","handleSecret","handleEnter","keyCode","which","keepMounted","DialogContentText","Input","onKeyPress","Home","Cat","Bills","App","secretSuccess","setSecretSuccess","collapsed","setCollapsed","iconShape","icon","to","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54f840f2.chunk.js","sourcesContent":["import { FlatCategory } from '../../../utils/flat-category';\r\nimport { TransCategory } from '../../../utils/trans-category';\r\n\r\nexport enum TransActions {\r\n    LOAD_TRANS = 'LOAD_TRANS',\r\n    LOAD_CASH_TRANS_SUCCESS = 'LOAD_CASH_TRANS_SUCCESS',\r\n    LOAD_ONLINE_TRANS_SUCCESS = 'LOAD_ONLINE_TRANS_SUCCESS',\r\n    LOAD_CASH_TRANS_FAILURE = 'LOAD_CASH_TRANS_FAILURE',\r\n    LOAD_ONLINE_TRANS_FAILURE = 'LOAD_ONLINE_TRANS_FAILURE',\r\n    UPDATE_MONTHLY_SPLIT = 'UPDATE_MONTHLY_SPLIT',\r\n    RESET_MONTHLY_SPLIT = 'RESET_MONTHLY_SPLIT',\r\n    UPDATE_MONTHLY_MAINT_SPLIT = 'UPDATE_MONTHLY_MAINT_SPLIT',\r\n    RESET_MONTHLY_MAINT_SPLIT = 'RESET_MONTHLY_MAINT_SPLIT',\r\n    RESET_TRANS = 'RESET_TRANS',\r\n}\r\nexport type MonthlyCatSplit = {\r\n    [month: string]: {\r\n        [category: string]: number;\r\n    };\r\n};\r\n\r\nexport type MonthlyMaintSplit = {\r\n    [month: string]: {\r\n        [category: string]: number;\r\n    };\r\n};\r\nexport type TransData = {\r\n    loading: boolean;\r\n    cashTransData?: { [type: string]: any }[];\r\n    onlineTransData?: { [type: string]: any }[];\r\n    monthlyCatSplit?: MonthlyCatSplit;\r\n    monthlyMaintSplit?: MonthlyMaintSplit;\r\n    error: string;\r\n}\r\n\r\nexport type TransactionType = {\r\n    Date: string | null;\r\n    Description: string;\r\n    'Cheque No'?: string | null;\r\n    Debit: number | null;\r\n    Credit: number | null;\r\n    Total: number;\r\n    Category?: TransCategory;\r\n    Flat?: FlatCategory;\r\n    Bill?: string;\r\n};\r\n","import { TransData, TransActions } from './trans-types';\r\n\r\nconst initValues: TransData = {\r\n    loading: false,\r\n    cashTransData: undefined,\r\n    onlineTransData: undefined,\r\n    monthlyCatSplit: undefined,\r\n    error: '',\r\n};\r\n\r\nconst transReducder = (state = initValues, action: { type: TransActions, payload: any}) => {\r\n    switch (action.type) {\r\n    case TransActions.LOAD_TRANS:\r\n        return {\r\n            ...state,\r\n            loading: true,\r\n        };\r\n    case TransActions.LOAD_CASH_TRANS_SUCCESS:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            cashTransData: action.payload as any,\r\n            error: '',\r\n        };\r\n    case TransActions.LOAD_ONLINE_TRANS_SUCCESS:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            onlineTransData: action.payload as any,\r\n            error: '',\r\n        };\r\n    case TransActions.LOAD_CASH_TRANS_FAILURE:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            cashTransData: undefined,\r\n            error: action.payload as any,\r\n        };\r\n    case TransActions.LOAD_ONLINE_TRANS_FAILURE:\r\n        return {\r\n            ...state,\r\n            loading: false,\r\n            onlineTransData: undefined,\r\n            error: action.payload as any,\r\n        };\r\n    case TransActions.UPDATE_MONTHLY_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyCatSplit: action.payload,\r\n            loading: false,\r\n        };\r\n    case TransActions.RESET_MONTHLY_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyCatSplit: undefined,\r\n        };\r\n    case TransActions.UPDATE_MONTHLY_MAINT_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyMaintSplit: action.payload,\r\n            loading: false,\r\n        };\r\n    case TransActions.RESET_MONTHLY_MAINT_SPLIT:\r\n        return {\r\n            ...state,\r\n            monthlyMaintSplit: undefined,\r\n        };\r\n    case TransActions.RESET_TRANS:\r\n        return initValues;\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default transReducder;\r\n","/* eslint-disable max-len */\r\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\r\nimport React from 'react';\r\nimport CryptoJS from 'crypto-js';\r\nimport moment from 'moment';\r\nimport { ApplicationConfig, AppData, CatItem } from './service-types';\r\n\r\nexport const setCredentials = (secret: string = '') => {\r\n    const out = {\r\n        res: false,\r\n        error: '',\r\n    };\r\n    if (secret) {\r\n        const emailB = CryptoJS.AES.decrypt(appConfig.ENC_CLIENT_EMAIL, secret);\r\n        const pkB = CryptoJS.AES.decrypt(appConfig.ENC_PRIVATE_KEY, secret);\r\n        const chatGPTPK = CryptoJS.AES.decrypt(appConfig.ENC_CHAT_GPT_KEY, secret);\r\n        const googleAPIKey = CryptoJS.AES.decrypt(appConfig.ENC_GOOGLE_API_KEY, secret);\r\n        try {\r\n            appConfig.clientEmail = emailB.toString(CryptoJS.enc.Utf8);\r\n            appConfig.privateKey = pkB.toString(CryptoJS.enc.Utf8);\r\n            appConfig.googleAPIKey = googleAPIKey.toString(CryptoJS.enc.Utf8);\r\n            appConfig.secret = secret;\r\n            appConfig.chatGPTPrivateKey = chatGPTPK.toString(CryptoJS.enc.Utf8);\r\n            sessionStorage.setItem('session-id', secret);\r\n            out.res = true;\r\n        } catch (e) {\r\n            appConfig.secret = '';\r\n            out.res = false;\r\n            out.error = 'Invalid Secret Provided';\r\n        }\r\n    } else {\r\n        appConfig.secret = '';\r\n        out.res = false;\r\n        out.error = 'Empty Secret Set';\r\n    }\r\n    return out;\r\n};\r\nconst flatNumbers = [\r\n    '001', '002', '003', '004', '005', '007', '008', '009', '010', '011', '012',\r\n    '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112',\r\n    '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212',\r\n    '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312',\r\n    '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412',\r\n];\r\n\r\nconst transCategories: CatItem[] = [\r\n    {\r\n        key: 'maintenance',\r\n        label: 'Maintenance',\r\n        children: flatNumbers.map((val) => ({\r\n            key: `maintenance-${val}`,\r\n            label: val,\r\n        })),\r\n    },\r\n    {\r\n        key: 'corpus',\r\n        label: 'Corpus Fund',\r\n        children: flatNumbers.map((val) => ({\r\n            key: `corpus-${val}`,\r\n            label: val,\r\n        })),\r\n    },\r\n    {\r\n        key: 'monthly',\r\n        label: 'Monthly Expenses',\r\n        children: [],\r\n    },\r\n    {\r\n        key: 'others',\r\n        label: 'Others',\r\n        children: [\r\n            {\r\n                key: 'fine',\r\n                label: 'Fine',\r\n            },\r\n            {\r\n                key: 'extra',\r\n                label: 'Other Income',\r\n            },\r\n            {\r\n                key: 'account-transfer',\r\n                label: 'FD Deposit',\r\n            },\r\n            {\r\n                key: 'tenant-deposit',\r\n                label: 'Tenant Deposit',\r\n            },\r\n            {\r\n                key: 'rd-deposit',\r\n                label: 'Deposit to RD account',\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst appData: AppData = {\r\n    transCategories,\r\n    transactionFinYear: moment().format('YY'),\r\n    transSheetMonth: '',\r\n    transactions: [],\r\n};\r\n\r\nexport const setSheetMonth = (sheetTitle: string) => {\r\n    appData.transSheetMonth = sheetTitle;\r\n};\r\n\r\nconst appConfig: ApplicationConfig = {\r\n    secret: sessionStorage.getItem('session-id') || '',\r\n    SPREADSHEET_ID: '16Q4fGH3MHV4yFZn-Ws0tDpz57hXLjOE_wDSXilJCDZ0',\r\n    ENC_CLIENT_EMAIL: 'U2FsdGVkX19lrOkAqkI1YRZkdHSjXZc+dtJNUzOhSlqaydB6Gxi4lm9MpS7+2/W7OtInfOCmh739buu1z1jzT/jJrAeRX2+hKkxc+3qsduw=',\r\n    ENC_PRIVATE_KEY: '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',\r\n    ENC_GOOGLE_API_KEY: 'U2FsdGVkX1+z10t9/VGkdh+xgB9JO7TwDIGpiW5ivAoQrmKV9c77947cJH49fTgzZcc5DSaLNH1jlCpIiLbSuw==',\r\n    ENC_CHAT_GPT_KEY: 'U2FsdGVkX19CE/c8Tng+qxPTykma92uBwnVA8hVNUPhl5desREv8awMfLxjN2ZnKC23rEB6XcYTSzVfgEwgEqQPZuhXq3Ef0cng56m8DqyI=',\r\n    doc: new GoogleSpreadsheet('16Q4fGH3MHV4yFZn-Ws0tDpz57hXLjOE_wDSXilJCDZ0'),\r\n    appData,\r\n};\r\n\r\nexport const getConfig = () => appConfig;\r\n\r\nif (appConfig.secret) {\r\n    setCredentials(appConfig.secret);\r\n}\r\nconst AppContext = React.createContext(appConfig);\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport enum TransactionFilters {\r\n    all = 'All Transaction',\r\n    mapped = 'Only Mapped',\r\n    unmapped = 'Only Unmapped',\r\n}\r\n\r\nexport default AppContext;\r\n","import { ApplicationConfig } from '../../service-types';\r\n\r\nenum SHEET_ACTION_TYPES {\r\n    INIT = 'INIT',\r\n    INIT_SUCCESS = 'GET_SHEET_INFO',\r\n    INIT_FAILURE = 'GET_SHEET_INFO_FAILURE',\r\n    SET_SHEET_INFO = 'SET_SHEET_INFO',\r\n}\r\n\r\nexport type SheetInfo = Map<string, { [key: string]: any }[]>;\r\n\r\nexport type GoogleSheet = {\r\n    initializing?: boolean;\r\n    initError: string;\r\n    sheetConfig: ApplicationConfig;\r\n    sheetInfo: SheetInfo;\r\n};\r\n\r\nexport default SHEET_ACTION_TYPES;\r\n","import { LayoutType } from '../../../lib/layout/layout-types';\r\n\r\nexport enum BillsActions {\r\n    INIT = 'INIT',\r\n    SUCCESS = 'SUCCESS',\r\n    FAILURE = 'FAILURE',\r\n    SET_CONFIG = 'SET_CONFIG',\r\n    ADD_EVENTS = 'ADD_EVENTS',\r\n}\r\n\r\nexport type BillsConfig = {\r\n    encBotId: string;\r\n    listURL: string;\r\n    fetchURL: string;\r\n    downloadURL: string;\r\n    updateURL: string;\r\n};\r\n\r\nexport type BillEventType = 'wizard:next' | 'wizard:back' | 'field:blur';\r\n\r\nexport type BillEvent = {\r\n    id: string;\r\n    type: BillEventType;\r\n    layout: LayoutType;\r\n    state?: 'pending' | 'processing' | 'processed',\r\n    payload?: any;\r\n}\r\nexport type BillsData = {\r\n    isLoading: boolean;\r\n    data: any;\r\n    config: BillsConfig;\r\n    layoutData?: LayoutType;\r\n    error?: any;\r\n    events: BillEvent[];\r\n};\r\n","import { getConfig } from '../..';\r\nimport SHEET_ACTION_TYPES, { GoogleSheet } from './sheet-types';\r\n\r\nconst initialValue: GoogleSheet = {\r\n    initError: '',\r\n    sheetConfig: getConfig(),\r\n    sheetInfo: new Map(),\r\n};\r\nconst sheetReducer = (state: GoogleSheet = initialValue, action: { type: SHEET_ACTION_TYPES, payload: any}) => {\r\n    switch (action.type) {\r\n    case SHEET_ACTION_TYPES.INIT:\r\n        return {\r\n            ...state,\r\n            initializing: true,\r\n        };\r\n    case SHEET_ACTION_TYPES.INIT_SUCCESS:\r\n        return {\r\n            ...state,\r\n            initializing: false,\r\n            appConfig: action.payload,\r\n        };\r\n    case SHEET_ACTION_TYPES.INIT_FAILURE:\r\n        return {\r\n            ...state,\r\n            initializing: false,\r\n            initError: action.payload,\r\n        };\r\n    case SHEET_ACTION_TYPES.SET_SHEET_INFO:\r\n        return {\r\n            ...state,\r\n            sheetInfo: action.payload,\r\n        };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default sheetReducer;\r\n","/* eslint-disable max-len */\r\nimport { BillsData, BillsActions } from './bills-types';\r\n\r\nconst initValues: BillsData = {\r\n    isLoading: false,\r\n    data: {},\r\n    config: {\r\n        encBotId: 'U2FsdGVkX1/0gDV/ibea6VfAgozs8tNyWPB0zt3iRLDsNORNjxOhmloQXZl7ywLjxeQl4Bmxe3iZ7RLdUxi+BA==',\r\n        listURL: 'https://state-tourniquet.000webhostapp.com/suraksha/telegram/get.php',\r\n        fetchURL: 'https://api.telegram.org/bot{{botId}}/getFile?file_id={{fileId}}',\r\n        downloadURL: 'https://api.telegram.org/file/bot{{botId}}/photos/{{filePath}}',\r\n        updateURL: 'https://state-tourniquet.000webhostapp.com/suraksha/telegram/processed.php?id={{recordId}}',\r\n    },\r\n    layoutData: undefined,\r\n    events: [],\r\n};\r\n\r\nconst billsReducer = (state = initValues, action: { type: BillsActions, payload: any}): BillsData => {\r\n    switch (action.type) {\r\n    case BillsActions.INIT:\r\n        return {\r\n            ...state,\r\n            isLoading: true,\r\n            layoutData: action.payload,\r\n        };\r\n    case BillsActions.SUCCESS:\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            data: action.payload,\r\n            error: undefined,\r\n        };\r\n    case BillsActions.FAILURE:\r\n        return {\r\n            ...state,\r\n            isLoading: false,\r\n            data: undefined,\r\n            error: action.payload,\r\n        };\r\n    case BillsActions.SET_CONFIG:\r\n        return {\r\n            ...state,\r\n            config: action.payload,\r\n        };\r\n    case BillsActions.ADD_EVENTS:\r\n        return {\r\n            ...state,\r\n            events: [...state.events, action.payload],\r\n        };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default billsReducer;\r\n","import {\r\n    GoogleSpreadsheet,\r\n    GoogleSpreadsheetCell,\r\n    GoogleSpreadsheetRow,\r\n    GoogleSpreadsheetWorksheet,\r\n    WorksheetBasicProperties,\r\n} from 'google-spreadsheet';\r\nimport { getConfig } from '..';\r\nimport catIndex from '../cat-map/cat-index';\r\nimport monthIndex from '../cat-map/month-index';\r\nimport maintIndex from '../maint-map/flat-index';\r\nimport maintenenceMonthIndex from '../maint-map/month-index';\r\nimport { ApplicationConfig } from '../service-types';\r\n\r\n// Config variables\r\nexport interface GSheetUtil {\r\n    currentSheet?: string;\r\n    init: () => Promise<GoogleSpreadsheet>;\r\n    getSpreadSheet: () => GoogleSpreadsheet | undefined;\r\n    getSheetByTitle: (sheetTitle: string) => Promise<GoogleSpreadsheetWorksheet>;\r\n    getSheetByTitleAsJson: (sheetTitle: string) => Promise<{ [key: string]: any }[]>;\r\n    getSheet: (sheetId: string) => Promise<GoogleSpreadsheetWorksheet>;\r\n    appendSheet: (sheetId: string, row: { [key: string]: string | number }) => Promise<GoogleSpreadsheetRow>;\r\n    append: (row: { [key: string]: string | number }) => Promise<GoogleSpreadsheetRow>;\r\n    appendRows: (rows: { [key: string]: string | number }[]) => Promise<void>;\r\n    getSheetRow: (sheetId: string, row: number) => Promise<GoogleSpreadsheetRow[]>;\r\n    getRow: (row: number) => Promise<GoogleSpreadsheetRow[]>;\r\n    getColumn: (col: number) => GoogleSpreadsheetCell[];\r\n    getColumnWithSheet: (sheet: GoogleSpreadsheetWorksheet, col: number) => GoogleSpreadsheetCell[];\r\n    getSheetColumn: (sheetId: string, col: number) => GoogleSpreadsheetCell[];\r\n    getSheetCell: (sheetId: string, row: number, column: number) => GoogleSpreadsheetCell;\r\n    getCell: (row: number, column: number) => GoogleSpreadsheetCell;\r\n    saveSheetCells: (sheetId: string, cells: GoogleSpreadsheetCell[]) => Promise<void>;\r\n    saveSheetWithJSON: (json: { [key: string]: any }[]) => Promise<void>;\r\n    updateCategorySheet: (json: { [month: string]: { [cat: string]: any }}) => Promise<void>;\r\n    udpateMaintenanceSheet: (json: { [month: string]: { [flat: string]: any }}) => Promise<void>;\r\n    saveCells: (cells: GoogleSpreadsheetCell[]) => Promise<void>;\r\n    addSheet: (input: WorksheetBasicProperties) => Promise<GoogleSpreadsheetWorksheet>;\r\n    updateSheetWithJSON: (json: { [key: string]: any }[], sheetTitle?: string) => Promise<void>;\r\n    isEmptySheet: (sheet: GoogleSpreadsheetWorksheet) => boolean;\r\n    searchUpdateRecord: (\r\n        sheetName: string,\r\n        searchColumns: Record<string, any>,\r\n        updateColumnName: string,\r\n        updateValue: any) => Promise<void>;\r\n}\r\n\r\nlet gsheetInstance: GSheetUtil;\r\nclass GsheetUtilImpl implements GSheetUtil {\r\n    public currentSheet: string = '';\r\n    public initialized = false;\r\n    private appConfig: ApplicationConfig;\r\n\r\n    public constructor() {\r\n        this.appConfig = getConfig();\r\n    }\r\n\r\n    public init() {\r\n        if (this.initialized) {\r\n            return Promise.resolve(this.appConfig.doc);\r\n        }\r\n        return new Promise<GoogleSpreadsheet>((resolve, reject) => {\r\n            const { doc } = this.appConfig;\r\n            doc.useServiceAccountAuth({\r\n                client_email: this.appConfig.clientEmail || '',\r\n                private_key: this.appConfig.privateKey || '',\r\n            }).then(() => {\r\n                doc.loadInfo().then(() => {\r\n                    this.initialized = true;\r\n                    resolve(doc);\r\n                }).catch((e: any) => {\r\n                    console.log(e);\r\n                });\r\n            }).catch((e: any) => {\r\n                console.log(e);\r\n                reject(e);\r\n            });\r\n        });\r\n    }\r\n\r\n    public getSpreadSheet () {\r\n        return this.appConfig.doc;\r\n    }\r\n\r\n    public async getSheetByTitleAsJson(sheetTitle: string): Promise<{ [key: string]: any; }[]> {\r\n        const sheetInfo: any[] = [];\r\n        const sheetObj = await this.getSheetByTitle(sheetTitle);\r\n        let headers: string[] = sheetObj.headerValues;\r\n        let colCount = sheetObj.columnCount;\r\n        if (!headers || headers.length === 0) {\r\n            headers = [];\r\n            for (let j = 0; j < colCount; j += 1) {\r\n                const { value } = sheetObj.getCell(0, j);\r\n                if (value) {\r\n                    headers.push(sheetObj.getCell(0, j).value.toString());\r\n                }\r\n            }\r\n        }\r\n        colCount = headers.length;\r\n        const { rowCount } = sheetObj;\r\n        for (let i = 1; i < rowCount; i += 1) {\r\n            const sheet: any = {};\r\n            const allValues: any[] = [];\r\n            for (let j = 0; j < colCount; j += 1) {\r\n                const head = headers[j];\r\n                const val = sheetObj.getCell(i, j).formattedValue;\r\n                sheet[head] = val;\r\n                allValues.push(val);\r\n            }\r\n            if (allValues.some((val) => val !== null)) {\r\n                sheetInfo.push(sheet);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return sheetInfo;\r\n    }\r\n\r\n    public async getSheetByTitle(sheetTitle: string) {\r\n        const sheet = this.appConfig.doc?.sheetsByTitle[sheetTitle];\r\n        if (sheet) {\r\n            this.currentSheet = sheet.sheetId;\r\n            await sheet.loadCells();\r\n        }\r\n        return sheet;\r\n    }\r\n\r\n    public async getSheet(sheetId: string) {\r\n        this.currentSheet = sheetId;\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        await sheet.loadCells();\r\n        return sheet;\r\n    }\r\n\r\n    public appendSheet(sheetId: string, row: { [key: string]: string | number; }) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.addRow(row);\r\n    }\r\n\r\n    public append(row: { [key: string]: string | number; }) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.addRow(row);\r\n    }\r\n\r\n    public async appendRows(rows: { [key: string]: string | number; }[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        await sheet.addRows(rows);\r\n    }\r\n\r\n    public getSheetRow(sheetId: string, row: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.getRows({\r\n            limit: 1,\r\n            offset: row,\r\n        });\r\n    }\r\n\r\n    public getRow(row: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.getRows({\r\n            limit: 1,\r\n            offset: row,\r\n        });\r\n    }\r\n\r\n    public getColumn(col: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        const result = [];\r\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\r\n        for (let i = 0; i < len - 1; i += 1) {\r\n            result.push(sheet.getCell(i, col));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getColumnWithSheet(sheet: GoogleSpreadsheetWorksheet, col: number) {\r\n        const result = [];\r\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\r\n        for (let i = 0; i < len - 1; i += 1) {\r\n            result.push(sheet.getCell(i, col));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getSheetColumn(sheetId: string, col: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        const result = [];\r\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\r\n        for (let i = 0; i < len - 1; i += 1) {\r\n            result.push(sheet.getCell(i, col));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public getSheetCell(sheetId: string, row: number, column: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.getCell(row, column);\r\n    }\r\n\r\n    public getCell(row: number, column: number) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.getCell(row, column);\r\n    }\r\n\r\n    public saveSheetCells(sheetId: string, cells: GoogleSpreadsheetCell[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\r\n        return sheet.saveCells(cells);\r\n    }\r\n\r\n    public saveCells(cells: GoogleSpreadsheetCell[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        return sheet.saveCells(cells);\r\n    }\r\n\r\n    public addSheet (input: WorksheetBasicProperties) {\r\n        return this.appConfig.doc.addSheet(input);\r\n    }\r\n\r\n    public async saveSheetWithJSON (json: { [key: string]: any; }[]) {\r\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\r\n        await this.updateSheet(sheet, json);\r\n    }\r\n\r\n    public async updateCategorySheet(json: { [month: string]: { [cat: string]: any; }; }): Promise<void> {\r\n        const sheet = await this.getSheetByTitle('Summary');\r\n        await sheet.loadCells();\r\n        const months = Object.keys(json);\r\n        months.forEach((month) => {\r\n            const monthData = json[month];\r\n            const categories = Object.keys(monthData);\r\n            const mIndex = month.replace(/-\\d+$/, '');\r\n            const colIndex: number = monthIndex[mIndex];\r\n            categories.forEach((cat) => {\r\n                const rowIndex = catIndex[cat];\r\n                if (typeof rowIndex !== 'undefined' && typeof colIndex !== 'undefined') {\r\n                    const cell = sheet.getCell(rowIndex, colIndex);\r\n                    cell.value = monthData[cat];\r\n                }\r\n            });\r\n        });\r\n        return sheet.saveUpdatedCells();\r\n    }\r\n\r\n    public async udpateMaintenanceSheet(json: { [month: string]: { [flat: string]: any; }; }): Promise<void> {\r\n        const sheet = await this.getSheetByTitle('Maintanence');\r\n        await sheet.loadCells();\r\n        const months = Object.keys(json);\r\n        months.forEach((month) => {\r\n            const monthData = json[month];\r\n            const flats = Object.keys(maintIndex);\r\n            const mIndex = month.replace(/-\\d+$/, '');\r\n            const colIndex: number = maintenenceMonthIndex[mIndex];\r\n            flats.forEach((flat) => {\r\n                const rowIndex = maintIndex[flat];\r\n                if (typeof rowIndex !== 'undefined' && typeof colIndex !== 'undefined') {\r\n                    const cell = sheet.getCell(rowIndex, colIndex);\r\n                    cell.value = monthData[flat];\r\n                }\r\n            });\r\n        });\r\n        return sheet.saveUpdatedCells();\r\n    }\r\n\r\n    public async searchUpdateRecord(\r\n        sheetName: string,\r\n        searchColumns: Record<string, any>,\r\n        updateColumnName: string,\r\n        updateValue: any,\r\n    ) {\r\n        const sheet = await this.getSheetByTitle(sheetName);\r\n\r\n        // Get all rows from the sheet\r\n        const rows = await sheet.getRows();\r\n\r\n        // Search for the record\r\n        const recordIndex = rows.findIndex(\r\n            (row: { [x: string]: any; }) =>\r\n                Object.entries(searchColumns).every(([columnName, value]) => row[columnName] === value));\r\n\r\n        if (recordIndex !== -1) {\r\n            // If a record is found, update its input column if it's empty\r\n            const recordToUpdate = rows[recordIndex];\r\n            if (!recordToUpdate[updateColumnName]) {\r\n                recordToUpdate[updateColumnName] = updateValue;\r\n                await recordToUpdate.save();\r\n                console.log('Record updated successfully.');\r\n            } else {\r\n                console.log('Record found but input column is not empty.');\r\n            }\r\n        } else {\r\n            console.log('Record not found.');\r\n            throw new Error('RECORD_NOT_FOUND');\r\n        }\r\n    }\r\n\r\n    public isEmptySheet(sheet: GoogleSpreadsheetWorksheet): boolean {\r\n        return !sheet || sheet.rowCount === 0;\r\n    }\r\n\r\n    private async updateSheet(\r\n        sheet: GoogleSpreadsheetWorksheet,\r\n        json: { [key: string]: any; }[],\r\n        startingRow: number = 0,\r\n    ) {\r\n        if (json && json.length) {\r\n            const headers = Object.keys(json[0]);\r\n            const colCount = headers.length;\r\n            const rowCount = startingRow + json.length;\r\n            for (let i = startingRow; i < rowCount; i += 1) {\r\n                const row = json[i];\r\n                for (let j = 0; j < colCount; j += 1) {\r\n                    const cell = sheet.getCell(i + 1, j);\r\n                    const newVal = row[headers[j]];\r\n                    if (cell.formattedValue !== newVal) {\r\n                        cell.value = newVal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        await sheet.saveUpdatedCells();\r\n    }\r\n\r\n    public async updateSheetWithJSON(json: { [key: string]: any; }[], sheetTitle?: string): Promise<void> {\r\n        if (sheetTitle) {\r\n            await this.getSheetByTitle(sheetTitle);\r\n        }\r\n        await this.appendRows(json);\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!gsheetInstance) {\r\n            gsheetInstance = new GsheetUtilImpl();\r\n            gsheetInstance.init();\r\n        }\r\n        return gsheetInstance;\r\n    }\r\n}\r\n\r\nexport default GsheetUtilImpl.getInstance();\r\n","import { combineReducers } from 'redux';\r\nimport transReducder from './transactions/trans-reducer';\r\nimport sheetReducer from './google-sheet/sheet-reducer';\r\nimport billsReducer from './bills/bills-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    sheet: sheetReducer,\r\n    trans: transReducder,\r\n    bills: billsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport Thunk from 'redux-thunk';\r\nimport rootReducer from './root-reducer';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(Thunk)));\r\n\r\nexport default store;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { FilePicker } from 'react-file-picker';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport './index.css';\r\n\r\nexport type FileUploadProps = {\r\n    onUpload: (file: File) => void;\r\n}\r\nexport const FileUpload = (props: FileUploadProps) => {\r\n    const [errorMsg, setErrorMsg] = useState<string>();\r\n    const onUpload = useCallback((fileObject) => {\r\n        props.onUpload(fileObject);\r\n    }, [props]);\r\n    const onError = useCallback((errMsg) => {\r\n        setErrorMsg(errMsg);\r\n    }, []);\r\n    return (\r\n        <>\r\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n            <p>Upload a transaction file (.xls) to process.</p>\r\n            <div className=\"file-upload-wrapper\">\r\n                <FilePicker\r\n                    extensions={['xls', 'xlsx']}\r\n                    onChange={onUpload}\r\n                    onError={onError}\r\n                >\r\n                    <button type=\"button\">Upload</button>\r\n                </FilePicker>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n","import XLSX from 'xlsx';\r\nimport moment from 'moment';\r\nimport { Transaction } from '../service-types';\r\n\r\n// eslint-disable-next-line no-shadow\r\nexport const XLS_TRANS_KEY_PREFIX = '__EMPTY_';\r\nexport const xLSTransKeys = {\r\n    DATE_KEY: '1',\r\n    DESC_KEY: '3',\r\n    CHQ_NO_KEY: '9',\r\n    WITHDRAWAL_KEY: '11',\r\n    DEPOSIT_KEY: '17',\r\n    BALANCE_KEY: ['22', '20', '21'],\r\n};\r\n\r\nexport const fileParserUtil = {\r\n    parseXLS: (file: File) => new Promise<Transaction[]>((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e: any) => {\r\n            const workBook = XLSX.read(e.target.result, {\r\n                type: 'binary',\r\n            });\r\n            const worksheet = workBook.Sheets[workBook.SheetNames[0]];\r\n            const data = XLSX.utils.sheet_to_json(worksheet);\r\n            const trans = fileParserUtil.parseTransactions(data as { [key: string]: string; }[]);\r\n            resolve(trans);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }),\r\n\r\n    parseAmount: (input: any) => {\r\n        let out: any;\r\n        if (typeof input === 'string') {\r\n            out = parseFloat(input.replace('Cr', '').replaceAll(',', ''));\r\n        } else {\r\n            out = input;\r\n        }\r\n        return out;\r\n    },\r\n\r\n    getWorkingColumnKeyFromArray:\r\n        (cols: string[], input: any) => cols.find((col) => !!input[`${XLS_TRANS_KEY_PREFIX}${col}`]),\r\n\r\n    parseTransactions: (input: { [key: string]: string; }[]) => {\r\n        let trans: Transaction[] = [];\r\n        if (input.length) {\r\n            const dateKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DATE_KEY}`;\r\n            const data = input.filter((row) =>\r\n                row[dateKey] && row[dateKey].length === 10 && row[dateKey].includes('/') &&\r\n                moment(row[dateKey], 'dd/MM/YYYY').toDate().toString() !== 'Invalid Date');\r\n            let balanceKey = fileParserUtil.getWorkingColumnKeyFromArray(xLSTransKeys.BALANCE_KEY, data[0]) || '';\r\n            const descKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DESC_KEY}`;\r\n            const chqNoKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.CHQ_NO_KEY}`;\r\n            balanceKey = `${XLS_TRANS_KEY_PREFIX}${balanceKey}`;\r\n            trans = data.map((row) => {\r\n                const out: Transaction = {\r\n                    Date: moment(row[dateKey], 'DD/MM/YYYY').toDate(),\r\n                    Description: row[descKey],\r\n                    'Cheque No': row[chqNoKey] || '',\r\n                    Debit: 0,\r\n                    Credit: 0,\r\n                    Total: fileParserUtil.parseAmount(row[balanceKey]),\r\n                    type: 'ONLINE',\r\n                };\r\n                if (row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.WITHDRAWAL_KEY}`]) {\r\n                    out.Debit = fileParserUtil.parseAmount(\r\n                        row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.WITHDRAWAL_KEY}`]);\r\n                }\r\n                if (row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DEPOSIT_KEY}`]) {\r\n                    out.Credit = fileParserUtil.parseAmount(\r\n                        row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DEPOSIT_KEY}`]);\r\n                }\r\n                return out;\r\n            });\r\n        }\r\n        return trans;\r\n    },\r\n};\r\nexport default fileParserUtil;\r\n","import React, { useCallback, useState, useContext, useMemo } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport moment from 'moment';\r\nimport './index.css';\r\nimport AppContext from '../../services';\r\nimport { Transaction } from '../../services/service-types';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\nexport type FilePreviewProps = {\r\n    name: string;\r\n    xlsData: Transaction[];\r\n}\r\nexport const FilePreview = (props: FilePreviewProps) => {\r\n    const { xlsData: rows, name } = props;\r\n    const months: { [key: string]: string; } = useMemo(() => {\r\n        const monthList: { [key: string]: string; } = {};\r\n        rows.forEach((row) => {\r\n            const month = moment(row.Date).format('MMM-YY');\r\n            monthList[month] = month;\r\n        });\r\n        return monthList;\r\n    }, [rows]);\r\n    const monthsArray = Object.values(months);\r\n    const [selMonth, setSelMonth] = useState(monthsArray.length === 1 ? monthsArray[0] : '');\r\n    const classes = useStyles();\r\n    const { appData } = useContext(AppContext);\r\n    appData.transSheetMonth = selMonth;\r\n    const handleMonthChange = useCallback((e) => {\r\n        if (e.target.value) {\r\n            appData.transSheetMonth = e.target.value;\r\n            setSelMonth(e.target.value);\r\n        }\r\n    }, [appData]);\r\n    let filteredRows = rows;\r\n    if (selMonth) {\r\n        filteredRows = rows.filter((row) => moment(row.Date).format('MMM-YY') === selMonth);\r\n        appData.transactions = filteredRows;\r\n    }\r\n    const saveSheet = useCallback(() => {\r\n        // gsheetUtil.addSheet({\r\n        //     headerValues: [\r\n        //         'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category',\r\n        //     ],\r\n        //     title: 'Online Transactions',\r\n        // }).then((sheet) => {\r\n        //     resolve([]);\r\n        // });\r\n    }, []);\r\n    return (\r\n        <>\r\n            <div className=\"preview-header\">\r\n                <div>\r\n                    File: <h4>{name}</h4>\r\n                </div>\r\n                {/* <div className=\"tools\">\r\n                    <Button variant=\"outlined\" onClick={saveSheet}>Save Sheet</Button>\r\n                </div> */}\r\n                {/* <div className=\"month-filter\">\r\n                    Month: &nbsp;\r\n                    <Select\r\n                        value={selMonth}\r\n                        onChange={handleMonthChange}\r\n                        displayEmpty\r\n                        inputProps={{ 'aria-label': 'Month Filter' }}\r\n                    >\r\n                        <MenuItem value=\"\"><em>Select a Month:</em></MenuItem>\r\n                        {monthsArray.map((month) => (\r\n                            <MenuItem value={month}>{month}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </div> */}\r\n            </div>\r\n            <TableContainer className=\"xls-file-preview\" component={Paper}>\r\n                <Table className={classes.table} size=\"small\" stickyHeader aria-label=\"Parsed Bank Transactions\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>#</TableCell>\r\n                            <TableCell>Date</TableCell>\r\n                            <TableCell>Description</TableCell>\r\n                            <TableCell align=\"right\">Cheque No.</TableCell>\r\n                            <TableCell align=\"right\">Debit</TableCell>\r\n                            <TableCell align=\"right\">Credit</TableCell>\r\n                            <TableCell align=\"right\">Total</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {filteredRows.map((row, index) => (\r\n                            <TableRow key={row.Description}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {index + 1}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {moment(row.Date).format('DD-MM-YYYY')}\r\n                                </TableCell>\r\n                                <TableCell>{row.Description}</TableCell>\r\n                                <TableCell align=\"right\">{row['Cheque No']}</TableCell>\r\n                                <TableCell align=\"right\">{row.Debit}</TableCell>\r\n                                <TableCell align=\"right\">{row.Credit}</TableCell>\r\n                                <TableCell align=\"right\">{row.Total}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\nexport default FilePreview;\r\n","const CAT_INDEX: { [month: string]: number } = {\r\n    'Audit Fees': 1,\r\n    BWSSB: 2,\r\n    Diesel: 3,\r\n    Bescom: 4,\r\n    'House Keeping Salary': 5,\r\n    Security: 6,\r\n    'Garden Maintenance': 7,\r\n    'Garbage Collection Vendor (Hasirudala)/BBMP': 8,\r\n    'Borewell And Motor Maintenance': 9,\r\n    'Annual Bonus': 10,\r\n    'Lift Maintenance (Johnson)': 11,\r\n    'HK items (bleaching powder,garbage bin etc)': 12,\r\n    'Health Club Maintenance': 13,\r\n    'Electrical / Plumbing Repairs': 14,\r\n    'Apartment repairs related': 15,\r\n    'Apartment Safety': 16,\r\n    'CCTV / Intercomm': 17,\r\n    'Misc expenses': 18,\r\n    'Apartment developments': 19,\r\n    'Apartment Work By Security and Others': 20,\r\n    'Septic Tank Repairs / Cleaning': 21,\r\n    'Water Tanks Cleaning': 22,\r\n    'Generator Maintenance and Repair': 23,\r\n    'SMS Charges/Cheque book (Vijaya Bank)': 24,\r\n    'Festival/Holiday Celebration': 25,\r\n    'Drinking Water for Employees': 26,\r\n    'BAF Subscription Charges': 27,\r\n    'Maintenance Collection': 30,\r\n    'Income Tax Refund': 31,\r\n    'Other Income': 32,\r\n    'Interest on account': 33,\r\n    'Fine / Extra Payment Received': 34,\r\n    'Corpus Fund': 35,\r\n    'Tenant Deposit from the Owners': 36,\r\n    'FD Deposit': 37,\r\n    'Deposit to RD account': 38,\r\n};\r\n\r\nexport default CAT_INDEX;\r\n","const MONTH_INDEX: { [month: string]: number } = {\r\n    Apr: 2,\r\n    May: 3,\r\n    Jun: 4,\r\n    Jul: 5,\r\n    Aug: 6,\r\n    Sep: 7,\r\n    Oct: 8,\r\n    Nov: 9,\r\n    Dec: 10,\r\n    Jan: 11,\r\n    Feb: 12,\r\n    Mar: 13,\r\n};\r\n\r\nexport default MONTH_INDEX;\r\n","export default {\r\n    '001': 1,\r\n    '002': 2,\r\n    '003': 3,\r\n    '004': 4,\r\n    '005': 5,\r\n    '007': 6,\r\n    '008': 7,\r\n    '009': 8,\r\n    '010': 9,\r\n    '011': 10,\r\n    '012': 11,\r\n    101: 12,\r\n    102: 13,\r\n    103: 14,\r\n    104: 15,\r\n    105: 16,\r\n    106: 17,\r\n    107: 18,\r\n    108: 19,\r\n    109: 20,\r\n    110: 21,\r\n    111: 22,\r\n    112: 23,\r\n    201: 24,\r\n    202: 25,\r\n    203: 26,\r\n    204: 27,\r\n    205: 28,\r\n    206: 29,\r\n    207: 30,\r\n    208: 31,\r\n    209: 32,\r\n    210: 33,\r\n    211: 34,\r\n    212: 35,\r\n    301: 36,\r\n    302: 37,\r\n    303: 38,\r\n    304: 39,\r\n    305: 40,\r\n    306: 41,\r\n    307: 42,\r\n    308: 43,\r\n    309: 44,\r\n    310: 45,\r\n    311: 46,\r\n    312: 47,\r\n    401: 48,\r\n    402: 49,\r\n    403: 50,\r\n    404: 51,\r\n    405: 52,\r\n    406: 53,\r\n    407: 54,\r\n    408: 55,\r\n    409: 56,\r\n    410: 57,\r\n    411: 58,\r\n    412: 59,\r\n} as { [month: string]: number };\r\n","const MONTH_INDEX: { [month: string]: number } = {\r\n    Apr: 2,\r\n    May: 3,\r\n    Jun: 4,\r\n    Jul: 5,\r\n    Aug: 6,\r\n    Sep: 7,\r\n    Oct: 8,\r\n    Nov: 9,\r\n    Dec: 10,\r\n    Jan: 11,\r\n    Feb: 12,\r\n    Mar: 13,\r\n};\r\n\r\nexport default MONTH_INDEX;\r\n","import { Button } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport React, { useCallback, useState, useEffect } from 'react';\r\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\r\n\r\nfunction FileSave(props: { data: { [key: string]: any }[] }) {\r\n    const { data } = props;\r\n    const [msg, setMsg] = useState('');\r\n    useEffect(() => {\r\n        gsheetUtil.init();\r\n    }, []);\r\n\r\n    const saveSheet = useCallback(async () => {\r\n        const sheetTitle = 'Online Transactions';\r\n        const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\r\n        if (!sheet) {\r\n            await gsheetUtil.addSheet({\r\n                headerValues: [\r\n                    'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category', 'Flat',\r\n                ],\r\n                title: sheetTitle,\r\n            });\r\n        }\r\n        const sheetData = (JSON.parse(JSON.stringify(data)) as any[]).map((row) => {\r\n            row.Date = moment(row.Date).format('DD-MM-YYYY');\r\n            return row;\r\n        });\r\n        await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\r\n        setMsg('Sheet Updated');\r\n    }, [data]);\r\n    return (\r\n        <>\r\n            <p>{msg}</p>\r\n            <div className=\"tools\">\r\n                <Button variant=\"outlined\" onClick={saveSheet}>Save Sheet</Button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FileSave;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FileUpload from '../file-upload';\r\nimport fileParserUtil from '../../services/xlsjs';\r\nimport FilePreview from '../file-preview';\r\nimport FileSave from '../file-save';\r\nimport { Transaction } from '../../services/service-types';\r\nimport { GoogleSheet } from '../../services/redux/google-sheet/sheet-types';\r\nimport './index.css';\r\nimport dataUtils from './data-utils';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        button: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n        instructions: {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\nfunction getSteps() {\r\n    return ['File Upload', 'File Preview', 'Save'];\r\n}\r\n\r\nexport const OnlineTransactionParser = () => {\r\n    const classes = useStyles();\r\n    const { sheetConfig } : GoogleSheet = useSelector((state: any) => state.sheet);\r\n    const [errorMsg, setErrorMsg] = useState<string>('');\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [fileName, setFileName] = useState('');\r\n    const [bankTransactions, setBankTransactions] = useState<Transaction[]>([]);\r\n    const parseXLS = useCallback((file: File) => {\r\n        setFileName(file.name);\r\n        fileParserUtil.parseXLS(file).then((resp: Transaction[]) => {\r\n            sheetConfig.appData.transactions = resp;\r\n            resp.reverse();\r\n            setBankTransactions(resp);\r\n            setErrorMsg('');\r\n            setActiveStep(1);\r\n        });\r\n    }, [sheetConfig.appData]);\r\n    const getStepContent = useCallback((step: number) => {\r\n        switch (step) {\r\n        case 0:\r\n            return (<FileUpload onUpload={parseXLS} />);\r\n        case 1:\r\n            return (<FilePreview name={fileName} xlsData={bankTransactions} />);\r\n        case 2:\r\n            return (<FileSave data={bankTransactions as any} />);\r\n        default:\r\n            return 'Unknown step';\r\n        }\r\n    }, [bankTransactions, parseXLS, fileName]);\r\n    const [skipped, setSkipped] = useState(new Set<number>());\r\n    const steps = getSteps();\r\n\r\n    const isStepOptional = (step: number) => false;\r\n\r\n    const isStepSkipped = useCallback((step: number) => skipped.has(step), [skipped]);\r\n\r\n    const handleNext = useCallback(async () => {\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n        switch (activeStep) {\r\n        case 0: {\r\n            if (fileName) {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                setErrorMsg('');\r\n            } else {\r\n                setErrorMsg('Select a file.');\r\n            }\r\n            break;\r\n        }\r\n        case 1:\r\n        default:\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            setErrorMsg('');\r\n        }\r\n        setSkipped(newSkipped);\r\n    }, [activeStep, fileName, isStepSkipped, skipped]);\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleSkip = () => {\r\n        if (!isStepOptional(activeStep)) {\r\n            // You probably want to guard against something like this,\r\n            // it should never occur unless someone's actively trying to break something.\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped((prevSkipped) => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        });\r\n    };\r\n    const handleReset = useCallback(() => {\r\n        setActiveStep(0);\r\n    }, []);\r\n    return (\r\n        <div className=\"wizard\">\r\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n            <div className={classes.root}>\r\n                <Stepper activeStep={activeStep}>\r\n                    {steps.map((label, index) => {\r\n                        const stepProps: { completed?: boolean } = {};\r\n                        const labelProps: { optional?: React.ReactNode } = {};\r\n                        if (isStepOptional(index)) {\r\n                            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n                        }\r\n                        if (isStepSkipped(index)) {\r\n                            stepProps.completed = false;\r\n                        }\r\n                        return (\r\n                            <Step key={label} {...stepProps}>\r\n                                <StepLabel {...labelProps}>{label}</StepLabel>\r\n                            </Step>\r\n                        );\r\n                    })}\r\n                </Stepper>\r\n                <div>\r\n                    {activeStep === steps.length && (\r\n                        <div>\r\n                            <Typography className={classes.instructions}>\r\n                                All steps completed - you&apos;re finished\r\n                            </Typography>\r\n                            <Button onClick={handleReset} className={classes.button}>\r\n                                Reset\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                    {activeStep !== steps.length && (\r\n                        <div>\r\n                            <Typography className={classes.instructions}>\r\n                                {getStepContent(activeStep)}\r\n                            </Typography>\r\n                            <div>\r\n                                <Button\r\n                                    disabled={activeStep === 0}\r\n                                    onClick={handleBack}\r\n                                    className={classes.button}\r\n                                >\r\n                                    Back\r\n                                </Button>\r\n                                {isStepOptional(activeStep) && (\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleSkip}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Skip\r\n                                    </Button>\r\n                                )}\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleNext}\r\n                                    className={classes.button}\r\n                                >\r\n                                    {(activeStep === steps.length - 1 && 'Save') || 'Next'}\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OnlineTransactionParser;\r\n","export type Operation = 'in' | 'having' | 'regex' | 'range' | '==' | '>' | '>=' | '<' | '<=' | '!=';\r\nexport type TransType = 'debit' | 'credit';\r\nexport type Query = {\r\n    opr: Operation;\r\n    value: string[] | string | number | number[] | boolean;\r\n    type?: TransType;\r\n};\r\nexport type ColQuery = {\r\n    [colName: string]: Query[] | LogicalMap;\r\n};\r\nexport type CatFieldMap = {\r\n    [category: string]: LogicalMap | ColQuery[];\r\n};\r\nexport enum LogicalOpr {\r\n    'and' = 'and',\r\n    'or' = 'or',\r\n    'xor' = 'xor',\r\n    'not' = 'not',\r\n    'nand' = 'nand',\r\n    'nor' = 'nor',\r\n}\r\nexport type LogicalMap = {\r\n    [opr in LogicalOpr | string]: Array<Query | ColQuery>;\r\n};\r\n","import React from 'react';\r\nimport OnlineTransactionParser from '../components/online-transactions';\r\n\r\nconst OnlineTransactions: React.FC = () => (\r\n    <OnlineTransactionParser />\r\n);\r\n\r\nexport default OnlineTransactions;\r\n","import { getConfig, setCredentials } from '../..';\r\nimport { ApplicationConfig } from '../../service-types';\r\nimport SHEET_ACTION_TYPES, { SheetInfo } from './sheet-types';\r\n\r\nexport const initSheet = () => ({\r\n    type: SHEET_ACTION_TYPES.INIT,\r\n});\r\n\r\nexport const initSuccess = (payload: ApplicationConfig) => ({\r\n    type: SHEET_ACTION_TYPES.INIT_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const initFailure = (payload: string) => ({\r\n    type: SHEET_ACTION_TYPES.INIT_FAILURE,\r\n    payload,\r\n});\r\n\r\nexport const setSheetInfo = (payload: SheetInfo) => ({\r\n    type: SHEET_ACTION_TYPES.SET_SHEET_INFO,\r\n    payload,\r\n});\r\n\r\nexport function initializeGoogleSheet(secret: string) {\r\n    return (dispatch: any) => {\r\n        dispatch(initSheet());\r\n        const out = setCredentials(secret);\r\n        if (out.res) {\r\n            dispatch(initSuccess({ ...getConfig() }));\r\n        } else {\r\n            dispatch(initFailure(out.error));\r\n        }\r\n    };\r\n}\r\n","export enum TransCategory {\r\n    'Audit Fees' = 'Audit Fees',\r\n    'BWSSB' = 'BWSSB',\r\n    'Diesel' = 'Diesel',\r\n    'Bescom' = 'Bescom',\r\n    'House Keeping Salary' = 'House Keeping Salary',\r\n    'Security' = 'Security',\r\n    'Gardener' = 'Gardener',\r\n    'Garbage Collection Vendor (Hasirudala)/BBMP' = 'Garbage Collection Vendor (Hasirudala)/BBMP',\r\n    'Borewell And Motor Maintenance' = 'Borewell And Motor Maintenance',\r\n    'Annual Bonus' = 'Annual Bonus',\r\n    'Lift Maintenance (Johnson)' = 'Lift Maintenance (Johnson)',\r\n    'HK items (bleaching powder,garbage bin etc)' = 'HK items (bleaching powder,garbage bin etc)',\r\n    'Health Club Maintenance' = 'Health Club Maintenance',\r\n    'Electrical / Plumbing Repairs' = 'Electrical / Plumbing Repairs',\r\n    'Apartment repairs related' = 'Apartment repairs related',\r\n    'Apartment Painting' = 'Apartment Painting',\r\n    'CCTV / Intercomm' = 'CCTV / Intercomm',\r\n    'Misc expenses' = 'Misc expenses',\r\n    'Apartment developments' = 'Apartment developments',\r\n    'Apartment Work By Security and Others' = 'Apartment Work By Security and Others',\r\n    'Septic Tank Repairs / Cleaning' = 'Septic Tank Repairs / Cleaning',\r\n    'Water Tanks Cleaning' = 'Water Tanks Cleaning',\r\n    'Generator Maintenance and Repair' = 'Generator Maintenance and Repair',\r\n    'SMS Charges/Cheque book (Vijaya Bank)' = 'SMS Charges/Cheque book (Vijaya Bank)',\r\n    'Festival/Holiday Celebration' = 'Festival/Holiday Celebration',\r\n    'Drinking Water for Employees' = 'Drinking Water for Employees',\r\n    'BAF Subscription Charges' = 'BAF Subscription Charges',\r\n    'Maintenance Collection' = 'Maintenance Collection',\r\n    'Income Tax Refund' = 'Income Tax Refund',\r\n    'Other Income' = 'Other Income',\r\n    'Interest on account' = 'Interest on account',\r\n    'Fine / Extra Payment Received' = 'Fine / Extra Payment Received',\r\n    'Corpus Fund' = 'Corpus Fund',\r\n    'Tenant Deposit from the Owners' = 'Tenant Deposit from the Owners',\r\n    'FD Deposit' = 'FD Deposit',\r\n}\r\nexport default { TransCategory };\r\n","import {\r\n    ColQuery, LogicalMap, LogicalOpr, Query,\r\n} from '../services/cat-map/cat-map-types';\r\n\r\nclass LogicalExecutor {\r\n    public query: LogicalMap;\r\n\r\n    public constructor(inpQuery: LogicalMap) {\r\n        this.query = inpQuery;\r\n    }\r\n\r\n    run(execute: (query: Query | ColQuery) => boolean) {\r\n        return Object.keys(this.query).every((opr: LogicalOpr | string) => {\r\n            const children: Array<Query | ColQuery> = this.query[opr];\r\n            switch (opr) {\r\n            case LogicalOpr.or:\r\n                return children.some((child) => execute(child));\r\n            case LogicalOpr.nor:\r\n                return !children.some((child) => execute(child));\r\n            case LogicalOpr.xor: {\r\n                const res = children.map((child) => execute(child));\r\n                return res.some((child) => child === true) && res.some((child) => child === false);\r\n            }\r\n            case LogicalOpr.nand:\r\n            case LogicalOpr.not:\r\n                return !(children.every((child: any) => execute(child)));\r\n            case LogicalOpr.and:\r\n            default:\r\n                return children.every((child: any) => execute(child));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default LogicalExecutor;\r\n","import { Query, TransType } from '../services/cat-map/cat-map-types';\r\n\r\nclass QueryExecutor {\r\n    public query: Query;\r\n\r\n    public constructor(inpQuery: Query) {\r\n        this.query = inpQuery;\r\n    }\r\n\r\n    public run(fieldVal: any): boolean {\r\n        let res = false;\r\n        const { opr, value: queryVal } = this.query;\r\n        if (fieldVal && queryVal) {\r\n            switch (opr) {\r\n            case '==': {\r\n                res = fieldVal.toString() === queryVal.toString();\r\n                break;\r\n            }\r\n            case '!=': {\r\n                res = fieldVal.toString() !== queryVal.toString();\r\n                break;\r\n            }\r\n            case '>': {\r\n                res = fieldVal > queryVal;\r\n                break;\r\n            }\r\n            case '>=': {\r\n                res = fieldVal >= queryVal;\r\n                break;\r\n            }\r\n            case '<': {\r\n                res = fieldVal < queryVal;\r\n                break;\r\n            }\r\n            case '<=': {\r\n                res = fieldVal <= queryVal;\r\n                break;\r\n            }\r\n            case 'having': {\r\n                if (typeof fieldVal === 'string') {\r\n                    if (Array.isArray(queryVal)) {\r\n                        res = queryVal.some((item) => {\r\n                            const qval = item.toString();\r\n                            return fieldVal.toLowerCase().indexOf(qval.toLowerCase()) > -1;\r\n                        });\r\n                    } else {\r\n                        const qval = queryVal.toString();\r\n                        res = fieldVal.toLowerCase().indexOf(qval.toLowerCase()) > -1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'regex': {\r\n                if (Array.isArray(queryVal)) {\r\n                    res = queryVal.some((item) => {\r\n                        const qval = item.toString();\r\n                        const reg = new RegExp(qval, 'i');\r\n                        return fieldVal.match(reg)?.length > 0;\r\n                    });\r\n                } else {\r\n                    const qval = queryVal.toString();\r\n                    const reg = new RegExp(qval, 'i');\r\n                    res = fieldVal.match(reg)?.length > 0;\r\n                }\r\n                break;\r\n            }\r\n            case 'in': {\r\n                if (Array.isArray(queryVal)) {\r\n                    if (typeof queryVal[0] === 'string') {\r\n                        res = queryVal.indexOf(fieldVal.toString() as never) > -1;\r\n                    } else {\r\n                        res = queryVal.indexOf(fieldVal as never) > -1;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'range': {\r\n                if (Array.isArray(queryVal)) {\r\n                    res = typeof queryVal[0] === 'undefined' || fieldVal >= queryVal[0];\r\n                    res = res && (typeof queryVal[1] === 'undefined' || fieldVal <= queryVal[1]);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                // Nothing to do\r\n            }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default QueryExecutor;\r\n","import { ColQuery, Query, TransType } from '../services/cat-map/cat-map-types';\r\nimport LogicalExecutor from './logical-executor';\r\nimport QueryExecutor from './query-executor';\r\n\r\nexport default class ColQueryExecutor {\r\n    public query: ColQuery;\r\n\r\n    public constructor(inpQuery: ColQuery) {\r\n        this.query = inpQuery;\r\n    }\r\n\r\n    run(transaction: { [index: string]: any }) {\r\n        return Object.keys(this.query).every((columnName) => {\r\n            const children = this.query[columnName];\r\n            let out = false;\r\n            if (Array.isArray(children)) {\r\n                out = children.every((query) => {\r\n                    const qExecutor = new QueryExecutor(query);\r\n                    const fieldVal: any = transaction[columnName];\r\n                    return qExecutor.run(fieldVal);\r\n                });\r\n            } else {\r\n                const logicalExec = new LogicalExecutor(children);\r\n                out = logicalExec.run((query) => {\r\n                    const qExecutor = new QueryExecutor(query as Query);\r\n                    const fieldVal: any = transaction[columnName];\r\n                    return qExecutor.run(fieldVal);\r\n                });\r\n            }\r\n            return out;\r\n        });\r\n    }\r\n}\r\n","import { CatFieldMap, ColQuery, LogicalMap } from '../services/cat-map/cat-map-types';\r\nimport { TransactionType } from '../services/redux/transactions/trans-types';\r\nimport ColQueryExecutor from './col-query-executor';\r\nimport { TransCategory } from './trans-category';\r\nimport LogicalExecutor from './logical-executor';\r\n\r\nexport default class TransMapExecutor {\r\n    catFieldMap: CatFieldMap;\r\n\r\n    public constructor(catMapJson: CatFieldMap) {\r\n        this.catFieldMap = catMapJson;\r\n    }\r\n\r\n    public run(cashTransactions: TransactionType[]) {\r\n        const categories: string[] = Object.keys(this.catFieldMap);\r\n        cashTransactions.forEach((ctrans) => {\r\n            if (!ctrans.Category) {\r\n                const category: TransCategory | undefined = categories.find(\r\n                    (cat: string) => {\r\n                        const children: LogicalMap | ColQuery[] = this.catFieldMap[cat];\r\n                        let out;\r\n                        if (Array.isArray(children)) {\r\n                            out = children.every((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        } else {\r\n                            const logicalExec = new LogicalExecutor(children);\r\n                            out = logicalExec.run((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery as ColQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        }\r\n                        return out;\r\n                    },\r\n                ) as TransCategory;\r\n                ctrans.Category = category;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { CatFieldMap } from './cat-map-types';\r\n\r\nexport default {\r\n    'Maintenance Collection': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: [\r\n                '2,600.00', '2600',\r\n                '2,700.00', '2700',\r\n                '2,800.00', '2800',\r\n                '5,400.00', '5400',\r\n                '5,500.00', '5500',\r\n                '5,600.00', '5600',\r\n                '8,100.00', '8100',\r\n                '5,200.00', '5200',\r\n                '8,400.00', '8400',\r\n                '10,800.00', '10800',\r\n                '11,200.00', '11200',\r\n                '14,000.00', '14000',\r\n                '13,500.00', '13500',\r\n            ],\r\n        }],\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['maintenance', 'neft', 'upi', 'imps'],\r\n        }],\r\n    }],\r\n    'Audit Fees': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['N YASWANTH', 'YASWANTH'],\r\n        }],\r\n    }],\r\n    'Corpus Fund': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: [\r\n                '7500', '7,500.00',\r\n                '15,000.00', '15000',\r\n                '22,500.00', '22500',\r\n                '30,000.00', '30000',\r\n                '37,500.00', '37500',\r\n                '45,000.00', '45000',\r\n            ],\r\n        }],\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['corpus', 'neft', 'upi', 'imps'],\r\n        }],\r\n    }],\r\n    'Income Tax Refund': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: ['ACH', 'AY20', 'ACH Credit', 'AAKAS1985M'],\r\n        }],\r\n    }],\r\n    Bescom: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['BESCOM', 'Electricity', 'EBANK:BBPS'],\r\n        }],\r\n    }],\r\n    BWSSB: [{\r\n        Debit: [{\r\n            opr: 'range',\r\n            value: [14000, 16500],\r\n        }],\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['BANGALORE WATER SUPPLY', 'BWSSB', 'BANGALORE ONE', 'EBANK:BBPS'],\r\n        }],\r\n    }],\r\n    'CCTV / Intercomm': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SHANKAR TELECOM LINKS', 'Intercom'],\r\n        }],\r\n    }],\r\n    Security: [{\r\n        Debit: [{\r\n            opr: 'in',\r\n            value: ['35,000.00', '35000', '41000', '41,000.00'],\r\n        }],\r\n    }],\r\n    'House Keeping Salary': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'Housekeeping.+Salary',\r\n                'House keeping.+Salary',\r\n                'house-keeping.+salary',\r\n                'housekeeping.+ladies',\r\n                'hk.+salary',\r\n            ],\r\n        }],\r\n    }],\r\n    'Garden Maintenance': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['garden', 'Gardner.+Salary', 'garden.+work', 'Manure'],\r\n        }],\r\n    }],\r\n    'Garbage Collection Vendor (Hasirudala)/BBMP': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SYED ALI BASHA'],\r\n        }],\r\n    }],\r\n    'Borewell And Motor Maintenance': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['borewell', 'motor', 'coil', 'winding'],\r\n        }],\r\n    }],\r\n    'Lift Maintenance (Johnson)': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['JOHNSON.+LIFTS', 'Lift'],\r\n        }],\r\n    }],\r\n    'HK items (bleaching powder,garbage bin etc)': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'Housekeeping.+Items',\r\n                'Housekeeping.+Material',\r\n                'hk.+item',\r\n                'HK.+Material',\r\n                'bleaching',\r\n                'garbage drum',\r\n                'powder',\r\n                'mop',\r\n                'dust',\r\n                'dustbin',\r\n                'soap',\r\n                'detergent',\r\n                'broom',\r\n                'switch',\r\n                'tubelight',\r\n                'switch',\r\n                'light',\r\n                'bulb',\r\n                'Phenoyl',\r\n                'powder',\r\n                'phenoyl',\r\n                'sanitizer',\r\n                'cleaner',\r\n                'dettol',\r\n                'bottle',\r\n                'neem oil',\r\n                'tap',\r\n                'kerosene',\r\n            ],\r\n        }],\r\n    }],\r\n    'Electrical / Plumbing Repairs': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['electric repair', 'electric work', 'electric', 'Chamundi', 'plumbing'],\r\n        }],\r\n    }],\r\n    'Septic Tank Repairs / Cleaning': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['septik', 'septic', 'septic tank', 'sewage tank', 'sewage work', 'sewage pipe'],\r\n        }],\r\n    }],\r\n    'Water Tanks Cleaning': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['water.+tank'],\r\n        }],\r\n    }],\r\n    'Generator Maintenance and Repair': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['venus.+energy', 'kirloskar', 'generator'],\r\n        }],\r\n    }],\r\n    'SMS Charges/Cheque book (Vijaya Bank)': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['SMS .+Alert', 'cheque.+book', 'charges', 'chq.+book'],\r\n        }],\r\n    }],\r\n    'Health Club Maintenance': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['gym', 'FITNESS', 'sports'],\r\n        }],\r\n    }],\r\n    'Festival/Holiday Celebration': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'diwali.+work',\r\n                'diwali',\r\n                'festival',\r\n                'celebration',\r\n                'pooja',\r\n                'pongal',\r\n                'independence',\r\n                'republic',\r\n                'sweets',\r\n                'flag',\r\n            ],\r\n        }],\r\n    }],\r\n    'Drinking Water for Employees': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['drinking', 'drinking water', 'mineral water', 'water purchase'],\r\n        }],\r\n    }],\r\n    Diesel: [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['Diesel'],\r\n        }],\r\n    }],\r\n    'BAF Subscription Charges': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['BAF', 'BAF Subscription'],\r\n        }],\r\n    }],\r\n    'Annual Bonus': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: ['bonus'],\r\n        }],\r\n    }],\r\n    'Interest on account': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['89630100005613'],\r\n        }],\r\n    }],\r\n    'FD Deposit': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['TO TRANSFER', 'Repayment Credit'],\r\n        }],\r\n    }],\r\n    'Tenant Deposit from the Owners': [{\r\n        Credit: [{\r\n            opr: 'in',\r\n            value: ['10,000.00', '10000'],\r\n        }],\r\n    }],\r\n    'Apartment Work By Security and Others': [{\r\n        Description: [{\r\n            opr: 'regex',\r\n            value: [\r\n                'Apartment.+Work',\r\n                'Cleaning.+Rain Water',\r\n            ],\r\n        }],\r\n    }],\r\n    'Apartment Safety': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: [\r\n                'sanitization',\r\n                'sanitizing',\r\n                'mask',\r\n                'sheild',\r\n                'shield',\r\n                'spray',\r\n                'cutting tree',\r\n                'fire',\r\n                'extinguisher',\r\n                'rat poison',\r\n            ],\r\n        }],\r\n    }],\r\n    'Apartment developments': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: [\r\n                'stationery',\r\n                'pen',\r\n                'paper',\r\n                'folder',\r\n                'files',\r\n                'notebook',\r\n                'note book',\r\n                'note-book',\r\n                'entry book',\r\n                'reciept book',\r\n                'bought',\r\n                'purchased',\r\n                'purchase of',\r\n                'cash voucher',\r\n            ],\r\n        }],\r\n    }],\r\n    'Apartment repairs related': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['cement work', 'cement', 'service', 'repair', 'spanner', 'fixing', 'fixed'],\r\n        }],\r\n    }],\r\n    'Misc expenses': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['tea', 'coffee'],\r\n        }],\r\n    }],\r\n    'Fine / Extra Payment Received': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['maintenance', 'neft', 'upi', 'imps'],\r\n        }],\r\n        Credit: [{\r\n            opr: 'regex',\r\n            value: ['\\\\d'],\r\n        }],\r\n    }],\r\n    'Other Income': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['income', 'other'],\r\n        }],\r\n        Credit: [{\r\n            opr: '>',\r\n            value: 0,\r\n        }],\r\n    }],\r\n    'Cash Withdrawal / in hand': {\r\n        or: [\r\n            {\r\n                Description: [{\r\n                    opr: 'regex',\r\n                    value: ['cash', 'withdrawal', 'bank', 'basavaraj', 'carry.+forwarded', 'self'],\r\n                }],\r\n            },\r\n            {\r\n                'Cheque No': [{\r\n                    opr: 'regex',\r\n                    value: ['\\\\d+'],\r\n                }],\r\n            },\r\n        ],\r\n    },\r\n    'Deposit to RD account': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['3715125', 'SI:89630300010611'],\r\n        }],\r\n    }],\r\n} as CatFieldMap;\r\n","export default {\r\n    '001': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['khadir', 'MOHAMEDABDULKHA'],\r\n        }],\r\n    }],\r\n    '002': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['shainv', 'potti', 'MAHESH'],\r\n        }],\r\n    }],\r\n    '003': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['gulshan', 'padma', '6364883334', 'subhrojyoti', '6289470044'],\r\n        }],\r\n    }],\r\n    '004': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ANAND', 'ESHWARDAS'],\r\n        }],\r\n    }],\r\n    '005': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['KOPRESH'],\r\n        }],\r\n    }],\r\n    '007': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['007'],\r\n        }],\r\n    }],\r\n    '008': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NITHINS', '/008', 'Repaka'],\r\n        }],\r\n    }],\r\n    '009': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['rutvijkanzaria', 'PRATIK'],\r\n        }],\r\n    }],\r\n    '010': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ANANTH'],\r\n        }],\r\n    }],\r\n    '011': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AKARSH'],\r\n        }],\r\n    }],\r\n    '012': [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['K B GANESH', 'GANESH'],\r\n        }],\r\n    }],\r\n    101: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIJAYAKUMAR T', 'VIJAYAKUMAR'],\r\n        }],\r\n    }],\r\n    102: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ARNAB', 'CHAKRABORTY', 'ARNABCHAKRABORT'],\r\n        }],\r\n    }],\r\n    103: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['KRISHNA KUMAR', 'KRISHNAKUMAR'],\r\n        }],\r\n    }],\r\n    104: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AMIT KUMAR', 'KARMAKAR', 'AMITKUMAR'],\r\n        }],\r\n    }],\r\n    105: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIKASVERMA', 'VIKAS VERMA', 'MB105', '105MAINTENA'],\r\n        }],\r\n    }],\r\n    106: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['mr.uttammohanty'],\r\n        }],\r\n    }],\r\n    107: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['POLAKALA'],\r\n        }],\r\n    }],\r\n    108: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['EMMANUEL RAJA A', 'EMMANUEL'],\r\n        }],\r\n    }],\r\n    109: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['K S A RAJA RAM KUMAR', 'RAJARAMKUMAR'],\r\n        }],\r\n    }],\r\n    110: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SONYKUMARI', 'SONY KUMARI', 'PAVAN DEVARU', 'PAVANDEVARU', 'MOBLTA'],\r\n        }],\r\n    }],\r\n    111: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SENTHILKUMAR', 'SENTHIL'],\r\n        }],\r\n    }],\r\n    112: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ARINDAM'],\r\n        }],\r\n    }],\r\n    201: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ESWAR KRISHNAN', 'ESWAR', 'KARTHIKEYAN', 'flat201'],\r\n        }],\r\n    }],\r\n    202: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SRIHARSHA', 'SRI HARSHA'],\r\n        }],\r\n    }],\r\n    203: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NILOTPALDAS'],\r\n        }],\r\n    }],\r\n    204: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AMLANJYOTI', 'AMLAN'],\r\n        }],\r\n    }],\r\n    205: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIKRAMADITYA'],\r\n        }],\r\n    }],\r\n    206: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PINAKI'],\r\n        }],\r\n    }],\r\n    207: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRIYA MISHRA', 'PRIYAMISHRA', 'SRINIVAS', 'prashant.dombale'],\r\n        }],\r\n    }],\r\n    208: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['JESUDOSS'],\r\n        }],\r\n    }],\r\n    209: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['AJUJAMESASHOK', 'AJU JAMES ASHOK', 'AJUJAMES', 'T R RAJARAM', 'TRRAJARAM', 'CHALAPATHI'],\r\n        }],\r\n    }],\r\n    210: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['TARANBIR', 'IMPSMBRSur'],\r\n        }],\r\n    }],\r\n    211: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['9972528008'],\r\n        }],\r\n    }],\r\n    212: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SURAJIT'],\r\n        }],\r\n    }],\r\n    301: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRABUDH'],\r\n        }],\r\n    }],\r\n    302: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['BALAJI'],\r\n        }],\r\n    }],\r\n    303: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SURENDRA'],\r\n        }],\r\n    }],\r\n    304: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['MEHDI'],\r\n        }],\r\n    }],\r\n    305: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['VIVIN'],\r\n        }],\r\n    }],\r\n    306: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['ASHIM', 'DEBAJYOTI'],\r\n        }],\r\n    }],\r\n    307: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SAMPREETH'],\r\n        }],\r\n    }],\r\n    308: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRAHLAD'],\r\n        }],\r\n    }],\r\n    309: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['7406849918', 'prasad.kiran', 'kbv018@okhdfcbank'],\r\n        }],\r\n    }],\r\n    310: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PREMA'],\r\n        }],\r\n    }],\r\n    311: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['GURUPRASADA', 'CHOKKADI'],\r\n        }],\r\n    }],\r\n    312: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SHAKTHI', 'VINAYAK'],\r\n        }],\r\n    }],\r\n    401: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['HARISHA'],\r\n        }],\r\n    }],\r\n    402: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['JITHA', 'JITHAJAMES', 'JITHA JAMES'],\r\n        }],\r\n    }],\r\n    403: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['8147758124', 'shaheer'],\r\n        }],\r\n    }],\r\n    404: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NOBROKER', '/404Main', 'MOHAMMED SAIF'],\r\n        }],\r\n    }],\r\n    405: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['SANTOSHKUMAR', '/405main', 'SANTHOSH KUMAR', 'MALLA'],\r\n        }],\r\n    }],\r\n    406: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRAVEENVIJAY', 'PRAVEEN VIJAY'],\r\n        }],\r\n    }],\r\n    407: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['GALLA', 'VARADARAJU'],\r\n        }],\r\n    }],\r\n    408: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['UDAY KIRAN', 'UDAY', 'YAGNAMURTHY'],\r\n        }],\r\n    }],\r\n    409: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['PRABU', 'SUNDARRAJU', 'Jeevanantham'],\r\n        }],\r\n    }],\r\n    410: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['rohinimh19', 'ROHINI', 'MALLIKARJUN'],\r\n        }],\r\n    }],\r\n    411: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['NATESAN', 'ADITYA KOLLURI', 'ADITYAKOLLURI'],\r\n        }],\r\n    }],\r\n    412: [{\r\n        Description: [{\r\n            opr: 'having',\r\n            value: ['CHIRANJAN'],\r\n        }],\r\n    }],\r\n};\r\n","import { CatFieldMap, ColQuery, LogicalMap } from '../services/cat-map/cat-map-types';\r\nimport { TransactionType } from '../services/redux/transactions/trans-types';\r\nimport ColQueryExecutor from './col-query-executor';\r\nimport { FlatCategory } from './flat-category';\r\nimport LogicalExecutor from './logical-executor';\r\n\r\nexport default class MaintMapExecutor {\r\n    catFieldMap: CatFieldMap;\r\n\r\n    public constructor(catMapJson: CatFieldMap) {\r\n        this.catFieldMap = catMapJson;\r\n    }\r\n\r\n    public run(cashTransactions: TransactionType[]) {\r\n        const categories: string[] = Object.keys(this.catFieldMap);\r\n        cashTransactions.forEach((ctrans) => {\r\n            if (!ctrans.Flat) {\r\n                const flat: FlatCategory | undefined = categories.find(\r\n                    (cat: string) => {\r\n                        const children: LogicalMap | ColQuery[] = this.catFieldMap[cat];\r\n                        let out;\r\n                        if (Array.isArray(children)) {\r\n                            out = children.every((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        } else {\r\n                            const logicalExec = new LogicalExecutor(children);\r\n                            out = logicalExec.run((colQuery) => {\r\n                                const fieldQExecutor = new ColQueryExecutor(colQuery as ColQuery);\r\n                                return fieldQExecutor.run(ctrans);\r\n                            });\r\n                        }\r\n                        return out;\r\n                    },\r\n                ) as FlatCategory;\r\n                ctrans.Flat = flat;\r\n            }\r\n        });\r\n    }\r\n}\r\n","import moment from 'moment';\r\nimport TransMapExecutor from '../../../utils/trans-map-executor';\r\nimport gsheetUtil from '../../googleapis/gsheet-util-impl';\r\nimport catMapJson from '../../cat-map/cat-map';\r\nimport maintMapJson from '../../maint-map/maint-map';\r\nimport { TransactionType, TransActions, MonthlyCatSplit, MonthlyMaintSplit } from './trans-types';\r\nimport MaintMapExecutor from '../../../utils/maint-map-executor';\r\nimport { TransCategory } from '../../../utils/trans-category';\r\n\r\nexport const loadTransactions = () => ({\r\n    type: TransActions.LOAD_TRANS,\r\n});\r\n\r\nexport const loadCashTransactionSuccess = (payload: any) => ({\r\n    type: TransActions.LOAD_CASH_TRANS_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const loadOnlineTransactionSuccess = (payload: any) => ({\r\n    type: TransActions.LOAD_ONLINE_TRANS_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const loadCashTransactionFailure = (payload: any) => ({\r\n    type: TransActions.LOAD_CASH_TRANS_FAILURE,\r\n    payload,\r\n});\r\n\r\nexport const loadOnlineTransactionFailure = (payload: any) => ({\r\n    type: TransActions.LOAD_ONLINE_TRANS_FAILURE,\r\n    payload,\r\n});\r\n\r\nexport const updateMonthlySplit = (payload: any) => ({\r\n    type: TransActions.UPDATE_MONTHLY_SPLIT,\r\n    payload,\r\n});\r\n\r\nexport const resetMonthlyCatSplit = () => ({\r\n    type: TransActions.RESET_MONTHLY_SPLIT,\r\n});\r\n\r\nexport const updateMonthlyMaintenanceSplit = (payload: any) => ({\r\n    type: TransActions.UPDATE_MONTHLY_MAINT_SPLIT,\r\n    payload,\r\n});\r\n\r\nexport const resetMonthlyMaintenanceCatSplit = () => ({\r\n    type: TransActions.RESET_MONTHLY_MAINT_SPLIT,\r\n});\r\n\r\nexport const resetTransaction = () => ({\r\n    type: TransActions.RESET_TRANS,\r\n});\r\n\r\nexport function filterTransactions(transactions: TransactionType[], filter: TransCategory[]) {\r\n    return transactions.filter((trans) => trans.Category && filter.indexOf(trans.Category) > -1);\r\n}\r\n\r\nexport function fetchTransactions(sheetName = 'Cash Transactions') {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        gsheetUtil.init().then(() => {\r\n            gsheetUtil.getSheetByTitleAsJson(sheetName).then((value) => {\r\n                const transMapExec = new TransMapExecutor(catMapJson as any);\r\n                transMapExec.run(value as TransactionType[]);\r\n                const maintMapExecutor = new MaintMapExecutor(maintMapJson as any);\r\n                maintMapExecutor.run(filterTransactions(\r\n                    value as TransactionType[],\r\n                    [\r\n                        TransCategory['Maintenance Collection'],\r\n                        TransCategory['Corpus Fund'],\r\n                    ]));\r\n                dispatch(loadCashTransactionSuccess(value as any));\r\n                gsheetUtil.saveSheetWithJSON(value);\r\n            }).catch((e: any) => {\r\n                dispatch(loadCashTransactionFailure(e.message));\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\nexport function fetchOnlineTransactions(sheetName = 'Online Transactions') {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        gsheetUtil.init().then(() => {\r\n            gsheetUtil.getSheetByTitleAsJson(sheetName).then((value) => {\r\n                const transMapExec = new TransMapExecutor(catMapJson as any);\r\n                transMapExec.run(value as TransactionType[]);\r\n                const maintMapExecutor = new MaintMapExecutor(maintMapJson as any);\r\n                maintMapExecutor.run(filterTransactions(\r\n                    value as TransactionType[],\r\n                    [\r\n                        TransCategory['Maintenance Collection'],\r\n                        TransCategory['Corpus Fund'],\r\n                    ]));\r\n                dispatch(loadOnlineTransactionSuccess(value as any));\r\n                gsheetUtil.saveSheetWithJSON(value);\r\n            }).catch((e: any) => {\r\n                dispatch(loadOnlineTransactionFailure(e.message));\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\nexport function doMonthlyCatSplit(data: TransactionType[], monthlySplit: MonthlyCatSplit) {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        data.forEach((datum: TransactionType) => {\r\n            const cat = datum.Category;\r\n            const date = datum.Date;\r\n            if (cat && date) {\r\n                const replacedDate = date.replace(/\\//g, '-');\r\n                const month = moment(replacedDate, 'DD-MM-YYYY').format('MMM-YY');\r\n                if (!monthlySplit) {\r\n                    monthlySplit = {};\r\n                }\r\n                if (!monthlySplit[month]) {\r\n                    monthlySplit[month] = {};\r\n                }\r\n                const isDebit = datum.Debit && datum.Debit?.toString() !== '0';\r\n                let amount = isDebit ?\r\n                    parseFloat(datum.Debit!.toString().replace(/,/g, '')) :\r\n                    parseFloat(datum.Credit!.toString().replace(/,/g, ''));\r\n                if (isDebit) {\r\n                    amount = -amount;\r\n                }\r\n                if (amount && typeof amount === 'number') {\r\n                    if (!monthlySplit[month][cat]) {\r\n                        monthlySplit[month][cat] = amount;\r\n                    } else {\r\n                        monthlySplit[month][cat] += amount;\r\n                    }\r\n                } else {\r\n                    console.log('cat', cat, month, datum);\r\n                }\r\n            }\r\n        });\r\n        dispatch(updateMonthlySplit({ ...monthlySplit }));\r\n    };\r\n}\r\n\r\nexport function doMonthlyMaintSplit(data: TransactionType[], monthlySplit: MonthlyMaintSplit) {\r\n    return (dispatch: any) => {\r\n        dispatch(loadTransactions());\r\n        data.forEach((datum: TransactionType) => {\r\n            const flat = datum.Flat;\r\n            const date = datum.Date;\r\n            if (flat && date) {\r\n                const month = moment(date, 'DD/MM/YYYY').format('MMM-YY');\r\n                if (!monthlySplit) {\r\n                    monthlySplit = {};\r\n                }\r\n                if (!monthlySplit[month]) {\r\n                    monthlySplit[month] = {};\r\n                }\r\n                const amount = parseFloat(datum.Credit!.toString().replace(/,/g, ''));\r\n                if (amount && typeof amount === 'number') {\r\n                    if (!monthlySplit[month][flat]) {\r\n                        monthlySplit[month][flat] = amount;\r\n                    } else {\r\n                        monthlySplit[month][flat] += amount;\r\n                    }\r\n                } else {\r\n                    console.log('Flat', flat, month, datum);\r\n                }\r\n            }\r\n        });\r\n        dispatch(updateMonthlyMaintenanceSplit({ ...monthlySplit }));\r\n    };\r\n}\r\n","import {\r\n    CircularProgress, TableBody, TableCell, TableHead, TableRow,\r\n} from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport Table from '@material-ui/core/Table';\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchTransactions } from '../../services/redux/transactions/trans-actions';\r\nimport { TransData } from '../../services/redux/transactions/trans-types';\r\n\r\nfunction CategorizeCash() {\r\n    const sheetInfo: TransData = useSelector((state: any) => state.trans);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTransactions() as any);\r\n    }, [dispatch]);\r\n    const sheetData = sheetInfo.cashTransData;\r\n    const headers = useMemo(() => {\r\n        let out: string[] = [];\r\n        if (sheetData && sheetData.length > 1) {\r\n            out = Object.keys(sheetData[0]);\r\n        }\r\n        return out;\r\n    }, [sheetData]);\r\n    return (\r\n        <>\r\n            <div className=\"cash-trans\">\r\n                {sheetInfo.loading && <CircularProgress />}\r\n                {!sheetInfo.loading && (\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Sl. No.</TableCell>\r\n                                {headers.map((header: string) => (\r\n                                    <TableCell key={header}>{header}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {!!sheetData && sheetData.map((row: { [key: string]: any }, index) => (\r\n                                <TableRow key={JSON.stringify(row)}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    {headers.map((header: string) => (\r\n                                        <TableCell key={`${header}-${row[header]}`}>\r\n                                            {header !== 'Date' ? row[header] :\r\n                                                moment(row[header], 'DD/MM/YYYY').format('DD/MM/YYYY')}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CategorizeCash;\r\n","import {\r\n    CircularProgress, TableBody, TableCell, TableHead, TableRow,\r\n} from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport Table from '@material-ui/core/Table';\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchOnlineTransactions } from '../../services/redux/transactions/trans-actions';\r\nimport { TransData } from '../../services/redux/transactions/trans-types';\r\n\r\nfunction CategorizeOnline() {\r\n    const sheetInfo: TransData = useSelector((state: any) => state.trans);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchOnlineTransactions('Online Transactions') as any);\r\n    }, [dispatch]);\r\n    const sheetData = sheetInfo.onlineTransData;\r\n    const headers = useMemo(() => {\r\n        let out: string[] = [];\r\n        if (sheetData && sheetData.length > 1) {\r\n            out = Object.keys(sheetData[0]);\r\n        }\r\n        return out;\r\n    }, [sheetData]);\r\n    return (\r\n        <>\r\n            <div className=\"online-trans\">\r\n                {sheetInfo.loading && <CircularProgress />}\r\n                {!sheetInfo.loading && (\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Sl. No.</TableCell>\r\n                                {headers.map((header: string) => (\r\n                                    <TableCell key={header}>{header}</TableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {!!sheetData && sheetData.map((row: { [key: string]: any }, index) => (\r\n                                <TableRow key={JSON.stringify(row)}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    {headers.map((header: string) => (\r\n                                        <TableCell key={`${header}-${row[header]}`}>\r\n                                            {header !== 'Date' ? row[header] :\r\n                                                moment(row[header], 'DD-MM-YYYY').format('DD/MM/YYYY')}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CategorizeOnline;\r\n","import {\r\n    Button, Step, StepLabel, Stepper, Typography,\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ReactJson from 'react-json-view';\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\r\nimport { initializeGoogleSheet } from '../../services/redux/google-sheet/sheet-actions';\r\nimport { GoogleSheet } from '../../services/redux/google-sheet/sheet-types';\r\nimport {\r\n    doMonthlyCatSplit,\r\n    doMonthlyMaintSplit,\r\n    filterTransactions,\r\n} from '../../services/redux/transactions/trans-actions';\r\nimport { TransactionType, TransData } from '../../services/redux/transactions/trans-types';\r\nimport CategorizeCash from './categorize-cash';\r\nimport CategorizeOnline from './categorize-online';\r\nimport { TransCategory } from '../../utils/trans-category';\r\nimport './categorizer.css';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        button: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n        instructions: {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\nfunction Categorizer() {\r\n    const [message, setMessage] = useState<string>();\r\n    const [type, setType] = useState<'online' | 'cash' | 'monthly' | undefined>('cash');\r\n    const [secret, setSecret] = useState('');\r\n    const dispatch = useDispatch();\r\n    const sheetData: GoogleSheet = useSelector((state: any) => state.sheet);\r\n    const { initError } = sheetData;\r\n    const transData: TransData = useSelector((state: any) => state.trans);\r\n    const { monthlyCatSplit, cashTransData, onlineTransData, monthlyMaintSplit } = transData;\r\n    useEffect(() => {\r\n        if (secret) {\r\n            dispatch(initializeGoogleSheet(secret) as any);\r\n        }\r\n    }, [dispatch, secret]);\r\n    const splitMonthly = useCallback(() => {\r\n        if (cashTransData && onlineTransData) {\r\n            dispatch(doMonthlyCatSplit([...cashTransData, ...onlineTransData] as any, {}) as any);\r\n            setType(undefined);\r\n        }\r\n    }, [cashTransData, dispatch, onlineTransData]);\r\n    const splitMonthlyMaintenance = useCallback(() => {\r\n        if (cashTransData && onlineTransData) {\r\n            const filteredTransData: TransactionType[] = filterTransactions(\r\n                [...cashTransData as TransactionType[], ...onlineTransData as TransactionType[]],\r\n                [\r\n                    TransCategory['Maintenance Collection'],\r\n                ],\r\n            );\r\n            dispatch(doMonthlyMaintSplit(filteredTransData as any, {}) as any);\r\n            setType(undefined);\r\n        }\r\n    }, [cashTransData, dispatch, onlineTransData]);\r\n    const saveCategorized = useCallback(() => {\r\n        gsheetUtil.updateCategorySheet(monthlyCatSplit as any).then(() => {\r\n            console.log('Saved');\r\n            setMessage('Summary Updated');\r\n        });\r\n    }, [monthlyCatSplit]);\r\n    const saveMaitenenceSplit = useCallback(() => {\r\n        gsheetUtil.udpateMaintenanceSheet(monthlyMaintSplit as any).then(() => {\r\n            console.log('Saved');\r\n            setMessage('Maintenence Split Updated');\r\n        });\r\n    }, [monthlyMaintSplit]);\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const steps = useMemo(() => (\r\n        ['Cash Transactions', 'Online Transactions', 'Map Transactions', 'Categorize Maintenance']), []);\r\n    const isStepOptional = useCallback((index: number) => false, []);\r\n    const isCompletedStep = useCallback((index: number) => false, []);\r\n    const classes = useStyles();\r\n    const handleBack = useCallback(() => {\r\n        switch (activeStep) {\r\n        case 3: {\r\n            setType(undefined);\r\n            setActiveStep(2);\r\n            break;\r\n        }\r\n        case 2: {\r\n            setType('online');\r\n            setActiveStep(1);\r\n            break;\r\n        }\r\n        case 1: {\r\n            setType('cash');\r\n            setActiveStep(0);\r\n            break;\r\n        }\r\n        default:\r\n            // Nothing to be done\r\n        }\r\n    }, [activeStep]);\r\n    const handleSkip = useCallback(() => {}, []);\r\n    const handleNext = useCallback(() => {\r\n        switch (activeStep) {\r\n        case 0: {\r\n            setType('online');\r\n            setActiveStep(1);\r\n            break;\r\n        }\r\n        case 1: {\r\n            setType(undefined);\r\n            setActiveStep(2);\r\n            splitMonthly();\r\n            break;\r\n        }\r\n        case 2: {\r\n            setType(undefined);\r\n            setActiveStep(3);\r\n            splitMonthlyMaintenance();\r\n            break;\r\n        }\r\n        default:\r\n            // Nothing to be done\r\n        }\r\n    }, [activeStep, splitMonthlyMaintenance, splitMonthly]);\r\n    return (\r\n        <div>\r\n            {!!message && <Alert severity=\"info\">{message}</Alert> }\r\n            {!!initError && <Alert severity=\"error\">{initError}</Alert>}\r\n            <div className=\"stepper-header\">\r\n                <Stepper className=\"steps\" activeStep={activeStep}>\r\n                    {steps.map((label, index) => {\r\n                        const stepProps: { completed?: boolean } = {};\r\n                        const labelProps: { optional?: React.ReactNode } = {};\r\n                        if (isStepOptional(index)) {\r\n                            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n                        }\r\n                        if (isCompletedStep(index)) {\r\n                            stepProps.completed = false;\r\n                        }\r\n                        return (\r\n                            <Step key={label} {...stepProps}>\r\n                                <StepLabel {...labelProps}>{label}</StepLabel>\r\n                            </Step>\r\n                        );\r\n                    })}\r\n                </Stepper>\r\n                <div className=\"nav\">\r\n                    <Button\r\n                        disabled={activeStep === 0}\r\n                        onClick={handleBack}\r\n                        className={classes.button}\r\n                    >\r\n                        Back\r\n                    </Button>\r\n                    {isStepOptional(activeStep) && (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleSkip}\r\n                            className={classes.button}\r\n                        >\r\n                            Skip\r\n                        </Button>\r\n                    )}\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleNext}\r\n                        className={classes.button}\r\n                    >\r\n                        {(activeStep === steps.length - 1 && 'Save') || 'Next'}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"control\">\r\n                {activeStep === 2 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        disabled={!monthlyCatSplit}\r\n                        onClick={saveCategorized}\r\n                    >\r\n                        Save Categorized\r\n                    </Button>\r\n                )}&nbsp;&nbsp;&nbsp;\r\n                {activeStep === 3 && (\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        disabled={!monthlyMaintSplit}\r\n                        onClick={saveMaitenenceSplit}\r\n                    >\r\n                        Save Split\r\n                    </Button>\r\n                )}\r\n            </div>\r\n            {!initError && !!sheetData.sheetConfig.secret && (\r\n                <>\r\n                    {activeStep === 0 && <CategorizeCash />}\r\n                    {activeStep === 1 && <CategorizeOnline />}\r\n                    {activeStep === 2 && !!monthlyCatSplit && <ReactJson src={monthlyCatSplit} />}\r\n                    {activeStep === 3 && !!monthlyMaintSplit && <ReactJson src={monthlyMaintSplit} />}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Categorizer;\r\n","import React from 'react';\r\nimport Categorizer from '../components/categorizer';\r\n\r\nconst Categorize: React.FC = () => (\r\n    <Categorizer />\r\n);\r\n\r\nexport default Categorize;\r\n","import axios from 'axios';\r\nimport jwt from 'jsonwebtoken';\r\nimport { uuid } from 'uuidv4';\r\nimport { getConfig } from '..';\r\n\r\nexport const generateTokenAssertion = async (expiresIn = Math.floor(Date.now() / 1000 + 3600)) => {\r\n    const email = '';\r\n    const { clientEmail: clientId, privateKey } = getConfig();\r\n    const claims = {\r\n        iss: clientId,\r\n        sub: email,\r\n        aud: 'https://www.googleapis.com/oauth2/v4/token',\r\n        scope: 'https://www.googleapis.com/auth/drive',\r\n        exp: expiresIn,\r\n        iat: Math.floor(Date.now() / 1000),\r\n        jti: uuid(),\r\n    };\r\n\r\n    const token = jwt.sign(claims, privateKey || '', {\r\n        algorithm: 'RS256',\r\n    });\r\n\r\n    return token;\r\n};\r\nexport const generateAuthToken = async () => {\r\n    const { clientEmail: clientId } = getConfig();\r\n    const tokenAssertion = await generateTokenAssertion();\r\n    const url = 'https://www.googleapis.com/oauth2/v4/token';\r\n    const body = {\r\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n        client_id: clientId,\r\n        assertion: tokenAssertion,\r\n    };\r\n\r\n    const response = await axios.post(url, body);\r\n\r\n    if (response.status === 200) {\r\n        return response.data.access_token;\r\n    }\r\n    throw new Error(response.data);\r\n};\r\n\r\nexport default { generateToken: generateAuthToken, generateTokenAssertion };\r\n","import axios from 'axios';\r\nimport { getConfig } from '..';\r\nimport { generateAuthToken } from './google-token';\r\n\r\nexport const VERIFIED_FILE_PREFIX = 'VERIFIED_';\r\n\r\nconst BILLS_FOLDER_ID = '1zVRwXWZjfAS3Hk1rXq-XtqurPcQ-yAW-'; // bills directory\r\n\r\nexport async function fetchFilesFromFolder(folderId: string): Promise<any[]> {\r\n    const { googleAPIKey: apiKey } = getConfig();\r\n    const folderIdFinal = folderId || BILLS_FOLDER_ID;\r\n    // eslint-disable-next-line max-len\r\n    const query = encodeURI(`'${folderIdFinal}' in parents and (mimeType = 'image/jpeg' or mimeType = 'image/png' or mimeType = 'application/pdf' or mimeType = 'application/vnd.google-apps.folder')`);\r\n    try {\r\n        const response = await axios.get(\r\n            `https://www.googleapis.com/drive/v3/files?q=${query}&key=${apiKey}`,\r\n        );\r\n\r\n        const { files } = response.data;\r\n        console.log('Fetched files:', files);\r\n        return files;\r\n        // Do something with the fetched files\r\n    } catch (error: any) {\r\n        console.error('Error fetching files:', error?.message || error);\r\n    }\r\n    return [];\r\n}\r\n\r\nexport const moveFile = async (fileId: string, toDirectoryId: string) => {\r\n    try {\r\n        const authToken = await generateAuthToken();\r\n        const response = await axios.patch(\r\n            `https://www.googleapis.com/drive/v3/files/${fileId}`,\r\n            {\r\n                parents: toDirectoryId,\r\n            },\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            },\r\n        );\r\n\r\n        console.log('File moved successfully:', response.data);\r\n        if (response.status === 200) {\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error occurred while moving the file:', error);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const renameFile = async (fileId: string, name: string) => {\r\n    try {\r\n        const authToken = await generateAuthToken();\r\n        const response = await axios.patch(\r\n            `https://www.googleapis.com/drive/v3/files/${fileId}`,\r\n            {\r\n                name: `${VERIFIED_FILE_PREFIX}${name}`,\r\n            },\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${authToken}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            },\r\n        );\r\n\r\n        console.log('File moved successfully:', response.data);\r\n        if (response.status === 200) {\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error occurred while moving the file:', error);\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default { fetchFilesFromFolder, moveFile };\r\n","export default [\r\n    'Yaswanth auditor fees',\r\n    'BWSSB Water bill',\r\n    'Diesel Purchased',\r\n    'Bescom electricity bill payment',\r\n    'Housekeeping Salary (Hyrunnisa / Sunanda)',\r\n    'Security Salary',\r\n    'Garden Maintenance / Work',\r\n    'Garbage Collection Vendor BBMP/RR Cleaning Services',\r\n    'Borewell And Motor Maintenance/Repair',\r\n    'Annual Bonus',\r\n    'Lift Maintenance (Johnson)',\r\n    'HK items (bleaching powder,garbage bin etc)',\r\n    'Health Club Maintenance',\r\n    'EB / Electrical / Plumbing Repairs',\r\n    'Apartment repairs related - Concrete floor - Sivaji',\r\n    'Apartment Safety - Fire Extiguisher',\r\n    'CCTV / Intercomm',\r\n    'Misc expenses - Cash Paid for unbilled services',\r\n    'Apartment developments - Stationary/books/pens/papers/clips/file/folders purchased',\r\n    'Apartment work done By Security and Others',\r\n    'Septic Tank Repair / Cleaning',\r\n    'Water Tank/Tanks Cleaning',\r\n    'Generator Maintenance and Repair',\r\n    'Festival/Holiday Celebration',\r\n    'Drinking Water for Employees',\r\n    'BAF Subscription Charges',\r\n];\r\n","import expenseList from './expense-list';\r\n\r\nexport function parseExpenseInfo(text: string, expenseTypes: string[] = expenseList) {\r\n    // Initialize the outputs\r\n    let date = '';\r\n    let amount = '';\r\n    let description = '';\r\n\r\n    // Split the text based on space, newline, or underscore delimiter\r\n    const words = text.split(/[\\s_]/m).filter((word) => word && word !== '/');\r\n\r\n    // Iterate through the words to find the relevant information\r\n    words.forEach((word) => {\r\n        // Parse date\r\n        if (!date && /^\\d{2}-\\d{2}-\\d{4}$/.test(word)) {\r\n            date = word;\r\n        }\r\n        // Parse amount\r\n        if (!amount && /^\\d+(\\.\\d{1,2})?$/.test(word)) {\r\n            amount = word;\r\n        }\r\n    });\r\n    // Parse description\r\n    if (!description) {\r\n        description = findTopMatchingText(expenseTypes, words);\r\n    }\r\n    return {\r\n        date,\r\n        amount: parseFloat(amount) || 0,\r\n        description,\r\n    };\r\n}\r\n\r\nexport function findTopMatchingText(texts: string[], words: string[]) {\r\n    const rankMap = new Map<string, number>();\r\n\r\n    // Iterate through each text and count the number of word matches\r\n    texts.forEach((text) => {\r\n        let rank = 0;\r\n        const key = text.toLowerCase();\r\n        words.forEach((word) => {\r\n            if (key.includes(word.toLowerCase())) {\r\n                rank += 1;\r\n            }\r\n        });\r\n\r\n        rankMap.set(text, rank);\r\n    });\r\n\r\n    const valueArray = Array.from(rankMap);\r\n    // Sort the texts based on the rank in descending order\r\n    const sortedTexts = [...valueArray].sort((a, b) => b[1] - a[1]);\r\n\r\n    // Return the top matching text\r\n    if (sortedTexts.length > 0 && sortedTexts[0][1] !== 0) {\r\n        return sortedTexts[0][0];\r\n    }\r\n\r\n    return ''; // Return empty string if no matches are found\r\n}\r\n","/* eslint-disable max-len */\r\nimport axios from 'axios';\r\n\r\nconst getData = (file: File) => {\r\n    const formData = new FormData();\r\n    formData.append('base64Image', file);\r\n    axios\r\n        .post('https://api.ocr.space/parse/image', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                apikey: 'K84187439488957',\r\n            },\r\n        })\r\n        .then((response) => {\r\n            console.log(response.data);\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n};\r\nexport const getVision = (imageURL: string) => {\r\n    const formData = new FormData();\r\n    formData.append('url', imageURL);\r\n    formData.append('language', 'eng');\r\n    formData.append('isOverlayRequired', 'true');\r\n    // formData.append('fileType', 'JPG');\r\n    return axios\r\n        .post('https://api.ocr.space/parse/image', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                apikey: 'K84187439488957',\r\n            },\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n};\r\nfunction dataURItoBlob(dataURI: string) {\r\n    // convert base64/URLEncoded data component to raw binary data held in a string\r\n    let byteString;\r\n    if (dataURI.split(',')[0].indexOf('base64') >= 0) {\r\n        byteString = atob(dataURI.split(',')[1]);\r\n    } else {\r\n        byteString = unescape(dataURI.split(',')[1]);\r\n    }\r\n    // separate out the mime component\r\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n\r\n    // write the bytes of the string to a typed array\r\n    const ia = new Uint8Array(byteString.length);\r\n    for (let i = 0; i < byteString.length; i += 1) {\r\n        ia[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    return new Blob([ia], { type: mimeString });\r\n}\r\nexport const getDatafromDataURI = async (dataURI: string) => {\r\n    const blob = dataURItoBlob(dataURI);\r\n    const file = new File([blob], 'canvasImage.jpg', { type: 'image/jpeg' });\r\n    const formData = new FormData();\r\n    formData.append('base64Image', file);\r\n    const response = await axios\r\n        .post('https://api.ocr.space/parse/image', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                apikey: 'K84187439488957',\r\n            },\r\n        });\r\n    return response;\r\n};\r\n\r\nexport default getData;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { fetchFilesFromFolder } from '../../services/googleapis/drive-util';\r\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\r\nimport { ExpenseState, GoogleDriveFile } from './expense-types';\r\nimport TransMapExecutor from '../../utils/trans-map-executor';\r\nimport { TransactionType } from '../../services/redux/transactions/trans-types';\r\nimport { TransCategory } from '../../utils/trans-category';\r\nimport catMapJson from '../../services/cat-map/cat-map';\r\nimport { parseExpenseInfo } from '../../services/ocr/parser-utils';\r\nimport { getVision } from '../../services/ocr';\r\n\r\nexport function fetchFiles(\r\n    setFilesList: React.Dispatch<React.SetStateAction<GoogleDriveFile[]>>,\r\n    folderId: string = '',\r\n) {\r\n    fetchFilesFromFolder(folderId).then((files) => {\r\n        setFilesList(files);\r\n    });\r\n}\r\n\r\nexport const saveOnlineTransSheet = async (data: any, sheetTitle = 'Online Transactions') => {\r\n    const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\r\n    if (!sheet) {\r\n        await gsheetUtil.addSheet({\r\n            headerValues: [\r\n                'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category', 'Flat', 'Bill',\r\n            ],\r\n            title: sheetTitle,\r\n        });\r\n    }\r\n    const sheetData = (JSON.parse(JSON.stringify(data)) as any[]).map((row) => {\r\n        row.Date = moment(row.Date).format('DD-MM-YYYY');\r\n        return row;\r\n    });\r\n    await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\r\n    return true;\r\n};\r\n\r\nexport const saveOnlineTransactionWithBill = async (data: ExpenseState, fileId: string) => {\r\n    await searchUpdateOnlineTransWithBills(data.date, data.amount, data.category || '', getDriveFileURL(fileId));\r\n};\r\n\r\nexport async function searchUpdateOnlineTransWithBills(\r\n    date: any,\r\n    debit: any,\r\n    category: string,\r\n    billURL: string,\r\n) {\r\n    let searchColumns: Record<string, any> = {\r\n        Date: date,\r\n        Debit: debit,\r\n        Category: category,\r\n    };\r\n    try {\r\n        await gsheetUtil.searchUpdateRecord('Online Transactions', searchColumns, 'Bill', billURL);\r\n    } catch (e) {\r\n        searchColumns = {\r\n            Debit: debit,\r\n            Category: category,\r\n        };\r\n        await gsheetUtil.searchUpdateRecord('Online Transactions', searchColumns, 'Bill', billURL);\r\n    }\r\n}\r\n\r\nexport const saveCashTransSheet = async (data: any, sheetTitle = 'Cash Transactions') => {\r\n    const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\r\n    if (!sheet) {\r\n        await gsheetUtil.addSheet({\r\n            headerValues: [\r\n                'Date',\r\n                'Description',\r\n                'Item Description/Purpose',\r\n                'Qty',\r\n                'Price',\r\n                'Debit',\r\n                'Credit',\r\n                'Total',\r\n                'Category',\r\n                'Flat',\r\n                'Bill',\r\n            ],\r\n            title: sheetTitle,\r\n        });\r\n    }\r\n    const sheetData = JSON.parse(JSON.stringify(data));\r\n    await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\r\n    return true;\r\n};\r\n\r\nexport const getDriveFileURL = (fileId: string) => `https://drive.google.com/uc?id=${fileId}`;\r\n\r\nexport const getDataInSheetFormat = (data: ExpenseState, selectedBill?: string) => {\r\n    const out: TransactionType = {\r\n        Date: data.date ?? '',\r\n        Description: data.description ?? '',\r\n        Debit: data.amount ?? 0,\r\n        Credit: 0,\r\n        Category: data.category as TransCategory,\r\n        Total: 0,\r\n    };\r\n    if (selectedBill) {\r\n        out.Bill = getDriveFileURL(selectedBill);\r\n    }\r\n    return out;\r\n};\r\n\r\nexport const setCategory = (data: ExpenseState) => {\r\n    const value: TransactionType = getDataInSheetFormat(data);\r\n    const transMapExec = new TransMapExecutor(catMapJson as any);\r\n    transMapExec.run([value] as TransactionType[]);\r\n    data.category = value.Category;\r\n};\r\n\r\nexport function extractBillData(\r\n    fileName: string | undefined,\r\n    formData: ExpenseState,\r\n    bill: GoogleDriveFile,\r\n): Promise<ExpenseState> {\r\n    let data: ExpenseState = {};\r\n    const promise = new Promise<ExpenseState>((resolve) => {\r\n        if (fileName && fileName.indexOf('_') > -1) {\r\n            data = parseExpenseInfo(fileName);\r\n        }\r\n        if (!data.amount || !data.date || !data.description) {\r\n            getVision(`https://drive.google.com/uc?id=${bill.id}`).then((response: any) => {\r\n                const parsedText = response.data?.ParsedResults[0]?.ParsedText || '';\r\n                const parsedData = parseExpenseInfo(parsedText);\r\n                parsedData.amount = data.amount && data.amount > 0 ? data.amount : parsedData.amount;\r\n                parsedData.description = data.description || parsedData.description;\r\n                parsedData.date = data.date ? data.date : parsedData.date;\r\n                const parsedFormData = {\r\n                    ...formData,\r\n                    ...parsedData,\r\n                };\r\n                setCategory(parsedFormData);\r\n                resolve(parsedFormData);\r\n            });\r\n        } else {\r\n            const parsedFormData = ({\r\n                ...formData,\r\n                ...data,\r\n            });\r\n            setCategory(parsedFormData);\r\n            resolve(parsedFormData);\r\n        }\r\n    });\r\n    return promise;\r\n}\r\n\r\nexport default { fetchFiles, saveCashTransSheet, saveOnlineTransSheet };\r\n","import { CatItem } from '../../services/service-types';\r\n\r\nexport type ExpenseFormProps = ExpenseState & {\r\n    callback: (state: ExpenseState) => void;\r\n    handleClose: () => void;\r\n    image: string;\r\n    mimeType: string;\r\n    expenseCategories: CatItem[];\r\n};\r\n\r\nexport enum TransactionType {\r\n    Online = 'Online',\r\n    Cash = 'Cash',\r\n}\r\n\r\nexport type ExpenseState = {\r\n    date?: string,\r\n    amount?: number,\r\n    description?: string,\r\n    category?: string,\r\n    transactionType?: TransactionType;\r\n};\r\n\r\nexport type GoogleDriveFile = {\r\n    id: string;\r\n    name: string;\r\n    mimeType: string;\r\n    kind: string;\r\n};\r\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GoogleDriveFile } from './expense-types';\r\nimport { getDriveFileURL } from './bill-utils';\r\nimport './expense.css';\r\n\r\ntype BillGridType = {\r\n    bills: GoogleDriveFile[];\r\n    handleClick: (image: GoogleDriveFile) => void;\r\n};\r\n\r\nconst BillGrid = ({ bills, handleClick }: BillGridType) => (\r\n    <div>\r\n        <Grid container spacing={2}>\r\n            {bills.map((bill, index) => (\r\n                <Grid\r\n                    item\r\n                    key={`Image ${index + 1}`}\r\n                    xs={2}\r\n                    className=\"bill-grid-item\"\r\n                    onClick={() => handleClick(bill)}\r\n                >\r\n                    {bill.mimeType.startsWith('image/') && (\r\n                        <img\r\n                            src={getDriveFileURL(bill.id)}\r\n                            alt={`Bill ${index + 1}`}\r\n                            style={{ width: 300, height: 300, cursor: 'pointer', padding: '5px' }}\r\n                        />\r\n                    )}\r\n                    {bill.mimeType === 'application/pdf' && (\r\n                        <embed\r\n                            src={getDriveFileURL(bill.id)}\r\n                            title={`Bill ${index + 1}`}\r\n                            style={{ width: 300, height: 300, cursor: 'pointer', padding: '5px' }}\r\n                            type=\"application/pdf\"\r\n                        />\r\n                    )}\r\n                    <h3 style={{ textAlign: 'center' }}>{bill.name}</h3>\r\n                </Grid>\r\n            ))}\r\n            {bills.length === 0 && (<h4 className=\"no-bills-msg\">No bills to display</h4>)}\r\n        </Grid>\r\n    </div>\r\n);\r\n\r\nexport default BillGrid;\r\n","/* eslint-disable react/react-in-jsx-scope */\r\nimport React, { useCallback, useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Dialog,\r\n    Select,\r\n    Button,\r\n    MenuItem,\r\n    InputLabel,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControl,\r\n    DialogActions,\r\n    TextField,\r\n    FormHelperText,\r\n    RadioGroup,\r\n    FormControlLabel,\r\n    Radio,\r\n} from '@material-ui/core';\r\nimport { ExpenseFormProps, ExpenseState } from './expense-types';\r\nimport './expense.css';\r\n\r\nconst ExpenseForm = ({\r\n    callback, date, amount, description, category, image, handleClose, expenseCategories, mimeType, transactionType,\r\n}: ExpenseFormProps) => {\r\n    const [formData, setData] = useState<ExpenseState>({\r\n        date: moment(date ?? '01-04-2023', 'DD-MM-YYYY').format('YYYY-MM-DD'),\r\n        amount: amount ?? 0,\r\n        description: description ?? 'text',\r\n        category: category ?? '',\r\n        transactionType,\r\n    });\r\n\r\n    const [errorData, setErrorData] = useState({\r\n        date: '',\r\n        amount: '',\r\n        description: '',\r\n        category: '',\r\n        transactionType: '',\r\n    });\r\n\r\n    const handleChange = useCallback((event: any) => {\r\n        const { name, value } = event.target;\r\n        setData((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    }, []);\r\n\r\n    const handleSubmit = useCallback(() => {\r\n        let error = false;\r\n        if (!formData.transactionType) {\r\n            errorData.transactionType = 'Select a transaction type';\r\n            error = true;\r\n        }\r\n        if (!formData.amount) {\r\n            errorData.amount = 'Enter a valid amount';\r\n            error = true;\r\n        }\r\n        if (!formData.date || formData.date.toLowerCase() === 'invalid date') {\r\n            errorData.date = 'Enter a valid date';\r\n            error = true;\r\n        }\r\n        if (!formData.description) {\r\n            errorData.description = 'Enter a valid description';\r\n            error = true;\r\n        }\r\n        if (!formData.category) {\r\n            errorData.category = 'Select a category';\r\n            error = true;\r\n        }\r\n        if (error) {\r\n            setErrorData({ ...errorData });\r\n        } else {\r\n            const formDataClone = JSON.parse(JSON.stringify(formData));\r\n            formDataClone.date = moment(formDataClone.date, 'YYYY-MM-DD').format('DD-MM-YYYY');\r\n            callback(formDataClone);\r\n        }\r\n    }, [callback, errorData, formData]);\r\n\r\n    return (\r\n        <div className=\"expense-dialog\">\r\n            <Dialog open onClose={handleClose} className=\"bill-grid-dialog\" fullWidth scroll=\"paper\">\r\n                <DialogTitle>Form</DialogTitle>\r\n                <DialogContent>\r\n                    {mimeType.startsWith('image/') && (\r\n                        <img\r\n                            className=\"expense-bill-img\"\r\n                            src={`https://drive.google.com/uc?id=${image}`}\r\n                            alt=\"Expense Bill\"\r\n                        />\r\n                    )}\r\n                    {mimeType === 'application/pdf' && (\r\n                        <embed\r\n                            className=\"expense-bill-img\"\r\n                            src={`https://drive.google.com/uc?id=${image}`}\r\n                            title=\"Expense Bill\"\r\n                        />\r\n                    )}\r\n                    <form>\r\n                        <FormControl variant=\"outlined\" fullWidth margin=\"normal\" error={!!errorData.transactionType}>\r\n                            <RadioGroup\r\n                                aria-label=\"Transaction Type\"\r\n                                name=\"transactionType\"\r\n                                value={formData.transactionType}\r\n                                onChange={handleChange}\r\n                                row\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"Cash\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Cash\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    value=\"Online\"\r\n                                    control={<Radio color=\"primary\" />}\r\n                                    label=\"Online\"\r\n                                />\r\n                            </RadioGroup>\r\n                            {!!errorData.transactionType &&\r\n                            <FormHelperText>{errorData.transactionType}</FormHelperText>\r\n                            }\r\n                        </FormControl>\r\n                        <TextField\r\n                            type=\"date\"\r\n                            name=\"date\"\r\n                            label=\"Date\"\r\n                            value={formData.date}\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            placeholder=\"DD-MM-YYYY\"\r\n                            error={!!errorData.date}\r\n                            helperText={errorData.date}\r\n                        />\r\n                        <TextField\r\n                            type=\"number\"\r\n                            name=\"amount\"\r\n                            label=\"Amount\"\r\n                            value={formData.amount}\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            error={!!errorData.amount}\r\n                            helperText={errorData.amount}\r\n                        />\r\n                        <TextField\r\n                            type=\"text\"\r\n                            name=\"description\"\r\n                            label=\"Description\"\r\n                            value={formData.description}\r\n                            onChange={handleChange}\r\n                            fullWidth\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            error={!!errorData.description}\r\n                            helperText={errorData.description}\r\n                        />\r\n                        <FormControl variant=\"outlined\" fullWidth margin=\"normal\" error={!!errorData.category}>\r\n                            <InputLabel>Category</InputLabel>\r\n                            <Select\r\n                                name=\"category\"\r\n                                value={formData.category}\r\n                                onChange={handleChange}\r\n                                label=\"Category\"\r\n                            >\r\n                                {expenseCategories.map((cat) => (\r\n                                    <MenuItem key={cat.key} value={cat.key}>{cat.label}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                            {!!errorData.category && <FormHelperText>{errorData.category}</FormHelperText>}\r\n                        </FormControl>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => handleClose()} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleSubmit} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { GoogleDriveFile } from './expense-types';\r\n\r\ntype FolderGridProp = { folders: GoogleDriveFile[]; handleClick:(folderId: string) => void };\r\nconst FolderGrid = ({ folders, handleClick }: FolderGridProp) => (\r\n    <div>\r\n        <Grid container spacing={2}>\r\n            {folders.map((folder, index) => (\r\n                <Grid item key={`Image ${index + 1}`} xs={2}>\r\n                    <img\r\n                        src=\"/images/folder.jpg\"\r\n                        id={`folder-${folder.name}`}\r\n                        alt={`Folder ${index + 1}`}\r\n                        style={{ width: 200, height: 200, cursor: 'pointer', padding: '5px' }}\r\n                        onClick={() => handleClick(folder.id)}\r\n                    />\r\n                    <h3 style={{ textAlign: 'center' }}>{folder.name}</h3>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    </div>\r\n);\r\n\r\nexport default FolderGrid;\r\n","import { GoogleSpreadsheet, GoogleSpreadsheetWorksheet } from 'google-spreadsheet';\r\nimport moment from 'moment';\r\nimport { getConfig } from '..';\r\nimport gsheetUtil from '../googleapis/gsheet-util-impl';\r\nimport { CatItem, MonthlySheetDataType, Transaction } from '../service-types';\r\n\r\nexport interface Sheet {\r\n    getExpenseCategories(): Promise<CatItem[]>;\r\n    getMonthData(monthSheet: string): Promise<Transaction[]>;\r\n    setMonthData(monthSheet: string): Promise<boolean>;\r\n}\r\nconst EXP_STOP_ROW_VAL = 'Total Expense';\r\nconst CAT_COLUMN = 0;\r\nconst SUMMARY_SHEET = 'Summary';\r\nconst MONTHS_SHORT_TXT = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\nexport class TransSheet implements Sheet {\r\n    private initProm: Promise<GoogleSpreadsheet>;\r\n    private sheetIntialized = false;\r\n    private sheets: Map<string, GoogleSpreadsheetWorksheet> = new Map<string, GoogleSpreadsheetWorksheet>();\r\n\r\n    constructor() {\r\n        this.initProm = gsheetUtil.init();\r\n        this.initProm.then(() => {\r\n            this.sheetIntialized = true;\r\n        });\r\n    }\r\n\r\n    private async getSheet(sheetTitle: string) {\r\n        if (!this.sheetIntialized) {\r\n            await this.initProm;\r\n        }\r\n        return new Promise<GoogleSpreadsheetWorksheet>((resolve, reject) => {\r\n            if (this.sheets.has(sheetTitle)) {\r\n                resolve(this.sheets.get(sheetTitle) as GoogleSpreadsheetWorksheet);\r\n            } else {\r\n                gsheetUtil.getSheetByTitle(sheetTitle).then((sheet) => {\r\n                    if (sheet) {\r\n                        this.sheets.set(sheetTitle, sheet);\r\n                        resolve(sheet);\r\n                    } else {\r\n                        reject();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    public async getExpenseCategories() {\r\n        return new Promise<CatItem[]>((resolve, reject) => {\r\n            let result: CatItem[] = [];\r\n            this.getSheet(SUMMARY_SHEET).then((sheet) => {\r\n                const sheetCol = gsheetUtil.getColumnWithSheet(sheet, CAT_COLUMN);\r\n                const expList = sheetCol.map((col) => col.value);\r\n                const filteredExpList = [];\r\n                for (let i = 1; i < expList.length - 1; i += 1) {\r\n                    if (expList[i] !== EXP_STOP_ROW_VAL) {\r\n                        filteredExpList.push(expList[i]);\r\n                        result = filteredExpList.map((expense: any) => ({\r\n                            key: expense,\r\n                            label: expense,\r\n                        }));\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n                resolve(result);\r\n            });\r\n        });\r\n    }\r\n\r\n    private async parseMonthlySheet(sheet: GoogleSpreadsheetWorksheet) {\r\n        const rows = await sheet.getRows();\r\n        const out: Transaction[] = rows.map((row) => ({\r\n            Date: moment(row.Date, 'DD/MM/YYYY').toDate(),\r\n            Description: row.Desc,\r\n            'Cheque No': row.ChqNo,\r\n            Debit: parseFloat(row.Amount) < 0 ? parseFloat(row.Amount) : 0,\r\n            Credit: parseFloat(row.Amount) >= 0 ? parseFloat(row.Amount) : 0,\r\n            Total: parseFloat(row.Balance),\r\n            type: row.Type,\r\n        }));\r\n        return out;\r\n    }\r\n\r\n    public getMonthData(monthSheet: string) {\r\n        return new Promise<Transaction[]>((resolve, reject) => {\r\n            this.getSheet(monthSheet).then(async (sheet) => {\r\n                const result = await this.parseMonthlySheet(sheet);\r\n                resolve(result);\r\n            }).catch(() => {\r\n                gsheetUtil.addSheet({\r\n                    headerValues: [\r\n                        'Date', 'Desc', 'ChqNo', 'Amount', 'Type', 'Balance',\r\n                    ],\r\n                    title: monthSheet,\r\n                }).then((sheet) => {\r\n                    this.sheets.set(monthSheet, sheet);\r\n                    resolve([]);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private pushSheetData(trans: Transaction, rows: MonthlySheetDataType[]) {\r\n        rows.push({\r\n            Date: moment(trans.Date).format('DD-MM-YYYY'),\r\n            Desc: trans.Description,\r\n            Balance: trans.Total,\r\n            Amount: trans.Credit - trans.Debit,\r\n            ChqNo: trans['Cheque No'],\r\n            Type: trans.type,\r\n        });\r\n    }\r\n\r\n    private transCompare(sheetData: Transaction, fileData: Transaction) {\r\n        return (\r\n            moment(sheetData.Date).format('DD/MM/YYY') === moment(fileData.Date).format('DD/MM/YYY') &&\r\n            sheetData.Description === fileData.Description &&\r\n            sheetData.Debit === fileData.Debit &&\r\n            sheetData.Credit === fileData.Credit &&\r\n            sheetData.type === fileData.type\r\n        );\r\n    }\r\n\r\n    private async mergeSheetData(sheet: GoogleSpreadsheetWorksheet, sheetData: Transaction[]) {\r\n        const { transactions } = getConfig().appData;\r\n        const rows: MonthlySheetDataType[] = [];\r\n        if (sheetData.length > 0) {\r\n            transactions.forEach((trans) => {\r\n                const fIndex = sheetData.findIndex((sData) => this.transCompare(sData, trans));\r\n                if (fIndex === -1) {\r\n                    this.pushSheetData(trans, rows);\r\n                }\r\n            });\r\n            sheetData.forEach((sheetTrans) => {\r\n                const fIndex = transactions.findIndex((fileData) => this.transCompare(fileData, sheetTrans));\r\n                if (fIndex === -1) {\r\n                    transactions.push(sheetTrans);\r\n                }\r\n            });\r\n        } else {\r\n            transactions.forEach((trans) => this.pushSheetData(trans, rows));\r\n        }\r\n        if (rows.length) {\r\n            await sheet.addRows(rows);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public async setMonthData(monthSheet: string) {\r\n        const fetchedData = await this.getMonthData(monthSheet);\r\n        const sheet = await this.getSheet(monthSheet);\r\n        await this.mergeSheetData(sheet, fetchedData);\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default new TransSheet();\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport { VERIFIED_FILE_PREFIX, renameFile } from '../../services/googleapis/drive-util';\r\nimport BillGrid from './bill-grid';\r\nimport ExpenseForm from './expense';\r\nimport { ExpenseState, GoogleDriveFile, TransactionType } from './expense-types';\r\nimport {\r\n    extractBillData, fetchFiles, getDataInSheetFormat, saveCashTransSheet, saveOnlineTransactionWithBill,\r\n} from './bill-utils';\r\nimport FolderGrid from './folder-grid';\r\nimport { TransSheet } from '../../services/sheet';\r\nimport { CatItem } from '../../services/service-types';\r\nimport './new-bills.css';\r\n\r\nexport default function NewBills() {\r\n    const [showLoader, setShowLoader] = useState(false);\r\n    const [fileList, setFilesList] = useState<GoogleDriveFile[]>([]);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [selectedBill, setSelectedBill] = useState<GoogleDriveFile>();\r\n    const [selectedFolder, setSelectedFolder] = useState('');\r\n    const [formData, setFormData] = useState<ExpenseState>({\r\n        date: '',\r\n        amount: 0,\r\n        description: '',\r\n        category: '',\r\n    });\r\n    const handleFolderClick = useCallback((folderId: string) => {\r\n        setSelectedFolder(folderId);\r\n    }, []);\r\n    const handleClick = useCallback(async (image: GoogleDriveFile) => {\r\n        setSelectedBill(image);\r\n        setShowLoader(true);\r\n        const fileInfo = fileList.find((file) => file.id === image.id);\r\n        const fileName = fileInfo?.name;\r\n        const parsedFormData = await extractBillData(fileName, formData, image);\r\n        setShowLoader(false);\r\n        setFormData(parsedFormData);\r\n        setOpenDialog(true);\r\n    }, [fileList, formData]);\r\n\r\n    const handleClose = useCallback((data?: ExpenseState) => {\r\n        if (selectedBill && data?.date) {\r\n            const fileInfo = fileList.find((file) => file.id === selectedBill.id);\r\n            if (selectedBill && fileInfo) {\r\n                renameFile(selectedBill.id, fileInfo.name).then(() => {\r\n                    fetchFiles(setFilesList, selectedFolder);\r\n                    if (data.transactionType === TransactionType.Cash) {\r\n                        const finalData = [getDataInSheetFormat(data, selectedBill.id)];\r\n                        saveCashTransSheet(finalData);\r\n                    } else {\r\n                        saveOnlineTransactionWithBill(data, selectedBill.id);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        setSelectedBill(undefined);\r\n        setOpenDialog(false);\r\n    }, [fileList, selectedBill, selectedFolder]);\r\n\r\n    useEffect(() => {\r\n        fetchFiles(setFilesList, selectedFolder);\r\n    }, [selectedFolder]);\r\n\r\n    const [expenseCategories, setExpenseCategories] = useState<CatItem[]>([]);\r\n    useEffect(() => {\r\n        (async () => {\r\n            const transSheet = new TransSheet();\r\n            const expCat = await transSheet.getExpenseCategories();\r\n            setExpenseCategories(expCat);\r\n        })();\r\n    }, []);\r\n    const bills = useMemo(() => fileList.filter(\r\n        (file) => (\r\n            (file.mimeType.startsWith('image/') ||\r\n            file.mimeType === 'application/pdf') &&\r\n            !file.name.startsWith(VERIFIED_FILE_PREFIX)\r\n        ),\r\n    ), [fileList]);\r\n\r\n    const folders = useMemo(() => fileList.filter(\r\n        (file) => file.mimeType === 'application/vnd.google-apps.folder'), [fileList]);\r\n\r\n    return (\r\n        <div className=\"bill-workspace\">\r\n            <h3>Unprocessed Bills</h3>\r\n            {!!selectedFolder && (\r\n                <Button\r\n                    className=\"go-to-months-btn\"\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => setSelectedFolder('')}\r\n                >\r\n                    Go Back\r\n                </Button>\r\n            )}\r\n            {!selectedFolder && <FolderGrid folders={folders} handleClick={handleFolderClick} />}\r\n            {!!selectedFolder && <BillGrid bills={bills} handleClick={handleClick} />}\r\n            {!!selectedBill && openDialog && (\r\n                <ExpenseForm\r\n                    {...formData}\r\n                    image={selectedBill.id}\r\n                    mimeType={selectedBill.mimeType}\r\n                    callback={handleClose}\r\n                    handleClose={handleClose}\r\n                    expenseCategories={expenseCategories}\r\n                />\r\n            )}\r\n            {showLoader && (\r\n                <div className=\"overlay\">\r\n                    <CircularProgress />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n// TODOS:\r\n// Testing our logic\r\n// Date Field Fix\r\n// Online Transactions Update\r\n","import { Configuration, OpenAIApi } from 'openai';\r\nimport { getConfig } from '..';\r\nimport { ApplicationConfig } from '../service-types';\r\n\r\nexport class ChatGPTService {\r\n    public chatGPTPrivateKey: string = '';\r\n    public openAI: OpenAIApi | undefined;\r\n    private appConfig: ApplicationConfig;\r\n\r\n    public constructor() {\r\n        this.appConfig = getConfig();\r\n        if (this.appConfig.chatGPTPrivateKey) {\r\n            this.chatGPTPrivateKey = this.appConfig.chatGPTPrivateKey;\r\n            const chatGPTConfig = new Configuration({\r\n                organization: 'org-wfOq673LgvxydlfXwY3Fmcvm',\r\n                apiKey: this.chatGPTPrivateKey,\r\n            });\r\n            this.openAI = new OpenAIApi(chatGPTConfig);\r\n        }\r\n    }\r\n\r\n    public async getCompleted(text: string) {\r\n        if (this.openAI) {\r\n            return this.openAI.createCompletion({\r\n                model: 'text-davinci-003',\r\n                prompt: 'Say this is a test',\r\n                max_tokens: 7,\r\n                temperature: 0,\r\n                top_p: 1,\r\n                n: 1,\r\n                stream: false,\r\n                logprobs: null,\r\n                stop: '\\n',\r\n            },\r\n            );\r\n        }\r\n        return Promise.resolve('');\r\n    }\r\n\r\n    static instance: ChatGPTService;\r\n\r\n    static getInstance() {\r\n        if (!ChatGPTService.instance) {\r\n            ChatGPTService.instance = new ChatGPTService();\r\n        }\r\n        return ChatGPTService.instance;\r\n    }\r\n}\r\n\r\nexport default ChatGPTService;\r\n","import { IconButton } from '@mui/material';\r\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\r\nimport CloseFullscreenIcon from '@mui/icons-material/CloseFullscreen';\r\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\r\nimport { Camera } from 'react-camera-pro';\r\nimport './cash-trans.css';\r\nimport { getDatafromDataURI } from '../../services/ocr';\r\nimport ChatGPTService from '../../services/chatgpt';\r\n\r\nfunction dataURItoBlob(dataURI: string) {\r\n    const binary = atob(dataURI.split(',')[1]);\r\n    const array = [];\r\n    for (let i = 0; i < binary.length; i += 1) {\r\n        array.push(binary.charCodeAt(i));\r\n    }\r\n    return new Blob([new Uint8Array(array)], { type: 'image/jpeg' });\r\n}\r\nfunction CashTransactions() {\r\n    const camera = useRef();\r\n    const [image, setImage] = useState<string>();\r\n    const [fullscreen, setFullscreen] = useState(true);\r\n    const errorMessages = {};\r\n    const takePhoto = useCallback(() => {\r\n        const cameraRef: { takePhoto?: Function } = camera.current || {};\r\n        if (!image && cameraRef && cameraRef.takePhoto) {\r\n            setImage(cameraRef.takePhoto());\r\n            setFullscreen(false);\r\n        } else {\r\n            setImage(undefined);\r\n        }\r\n    }, [camera, image]);\r\n    const toggleFullScreen = useCallback(() => {\r\n        setFullscreen((status) => !status);\r\n    }, []);\r\n    const parentClassName = fullscreen ? 'cash-trans block-page' : 'cash-trans';\r\n    const [imageData, setImageData] = useState();\r\n    useEffect(() => {\r\n        if (image) {\r\n            getDatafromDataURI(image).then(async (response: any) => {\r\n                const { ParsedText } = response.data.ParsedResults[0] || {};\r\n                if (ParsedText) {\r\n                    const parsedData = await ChatGPTService.getInstance().getCompleted(ParsedText);\r\n                    setImageData(parsedData as any);\r\n                }\r\n            });\r\n        }\r\n    }, [image]);\r\n    return (\r\n        <div className={parentClassName}>\r\n            <div>Handle Cash Transactions</div>\r\n            <pre>{JSON.stringify(imageData, undefined, 4)}</pre>\r\n            {!image && (\r\n                <IconButton\r\n                    className=\"close-camera\"\r\n                    aria-label=\"Take Photo\"\r\n                    onClick={toggleFullScreen}\r\n                >\r\n                    {fullscreen ? <CloseFullscreenIcon /> : <OpenInFullIcon />}\r\n                </IconButton>\r\n            )}\r\n            {!image && <Camera ref={camera} facingMode=\"environment\" errorMessages={errorMessages} />}\r\n            <IconButton\r\n                className=\"camera-click\"\r\n                aria-label=\"Take Photo\"\r\n                onClick={takePhoto}\r\n            >\r\n                <img src=\"/images/circular-camera.png\" alt=\"Take Pic\" />\r\n            </IconButton>\r\n            {/* {image && <img className=\"captured-image\" src={image} alt=\"Uploaded Bill\" />} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CashTransactions;\r\n","import React from 'react';\r\nimport CashTransactions from '../components/cash';\r\n\r\nconst Cash: React.FC = () => (\r\n    <CashTransactions />\r\n);\r\n\r\nexport default Cash;\r\n","import React, { useCallback } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n// import Slide from '@material-ui/core/Slide';\r\n// import { TransitionProps } from '@material-ui/core/transitions';\r\n\r\n// const Transition = React.forwardRef((\r\n//     props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n//     ref: React.Ref<unknown>,\r\n// ) => <Slide direction=\"up\" ref={ref} {...props} />);\r\n\r\nexport type SecretDialogProps = {\r\n    errorMsg?: string;\r\n    handleSecret: (secret: string) => void;\r\n}\r\nexport default function SecretDialog(props: SecretDialogProps) {\r\n    const [open, setOpen] = React.useState(true);\r\n    const [secret, setSecret] = React.useState('');\r\n    const handleOk = useCallback(() => {\r\n        // setOpen(false);\r\n        props.handleSecret(secret);\r\n    }, [props, secret]);\r\n    const handleChange = useCallback((e: any) => {\r\n        setSecret(e.target.value);\r\n    }, []);\r\n    const handleEnter = useCallback((e: any) => {\r\n        const ENTER_KEYCODE = 13;\r\n        const keyCode = e.keyCode ? e.keyCode : e.which;\r\n        if (keyCode === ENTER_KEYCODE) {\r\n            props.handleSecret(secret);\r\n        }\r\n    }, [props, secret]);\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            keepMounted\r\n            aria-labelledby=\"Secret Key\"\r\n            aria-describedby=\"Enter your secret key\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">Enter the secret key!!!</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    Check with other committee members, if secret key is not known.\r\n                </DialogContentText>\r\n                <Input type=\"password\" value={secret} onChange={handleChange} onKeyPress={handleEnter} />\r\n                <div className=\"error\">{props.errorMsg}</div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleOk} disabled={!secret} color=\"primary\">\r\n                    OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Router, Link } from '@reach/router';\r\nimport { Provider } from 'react-redux';\r\nimport KeyboardDoubleArrowLeftIcon from '@mui/icons-material/KeyboardDoubleArrowLeft';\r\nimport KeyboardDoubleArrowRightIcon from '@mui/icons-material/KeyboardDoubleArrowRight';\r\nimport CategoryIcon from '@mui/icons-material/Category';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CurrencyRupeeIcon from '@mui/icons-material/CurrencyRupee';\r\nimport ReceiptIcon from '@mui/icons-material/Receipt';\r\nimport { ProSidebar, Menu, MenuItem, SidebarFooter } from 'react-pro-sidebar';\r\nimport store from './services/redux/store';\r\nimport OnlineTransactionParser from './workspaces/online';\r\nimport Categorizer from './workspaces/categorizer';\r\nimport BillParser from './workspaces/new-bills';\r\nimport CashTransactions from './workspaces/cash';\r\nimport SecretDialog from './components/mapping/secret-dialog';\r\nimport { getConfig, setCredentials } from './services';\r\nimport './app.css';\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\n\r\nconst Home = (props: any) => <OnlineTransactionParser />;\r\nconst Cat = (props: any) => <Categorizer />;\r\nconst Bills = (props: any) => <BillParser />;\r\nconst Cash = (props: any) => <CashTransactions />;\r\n\r\nfunction App() {\r\n    const [errorMsg, setErrorMsg] = useState<string>('');\r\n    const [secret, setSecret] = useState('');\r\n    const [secretSuccess, setSecretSuccess] = useState<boolean>(!!getConfig().secret);\r\n    useEffect(() => {\r\n        if (secret) {\r\n            const out = setCredentials(secret);\r\n            if (!out.res) {\r\n                setErrorMsg('Wrong secret. Enter it again.');\r\n                setSecret('');\r\n            } else {\r\n                setErrorMsg('');\r\n                setSecretSuccess(true);\r\n            }\r\n        }\r\n    }, [secret]);\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    return (\r\n        <Provider store={store}>\r\n            <header className=\"app-header\">\r\n                <img src=\"/images/ssfa.png\" alt=\"Suraksha Sunflower Apartment\" width=\"80px\" height=\"60px\" />\r\n                <span>Suraksha Sunflower </span>\r\n                {/* <nav className=\"nav-bar\">\r\n                    <Link to=\"/\">Parse Online</Link> |{' '}\r\n                    <Link to=\"cat\">Categorize Transactions</Link> |{' '}\r\n                    <Link to=\"bills\">Upload Bills</Link> |{' '}\r\n                    <Link to=\"cash\">Cash Transactions</Link>\r\n                </nav> */}\r\n            </header>\r\n            <div className=\"app\">\r\n                <ProSidebar collapsed={collapsed}>\r\n                    <Menu iconShape=\"circle\">\r\n                        <MenuItem icon={<HomeIcon />} title=\"Parse Online Transactions\">\r\n                            <Link to=\"/\">Parse Online Transactions</Link>\r\n                        </MenuItem>\r\n                        <MenuItem icon={<CategoryIcon />} title=\"Categorize Transactions\">\r\n                            <Link to=\"cat\">Categorize Transactions</Link>\r\n                        </MenuItem>\r\n                        <MenuItem icon={<ReceiptIcon />} title=\"Upload Bills\">\r\n                            <Link to=\"bills\">Upload Bills</Link>\r\n                        </MenuItem>\r\n                        <MenuItem icon={<CurrencyRupeeIcon />} title=\"Cash Transactions\">\r\n                            <Link to=\"cash\">Cash Transactions</Link>\r\n                        </MenuItem>\r\n                        {/* <SubMenu title=\"Components\">\r\n                            <MenuItem>Component 1</MenuItem>\r\n                            <MenuItem>Component 2</MenuItem>\r\n                        </SubMenu> */}\r\n                    </Menu>\r\n                    <SidebarFooter className=\"sb-footer\">\r\n                        {!collapsed &&\r\n                            <KeyboardDoubleArrowLeftIcon onClick={() => setCollapsed(true)} />}\r\n                        {collapsed &&\r\n                            <KeyboardDoubleArrowRightIcon onClick={() => setCollapsed(false)} />}\r\n                    </SidebarFooter>\r\n                </ProSidebar>\r\n                <div className=\"workspace\">\r\n                    {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\r\n                    {!secretSuccess && (\r\n                        <SecretDialog errorMsg={errorMsg} handleSecret={setSecret} />\r\n                    )}\r\n                    {secretSuccess && (\r\n                        <Router>\r\n                            <Home path=\"/\" />\r\n                            <Cat path=\"cat\" />\r\n                            <Bills path=\"bills\" />\r\n                            <Cash path=\"cash\" />\r\n                        </Router>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport './index.css';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\nexport default {};\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}